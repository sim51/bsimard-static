<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benoit Simard</title>
    <description>Benoit 's Blog</description>
    <link>http://www.bsimard.com/</link>
    <atom:link href="http://www.bsimard.com/en/feed" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Sep 2018 12:02:56 +0200</pubDate>
    <lastBuildDate>Thu, 06 Sep 2018 12:02:56 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>

    
     
      <item>
        <title>How to use Kettle to import data in Neo4j</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#kettle&quot;&gt;Kettle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-connector&quot;&gt;Neo4j connector&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#how-to-install-it&quot;&gt;How to install it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#components&quot;&gt;Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-cypher&quot;&gt;Neo4j Cypher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-output&quot;&gt;Neo4j Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kettle&quot;&gt;Kettle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kettle (or Pentaho Data Integration) is a well known ETL tool.
It is mature tool, simple to learn due to its GUI and open-source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, Kettle has a lot of plugins for all various data editors, so can really do every thing you want with your data.
In this post, I will show you how to use the Neo4j components, but firstly, you need to have ketlle on your computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install kettle, it&amp;#8217;s pretty easy, you only need a JDK installed on your laptop (&amp;gt;= version 8), and then follow those steps :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the last binaries at this location : &lt;a href=&quot;https://sourceforge.net/projects/pentaho/files/Data%20Integration/7.1/&quot; class=&quot;bare&quot;&gt;https://sourceforge.net/projects/pentaho/files/Data%20Integration/7.1/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;spoon.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Spoon is the application name of the graphic interface on which you will design your process
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;neo4j-connector&quot;&gt;Neo4j connector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some Neo4j connectors on the Kettle marketplace, but I strongly recommend you to use this one : &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output&quot; class=&quot;bare&quot;&gt;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output&lt;/a&gt;
It is efficient, updated and maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is based on the official Neo4j Java Driver and have all the options you want to import your data in Neo4j, even on a cluster environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For now, this plugin is not on the marketplace but it will be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to-install-it&quot;&gt;How to install it&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go to this page &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/releases/&quot; class=&quot;bare&quot;&gt;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/releases/&lt;/a&gt;, and get the latest release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip it into the &lt;code&gt;plugins&lt;/code&gt; folder of your Kettle installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart spoon&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin comes with 2+1 components :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Cypher :&lt;/strong&gt; a very useful component where you can write a cypher query, and it  can be used as an input or output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Output :&lt;/strong&gt; allow you to dynamically create (or update) nodes or relationships. It will generate the cypher query for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Graph Output:&lt;/strong&gt; By doing a graph mapping on the input fields, it will create/update the graph for you. But this component is in &lt;strong&gt;WIP&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-cypher&quot;&gt;Neo4j Cypher&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is (from my POV) the main component of this plugin (I&amp;#8217;m a Cypher expert, so I like to write my own query ^^).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-cypher.png&quot; alt=&quot;kettle neo4j cypher&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing you need to do is to declare a &lt;strong&gt;Neo4j connection&lt;/strong&gt;.
If you have previously declare a Neo4j connection you can reuse it, otherwise you need to create a new one by fulfill this form :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-connection.png&quot; alt=&quot;kettle neo4j connection&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the connection is using the &lt;strong&gt;Bolt&lt;/strong&gt; protocol, and you can also configure a cluster connection with a routing policy.
So it&amp;#8217;s really complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;batch size&lt;/code&gt; parameter allow you define the size of your transaction.
In my example, Every 500 rows the component will do a commit.
This is really important to control the transaction size during an import process, to have the best performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your Cypher query can be totally dynamic, ie, can be defined from an input field. To do it,  you just have to enable the &lt;code&gt;Get Cypher from input field?&lt;/code&gt; and then specify the &lt;code&gt;Cypher input field&lt;/code&gt;.
Otherwise, you have to write your query in the &lt;code&gt;Cypher&lt;/code&gt; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another good point is that the component allows you to use query parameters.
In my example, &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$year&lt;/code&gt; come from the input fields.
As you can see, I have defined them into the &lt;code&gt;Parameters&lt;/code&gt; section, just below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And last point, If you want to use this component as an &lt;strong&gt;Input&lt;/strong&gt; one, you have to define the &lt;code&gt;Returns&lt;/code&gt; section with the name and type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, you have the hand on everything to create an efficient import process.
The only lacks are in the UI (because I&amp;#8217;m a lazy person ^^), where I would like to have :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a &lt;strong&gt;Get Fields&lt;/strong&gt; button on the &lt;code&gt;Parameters&lt;/code&gt; section, to fulfill it with all the input fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;strong&gt;compute return values&lt;/strong&gt; button to automatically fulfill the &lt;code&gt;Return&lt;/code&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/issues/22&quot;&gt;github issue&lt;/a&gt;  is already created, and &lt;a href=&quot;https://github.com/mattcasters&quot;&gt;Matt Caster&lt;/a&gt; (the father of Kettle and one of the dev. of this plugin) is on it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-output&quot;&gt;Neo4j Output&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component allow you to create nodes and relationships without writing a cypher query, it will do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-from.png&quot; alt=&quot;kettle neo4j output from&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use it if you have Input fields define :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A node : you have to use only the &lt;code&gt;From Node&lt;/code&gt; tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two nodes plus the relationship between them : you have to define the &lt;code&gt;From node&lt;/code&gt;, &lt;code&gt;To node&lt;/code&gt; and &lt;code&gt;Relationship&lt;/code&gt; tabulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Same as before, you can define the &lt;code&gt;Batch size&lt;/code&gt;, and moreover you can also tell the component to create the Neo4j &lt;strong&gt;UNIQUE CONSTRAINTS&lt;/strong&gt; for you if you enable the &lt;code&gt;Create indexes?&lt;/code&gt; and specify the &lt;code&gt;Primary&lt;/code&gt; fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component has been designed to have the best performances for Neo4j.
For example if you create nodes with a batch size, the component will collect your input fields in an array and generate a query like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH $data
UNWIND $data as $object
  CREATE ....&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SO you will not have many queries, but only one that match your batch size.
This is really cool for performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;example-for-nodes-and-relationship&quot;&gt;Example for nodes and relationship&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you have the following input fields : &lt;code&gt;label, id, name, parent_id, type&lt;/code&gt;
What you want to do is to create :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a node with the label &lt;code&gt;label&lt;/code&gt; and with the properties &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a relationship between the current node and its &lt;code&gt;parent_id&lt;/code&gt; with the type &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you need to fulfill the component by following those screenshots&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-from.png&quot; alt=&quot;From node tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-to.png&quot; alt=&quot;To node tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-rel.png&quot; alt=&quot;relationship tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
don&amp;#8217;t use the &lt;code&gt;CREATE&lt;/code&gt; mode for such a process, otherwise the &lt;code&gt;To&lt;/code&gt; node will be created each time.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component needs to have an input field for the label of nodes and for the relationship type.
If you don&amp;#8217;t have one because those value are static, you can use the &lt;code&gt;Add constants&lt;/code&gt; component that allows you to a constant field to the fields :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-constant.png&quot; alt=&quot;kettle constant&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the &lt;code&gt;MERGE&lt;/code&gt; mode, sometimes it is useful to define a default value for the &lt;em&gt;property&lt;/em&gt; on which do the merge.
To do it, you can use the &lt;code&gt;Value Mapper&lt;/code&gt; component like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-map.png&quot; alt=&quot;kettle map&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;in this example, if the &lt;code&gt;parent_id&lt;/code&gt; is not set, I replace it with the value &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post is just an overview of Kettle, but as you can see its integration with Neo4j is really easy.
I recommend you to test it, and if you have questions, requests or issues, don&amp;#8217;t hesitate to create an issue on the github repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have fun, and boil your graph imports !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 03 Sep 2018 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2018/09/03/kettle-neo4j.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2018/09/03/kettle-neo4j.html</guid>
        
        <category>Kettle, neo4j, ETL</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Monitoring Neo4j with influxdb TICK stack</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#influxdb&quot;&gt;Influxdb&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#concept&quot;&gt;Concept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-tick-stack&quot;&gt;The TICK stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-architecture&quot;&gt;The architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-monitored-server&quot;&gt;The monitored server&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j&quot;&gt;Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#telegraf&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-monitoring-server&quot;&gt;The monitoring server&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#installation-2&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#influxdb-2&quot;&gt;InfluxDb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#telegraf-2&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chronograf&quot;&gt;Chronograf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kapacitor&quot;&gt;Kapacitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you push a service in production, it&amp;#8217;s really important to monitor its health status.
This will allow you to see if everything is OK,
to be alerted if something is going wrong but also in a case of a problem, to investigate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This rule should be applied for &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, and you will see how to do it with the &lt;strong&gt;TICK&lt;/strong&gt; stack (from &lt;a href=&quot;http://influxdata.com/&quot;&gt;influxDB&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But before to explain how to do it for &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, lets talk a little about Influxdb.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;influxdb&quot;&gt;Influxdb&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;concept&quot;&gt;Concept&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.influxdata.com&quot;&gt;Influx DB&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_series_database&quot;&gt;time series database&lt;/a&gt;.
It&amp;#8217;s made to store and query data in times, so it&amp;#8217;s the perfect tool to store metrics of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Influx has &lt;strong&gt;7 key concepts&lt;/strong&gt; : &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;measurement&lt;/code&gt;, &lt;code&gt;series&lt;/code&gt;, &lt;code&gt;retention policy&lt;/code&gt; and &lt;code&gt;continous queries&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s better to take an example to understand those concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you have a captor of temperature and humidity in your living room and an other one in your bedroom.
Each time you will read one, you will receive the data at a point of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it&amp;#8217;s the same kind of data, you will store them at the same location.
But you also want to be able to distinguish the data from the living room and the bedroom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end, you will have something like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: captor_temperature_humidity
----------------------------------
time                    temperature   humidity   room
2015-08-18T00:00:00Z    18.3          51.2       Living Room
2015-08-18T00:00:00Z    16.7          48.9       Bedroom
2015-08-18T00:01:00Z    18.5          51.1       Living Room
2015-08-18T00:01:02Z    16.9          49.0       Bedroom
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we have a &lt;strong&gt;measurement name&lt;/strong&gt; called &lt;code&gt;captor_temperature_humidity&lt;/code&gt; (you can think about it like a table in SQL) and each line is &lt;strong&gt;measurement&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Measurement&lt;/strong&gt; is composed of : &lt;code&gt;time&lt;/code&gt; , &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;humidity&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Temperature&lt;/strong&gt; and &lt;strong&gt;humidity&lt;/strong&gt; are measurement&amp;#8217;s &lt;strong&gt;fields&lt;/strong&gt;, and their values are the data you want to follow in time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On each measurement, I have added the &lt;strong&gt;room&lt;/strong&gt; to know where comes the measurement. It&amp;#8217;s a measurement&amp;#8217;s &lt;strong&gt;tag&lt;/strong&gt; (a metadata), and you can have multiple tags for a measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the time, you will have a very huge number of measurement, and usually you don&amp;#8217;t want to save them forover.
It&amp;#8217;s where the concept of &lt;strong&gt;retention policy&lt;/strong&gt; takes place,
you can configure the database  to delete measurements older than X (X is hours, days, weeks, &amp;#8230;&amp;#8203;, years).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE RETENTION POLICY one_week ON my_database DURATION 1w;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The default &lt;strong&gt;retention policy&lt;/strong&gt; is to keep the data forever.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, you can define some &lt;strong&gt;continious queries&lt;/strong&gt; to aggregate measurements over time. it will create a new (aggregated) measurement on the same database but with a new retention policy :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE CONTINUOUS QUERY &quot;my_continious_query&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(&quot;temperature&quot;) INTO &quot;my_database&quot;.&quot;one_week&quot;.&quot;average_temperature&quot; FROM &quot;captor_temperature_humidity&quot; GROUP BY time(1h)
END&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So with the help of &lt;strong&gt;retention policies&lt;/strong&gt; and &lt;strong&gt;continious queries&lt;/strong&gt;, you can downsampling the data with somehting similar as that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;keep the fine data for 1 week&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregate per minute for data between one week and one month&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregate per 10 minutes for data older than a month&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This give those retention policies :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE RETENTION POLICY &quot;1_week&quot; ON &quot;my_database&quot; DURATION 7d REPLICATION 1 DEFAULT
CREATE RETENTION POLICY &quot;1_month&quot; ON &quot;my_database&quot; DURATION 30d REPLICATION 1
CREATE RETENTION POLICY &quot;forever&quot; ON &quot;my_database&quot; DURATION INF REPLICATION 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And those continuous query :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;CREATE CONTINUOUS QUERY &quot;cq_1min_1month&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(*) INTO &quot;my_database&quot;.&quot;1_month&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(60s),*
END;
CREATE CONTINUOUS QUERY &quot;cq_1min_1month&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(*) INTO &quot;my_database&quot;.&quot;forever&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(600s),*
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-tick-stack&quot;&gt;The TICK stack&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TICK stack&lt;/strong&gt; is composed of :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Telegraf :&lt;/strong&gt; an agent that collects metrics, and write them in an influx database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Influx :&lt;/strong&gt; the time series database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chronograf :&lt;/strong&gt; a front-end applicatino that allow you to explore your data and to create dashboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kapacitor :&lt;/strong&gt; an alerting system&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a complete stack to collect, manage and exploit your time series data, so it&amp;#8217;s perfect for my goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;The architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally there is a server where all the metrics are a centralized, and where all the monitoring application are installed.
I will call it the &lt;strong&gt;Monitoring server&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This server will save all the metrics fron your system, and to do it there is two methods :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;push&lt;/strong&gt; : metrics are directly pushed to the monitoring server by using an agent on each server that you want to monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pull&lt;/strong&gt; : the monitoring system will query all your servers to collect the metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, the first solution is prefered, and it&amp;#8217;s the one that I will put in place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the architecture schema :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-f2e5f75f5280dc00917b791b23c08a79.png&quot; alt=&quot;diag f2e5f75f5280dc00917b791b23c08a79&quot; width=&quot;440&quot; height=&quot;216&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In red you have the monitoring server, and in grey the monitored server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
With this kind of architecture, Neo4j send metrics locally, so it&amp;#8217;s very fast.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-monitored-server&quot;&gt;The monitored server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j&quot;&gt;Neo4j&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In its &lt;strong&gt;Enterprise Edition&lt;/strong&gt;, Neo4j has a &lt;a href=&quot;https://neo4j.com/docs/operations-manual/current/monitoring/metrics/&quot;&gt;monitoring system&lt;/a&gt;.
In fact there is four ways to monitor it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JMX :&lt;/strong&gt; it&amp;#8217;s a standard java functionnality that allow you to retrive some metrics values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Graphite connector :&lt;/strong&gt; you just have to configure your Graphana server, and Neo4j will send its metrics regulary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prometheus connector :&lt;/strong&gt; same as for Graphite but for Prometheus time series database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSV file :&lt;/strong&gt;  Neo4j dumps all its metrics at a regular time interval&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Telegraf&lt;/strong&gt; is compatible with the Graphite protocol, so I will use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration is really simple, just edit your &lt;code&gt;neo4j.conf&lt;/code&gt; file and put at the end those lines :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;# Setting for enabling all supported metrics.
metrics.enabled=true
# Setting for enabling all Neo4j specific metrics.
metrics.neo4j.enabled=true
# Setting for exposing metrics about transactions; number of transactions started, committed, etc.
metrics.neo4j.tx.enabled=true
# Setting for exposing metrics about the Neo4j page cache; page faults, evictions, flushes and exceptions, etc.
metrics.neo4j.pagecache.enabled=true
# Setting for exposing metrics about approximately entities are in the database; nodes, relationships, properties, etc.
metrics.neo4j.counts.enabled=true
# Setting for exposing metrics about the network usage of the HA cluster component.
metrics.neo4j.network.enabled=true
# Enable the Graphite integration. Default is 'false'.
metrics.graphite.enabled=true
# The IP and port of the Graphite server on the format &amp;lt;hostname or IP address&amp;gt;:&amp;lt;port number&amp;gt;.
# The default port number for Graphite is 2003.
metrics.graphite.server=localhost:2003
# How often to send data. Default is 3 seconds.
metrics.graphite.interval=3s
# Prefix for Neo4j metrics on Graphite server.
metrics.prefix=MyHost&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like you see, I just :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enable the metrics feature and also each familly metric.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable the graphite integration, and configure its location, time interval and the prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You don&amp;#8217;t have to change anything, except the &lt;code&gt;metrics.prefix&lt;/code&gt;. This value will be used as the host identifier in metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;telegraf&quot;&gt;Telegraf&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many ways to install Telegraf on your system, and you can check directly on &lt;a href=&quot;https://docs.influxdata.com/telegraf/v1.6/introduction/installation/#installation&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My prefer OS is &lt;strong&gt;debian&lt;/strong&gt;, so I will show you how to do on it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add the influxdb repository key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add the repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;perfom an update&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install the package &lt;code&gt;telegraf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo &quot;deb https://repos.influxdata.com/debian jessie stable&quot; | tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install telegraf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All &lt;strong&gt;Telegraf&lt;/strong&gt;'s configuration is located in the file &lt;code&gt;/etc/telegraf/telegraf.conf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Firstly we need tell Telegraf to be able to act as a graphite server :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[inputs.socket_listener]]
  service_address = &quot;tcp://:2003&quot;
  separator = &quot;.&quot;
  data_format = &quot;graphite&quot;
  templates = [
    &quot;*.neo4j.*.* host.measurement.measurement.field* name=neo4j,vlan=testing&quot;,
    &quot;*.vm.*.* host.measurement.measurement.field* name=neo4j,vlan=testing&quot;
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think it&amp;#8217;s easy to understand, except for the &lt;code&gt;templates&lt;/code&gt; part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in graphite all metrics follow a schema like this one &lt;code&gt;MyHost.neo4j.bolt.messages_done 10&lt;/code&gt;.
So we need to tell &lt;strong&gt;Telegraf&lt;/strong&gt; how to parse it to find the field measurement, the value,  and tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The part &lt;code&gt;*.neo4j.*.*&lt;/code&gt; is a filter. If a line match this pattern, then it will parsed with &lt;code&gt;host.measurement.measurement.field*&lt;/code&gt;.
With the example &lt;code&gt;MyHost.neo4j.bolt.messages_done 10&lt;/code&gt;, we will have :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tags: &lt;code&gt;MyHost&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measurement: &lt;code&gt;neo4j.bolt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field: &lt;code&gt;messages_done&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value: &lt;code&gt;10&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, at the end of each template you can see this &lt;code&gt;name=neo4j,vlan=testing&lt;/code&gt;.
It&amp;#8217;s a list of static tags that will be added to each metric.
This can be really useful if you want to monitor multiple Neo4j server (like a cluster).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, now we have the metrics, but we need to push them to our centralized &lt;strong&gt;influx&lt;/strong&gt; database.
For this, you need to configure &lt;strong&gt;Telegraf&lt;/strong&gt; like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  urls = [&quot;http://10.0.0.12:8086&quot;]

  ## The target database for metrics; will be created as needed.
  database = &quot;telegraf&quot;

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.
  retention_policy = &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You just have to change the &lt;code&gt;urls&lt;/code&gt; property with yours (in my case &lt;code&gt;&lt;a href=&quot;http://10.0.0.12:8086&quot; class=&quot;bare&quot;&gt;http://10.0.0.12:8086&lt;/a&gt;&lt;/code&gt;), and optionnally the database name (by default it&amp;#8217;s &lt;code&gt;telegraf&lt;/code&gt;) and the rentention policy you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In the general section of the configuration, you can configure the batch size if you want.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-monitoring-server&quot;&gt;The monitoring server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation-2&quot;&gt;Installation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On this server we will install : InfluxDb, Chronograf, Kapacitor and Telegraf (to monitor the monitoring system ^^)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will follow the same process as explained on the installation of &lt;strong&gt;Telegraf&lt;/strong&gt; : via &lt;strong&gt;apt&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo &quot;deb https://repos.influxdata.com/debian jessie stable&quot; | tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install telegraf influxdb chronograf kapacitor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;influxdb-2&quot;&gt;InfluxDb&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I change nothing in the default configuration of &lt;strong&gt;Influxdb&lt;/strong&gt;,
The only thing I will do it&amp;#8217;s to create a database &lt;code&gt;telegraf&lt;/code&gt; with a custom retention policy that keep the data for 3 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this I will use the &lt;strong&gt;Influxdb&lt;/strong&gt; CLI,  &lt;code&gt;sudo influx&lt;/code&gt;, and typing those commands :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;CREATE DATABASE telegraf
USE telegraf
CREATE RETENTION POLICY &quot;3_month&quot; ON &quot;monitoring&quot; DURATION 90d REPLICATION 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to check, you can type &lt;code&gt;SHOW RETENTION POLICIES&lt;/code&gt; to display all RPs.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;telegraf-2&quot;&gt;Telegraf&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have installed &lt;strong&gt;Telegraf&lt;/strong&gt; just to monitor the monitoring server (CPU, network, disk, &amp;#8230;&amp;#8203;).
You just have to configure it to send all the data to the &lt;code&gt;telegraf&lt;/code&gt; (the default value).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  # default is localhost with the standard port of influx
  # urls = [&quot;http://10.0.0.12:8086&quot;]

  ## The target database for metrics; will be created as needed.
  database = &quot;telegraf&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;chronograf&quot;&gt;Chronograf&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Chronograf is listening on the port &lt;code&gt;8888&lt;/code&gt;.
So open your browser at &lt;a href=&quot;http://MONITORING_SERVER_IP:8888/&quot; class=&quot;bare&quot;&gt;http://MONITORING_SERVER_IP:8888/&lt;/a&gt; (change &lt;code&gt;MONITORING_SERVER_IP&lt;/code&gt; with the corresponding IP).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can take a look at the &lt;strong&gt;Host List&lt;/strong&gt;, you should see a list with two items : names of the monitored and monitoring server.
Click on one, and should see something like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/chronograf.png&quot; alt=&quot;chronograf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can create a new dashboard for Neo4j with the following widgets :&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 66.6668%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Query&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Thread Jetty&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;threads.jetty.all&quot;) AS &quot;mean_threads.jetty.all&quot;,
       mean(&quot;threads.jetty.idle&quot;) AS &quot;mean_threads.jetty.idle&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.server&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM memory&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stacked Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT pool.g1_survivor_space/1000000,
       pool.metaspace/1000000,
       pool.g1_eden_space/1000000,
       pool.g1_old_gen/1000000
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.memory&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM GC Time&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DIFFERENCE(&quot;time.g1_young_generation&quot;) AS &quot;mean_time.g1_young_generation&quot;,
       DIFFERENCE(&quot;time.g1_old_generation&quot;) AS &quot;mean_time.g1_old_generation&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.gc&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Transactions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DIFFERENCE(last(&quot;started&quot;)) AS &quot;mean_started&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.transaction&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(linear)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Page cache&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;hits&quot;) AS &quot;mean_hits&quot;,
       mean(&quot;page_faults&quot;) AS &quot;mean_page_faults&quot;,
       mean(&quot;flushes&quot;) AS &quot;mean_flushes&quot;,
       mean(&quot;evictions&quot;) AS &quot;mean_evictions&quot;,
       mean(&quot;eviction_exceptions&quot;) AS &quot;mean_eviction_exceptions&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.page_cache&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM Threads&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;total&quot;) AS &quot;mean_total&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.thread&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Nodes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT max(&quot;node&quot;) AS &quot;max_node&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of relationships&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;relationship&quot;) AS &quot;last_relationship&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Properties&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;property&quot;) AS &quot;last_property&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Relationship Types&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;relationship_type&quot;) AS &quot;last_relationship_type&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Opened Transactions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT started  - committed - rollbacks
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.transaction&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the result :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/neo-dashboard.png&quot; alt=&quot;neo dashboard&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kapacitor&quot;&gt;Kapacitor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kapacitor is the alerting systen of the stack.
You can create some rules for Kapacitor directly in Chronograf :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/kapacitor.png&quot; alt=&quot;kapacitor&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This alert sends a message on slack as soon as there less than 20% of free space on my disk :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You see it&amp;#8217;s really easy to monitor your infrastructure and Neo4j servers with the &lt;strong&gt;TICK&lt;/strong&gt; stack.
But there are some lacks :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Telegraf doesn&amp;#8217;t have a JMX plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not possible to make a generic continious query that downsample the data with the same field name (you will have an aggregation prefix).
This is really annoying when you want to have only one query to make your dashboard (and not one per retention). See this &lt;a href=&quot;https://github.com/influxdata/influxdb/issues/7332&quot;&gt;link for more details&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to make the same kind of article but this time with Prometheus and Grafana.
So if you are interested, please leave a comment, it will motivate me to write it :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 22 May 2018 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2018/05/22/monitoring-neo4j-influxdb.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2018/05/22/monitoring-neo4j-influxdb.html</guid>
        
        <category>monitoring, neo4j, influx, tick</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>How to use Sigmajs to display your graph ?</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#how-to&quot;&gt;How-to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#how-to-choose-between-svg-canvas-and-webgl&quot;&gt;How to choose between SVG, Canvas and Webgl ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-sigmajs-graph-structure&quot;&gt;The SigmaJS graph structure&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#definition&quot;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loading-graph-in-sigma&quot;&gt;Loading graph in sigma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#live-example&quot;&gt;Live example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#graph-layout-algorithm&quot;&gt;Graph layout algorithm&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#definition-2&quot;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#force-atlas2&quot;&gt;Force-Atlas2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#live-example-2&quot;&gt;Live example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#plugins&quot;&gt;Plugins&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#edge-labels&quot;&gt;Edge labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#edge-paralleledges&quot;&gt;Edge parallelEdges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#relative-size&quot;&gt;Relative size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sigma-and-neo4j&quot;&gt;Sigma and Neo4j&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-graph-structure-from-a-neo4j-query&quot;&gt;Create a graph structure from a Neo4j query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-sigma-neosig&quot;&gt;Neo4j + Sigma = NeoSig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will show how to display and customize a graph in a browser with the help of &lt;a href=&quot;http://sigmajs.org&quot;&gt;SigmaJS&lt;/a&gt;,
a JS library dedicated to graph drawing delivered under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT licence&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Initially, SigmaJS has been developed for &lt;a href=&quot;https://gephi.org/&quot;&gt;Gephi&lt;/a&gt; to export a graph on the web.
Today, &lt;a href=&quot;http://sigmajs.org&quot;&gt;sigmajs&lt;/a&gt; is a stable, full features and highly configurable graph library.
Moreover, the small cherry on the cake is its compatibility with touch screens.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to&quot;&gt;How-to&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are four steps to follow :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Step 1 : Install sigmajs binaries&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://sigmajs.org&quot;&gt;sigmajs&lt;/a&gt; can be found on :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/sigma&quot;&gt;NPM&lt;/a&gt; : you just have to type : &lt;code&gt;npm sigma --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jacomyal/sigma.js/releases&quot;&gt;Github&lt;/a&gt; : download the &lt;code&gt;build.zip&lt;/code&gt; from a release like &lt;a href=&quot;https://github.com/jacomyal/sigma.js/releases/download/v1.2.0/build.zip&quot;&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Step 2 : Import the JavaScript library in your web page&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The minimal script you have to load is : &lt;code&gt;&amp;lt;script src=&quot;./build/sigma.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Personally, I prefer to import all the source files, it helps to lighten the library by removing the unused source files (ex: I don&amp;#8217;t need SVG &amp;amp; Webgl renderers if I use canvas).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Step 3 :  Create an HTML container&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have to create an HTML element, for example a &lt;code&gt;div&lt;/code&gt; with an &lt;code&gt;id&lt;/code&gt; like this : &lt;code&gt;&amp;lt;div id='sigma-container'&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, you also need to give it an  &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;, otherwise it will have a size of 0 pixel.
This is easily done with some CSS : &lt;code&gt;#sigma-container { width:100%, height:100%}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Initialize sigmajs&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To initialize Sigmajs, you need to call the function &lt;code&gt;sigma&lt;/code&gt; with those arguments :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;render&lt;/strong&gt; : it contains the HTML element  that sigmajs will use to display the graph, plus the type of renderer (SVG, canvas or WebGL)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sigmajs&amp;#8217;s &lt;strong&gt;settings&lt;/strong&gt; : this object will override the default settings, so you can pass an empty object for now. The complete settings list is available &lt;a href=&quot;https://github.com/jacomyal/sigma.js/wiki/Settings&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end, you should have something like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;SigmaJS example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;./build/sigma.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style&amp;gt;
      html { height:100%;}
      body {height: 100%;}
      #sigma-container { width:100%; height:100%; background-color:#E1E1E1}
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id='sigma-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
      // Initialize sigma:
      var s = new sigma(
        {
           renderer: {
             container: document.getElementById('sigma-container'),
             type: 'canvas'
           },
           settings: {}
         }
       );
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to-choose-between-svg-canvas-and-webgl&quot;&gt;How to choose between SVG, Canvas and Webgl ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://sigmajs.org&quot;&gt;SigmaJS&lt;/a&gt; can used one this technology to display your graph : &lt;strong&gt;svg&lt;/strong&gt;, &lt;strong&gt;canvas&lt;/strong&gt; &amp;amp; &lt;strong&gt;webgl&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;SVG&lt;/strong&gt; is a markup language, directly interpreted by your browser,
so it&amp;#8217;s easy to customize nodes &amp;amp; edges style, you just have to add some CSS rules.
But when you apply a layout algorithm on the graph, you continuously change the DOM of the SVG,
and if this DOM is heavy, the result is slow and can freeze your browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Canvas&lt;/strong&gt; is an HTML5 element compatible with all modern browsers.
It defines an area on your web page where you can draw some pixels by using a JavaScript API.
The JavaScript code is directly interpreted by your browser and it decides what and when to render.
Due to this, Canvas scales more than the SVG, but if you want to change the color of a shape, you need a way to specify it in the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, there is &lt;strong&gt;WebGL&lt;/strong&gt;, compatible with almost all newest browsers (even if the API is not stable).
As in Canvas, you need to write some JavaScript code for rendering your visualisation,
but this time, its computation is delegated to &lt;strong&gt;OpenGL&lt;/strong&gt; so to your &lt;strong&gt;GPU&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To resume :&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;strong&gt;SVG&lt;/strong&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;strong&gt;Canvas&lt;/strong&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;strong&gt;WebGL&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Browser compatibility&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ALL (even old ones)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ALL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Modern browsers&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Render phases&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SVG creation &amp;gt; Browser parsing &amp;gt; Browser rendering&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JS code &amp;gt; Browser rendering&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JS Code &amp;gt; OpenGL rendering&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;br&gt;
to display a large graph (more than 1000 elements)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Slow&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Normal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Performant&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The choice will depend on your needs, and also of the &lt;a href=&quot;http://sigmajs.org&quot;&gt;SigmaJS&lt;/a&gt; plugins you want to use (plugins are not compatible with every format).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suggest you to choose &lt;strong&gt;Canvas&lt;/strong&gt; or &lt;strong&gt;Webgl&lt;/strong&gt; if you want to really display a big graph.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-sigmajs-graph-structure&quot;&gt;The SigmaJS graph structure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that sigma is initialized, we need to give it a graph.
It structure is simple : an object with an array of nodes and an array of edges.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Node definition&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 42.8572%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Field&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Required&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Any&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Node identifier, must be unique across all the node&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;x&lt;/code&gt; &amp;amp; &lt;code&gt;y&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Float&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Position of the node in 2D. Can be initialize with &lt;code&gt;Math.random()&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Float&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No  &lt;em&gt;(0)&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Size of the node that is use to render it.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Color RGB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No &lt;em&gt;(&lt;code&gt;defaultNodeColor&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Color used to display the node.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Edge definition&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 42.8572%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Field&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Required&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Any&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Edge identifier, must be unique across all the edge.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Any&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Starting node&amp;#8217;s identifier of the edge.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Any&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ending node&amp;#8217;s identifier of the edge.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;line&lt;/code&gt;,&lt;br&gt;
&lt;code&gt;curve&lt;/code&gt;,&lt;br&gt;
&lt;code&gt;arrow&lt;/code&gt; or&lt;br&gt;
&lt;code&gt;curvedArrow&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No &lt;em&gt;(line)&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Edge type for its render.&lt;br&gt;
The choice will depend on if you want to display an oriented graph. If so, you need an arrow type.
And if you want to display a high number of edges, it&amp;#8217;s faster to use a line type (ie. line or arrow).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Float&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No &lt;em&gt;(&lt;code&gt;minEdgeSize&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Size of the edge that is use to render it.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Color RGB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No &lt;em&gt;(&lt;code&gt;defaultEdgeColor&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Color used to display the edge.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var graph = {
  nodes: [
    { id: &quot;n0&quot;, label: &quot;A node&quot;, x: 0, y: 0, size: 3, color: '#008cc2' },
    { id: &quot;n1&quot;, label: &quot;Another node&quot;, x: 3, y: 1, size: 2, color: '#008cc2' },
    { id: &quot;n2&quot;, label: &quot;And a last one&quot;, x: 1, y: 3, size: 1, color: '#E57821' }
  ],
  edges: [
    { id: &quot;e0&quot;, source: &quot;n0&quot;, target: &quot;n1&quot;, color: '#282c34', type:'line', size:0.5 },
    { id: &quot;e1&quot;, source: &quot;n1&quot;, target: &quot;n2&quot;, color: '#282c34', type:'curve', size:1},
    { id: &quot;e2&quot;, source: &quot;n2&quot;, target: &quot;n0&quot;, color: '#FF0000', type:'line', size:2}
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;loading-graph-in-sigma&quot;&gt;Loading graph in sigma&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sigma has a complete API to manage its graph data. I let you see the &lt;a href=&quot;https://github.com/jacomyal/sigma.js/wiki/Graph-API&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To load a graph in sigma, you just have to call the method &lt;code&gt;read&lt;/code&gt; on the sigma graph instance : &lt;code&gt;s.graph.read(graph)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once it&amp;#8217;s done, we need to tell sigma to draw the graph by calling its &lt;code&gt;refresh&lt;/code&gt; function : &lt;code&gt;s.refresh()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;live-example&quot;&gt;Live example&lt;/h3&gt;
&lt;script async src=&quot;https://jsfiddle.net/sim51/gxum1dq1/embed/result,js/&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;graph-layout-algorithm&quot;&gt;Graph layout algorithm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;definition-2&quot;&gt;Definition&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is hard in displaying a graph is to rapidly display it in such a way
that we can see all nodes and their edges without overlaps (in fact less as possible).
To do it, we need an algorithm that computes the position of each nodes, and the most known for that are the &lt;strong&gt;force-directed&lt;/strong&gt; algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The principle is simple, you need to consider two forces :&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Repulsive&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Attractive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nodes repulse each others. You can consider nodes like particle with the same electric charge.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two nodes with an edge, attract themselves. You can consider an edge as a spring&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/sigmajs/repulsion.png&quot; alt=&quot;repulsion&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/sigmajs/attraction.png&quot; alt=&quot;attraction&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you run an algorithm that compute on each iteration, the sum of the applied forces on each node, and move them in consequence.
After a number of iteration, you will see that graph is in a stable state.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;force-atlas2&quot;&gt;Force-Atlas2&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://sigmajs.org&quot;&gt;SigmaJS&lt;/a&gt; include (as a plugin) a forced-directed algorithm called &lt;strong&gt;Force-Atlas2&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use it, you need to :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 1 : import the plugin files&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;script src=&quot;./build/plugins/sigma.layout.forceAtlas2/supervisor.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;./build/plugins/sigma.layout.forceAtlas2/worker.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 2 : Run it&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the plugin is loaded, we can directly call it on the sigma instance : &lt;code&gt;s.startForceAtlas2()&lt;/code&gt;;
This creates a &lt;a href=&quot;https://developer.mozilla.org/fr/docs/Utilisation_des_web_workers&quot;&gt;web worker&lt;/a&gt; where all the algorithm iterations will be calculated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Step 3 (al) : Stop it&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The algorithm won&amp;#8217;t stop by itself, so I recommend you to stop it after a predefined duration (10 seconds in my example) : &lt;code&gt;window.setTimeout(function() {s.killForceAtlas2()}, 10000);&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;live-example-2&quot;&gt;Live example&lt;/h3&gt;
&lt;script async src=&quot;https://jsfiddle.net/sim51/xck9a7yf/embed/result,js/&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://sigmajs.org&quot;&gt;SigmaJS&lt;/a&gt; has a lot of plugins, you can see the list &lt;a href=&quot;https://github.com/jacomyal/sigma.js/tree/master/plugins&quot;&gt;here&lt;/a&gt;.
I will not show you all of them, so I have done a list of my most used plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;edge-labels&quot;&gt;Edge labels&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin allows you to add a label on each edge. I mainly use it to display the Neo4j&amp;#8217;s relationship type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Import the needed script (in my case &lt;code&gt;settings.js&lt;/code&gt;, &lt;code&gt;sigma.canvas.edges.labels.def.js&lt;/code&gt; &amp;amp; &lt;code&gt;sigma.canvas.edges.labels.curvedArrow.js&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a &lt;code&gt;label&lt;/code&gt; property on yours edges&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script async src=&quot;https://jsfiddle.net/sim51/uzmxvg3u/embed/result,js/&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;edge-paralleledges&quot;&gt;Edge parallelEdges&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want parallel edges (ie. to have multiple relationship between two nodes), it&amp;#8217;s the plugin you must have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Import the needed script :&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;utils.js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sigma.canvas.edges.curvedArrow.js&lt;/code&gt;  &amp;amp; &lt;code&gt;sigma.canvas.edgehovers.curvedArrow.js&lt;/code&gt; if you have a directed graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sigma.canvas.edgehovers.curve.js&lt;/code&gt; &amp;amp; &lt;code&gt;sigma.canvas.edges.curve.js&lt;/code&gt;  if you want the an undirected graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sigma.canvas.edges.labels.curve.js&lt;/code&gt;  if you have enabled label on edges&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a property &lt;code&gt;count&lt;/code&gt; that represent the index of the edge in the set of parallel edges. Inversely proportional to the amplitude of the vertex of the edge curve.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script async src=&quot;https://jsfiddle.net/sim51/5vL3e72e/embed/result,js/&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;relative-size&quot;&gt;Relative size&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin is really useful when you want to see which node is most connected.
The size of the node depends of its degree, ie. its number of in-going &amp;amp; outgoing edges.&lt;/p&gt;
&lt;/div&gt;
&lt;script async src=&quot;https://jsfiddle.net/sim51/y7kwmc3g/embed/result,js/&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sigma-and-neo4j&quot;&gt;Sigma and Neo4j&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you know how to use Sigma, the next step is to build a graph visualisation from Neo4j.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do this there is two points :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to query Neo4j in your browser ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From a query result, how to build a sigma graph structure&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will not explain the first point, Michael has already done this part in this &lt;a href=&quot;https://medium.com/neo4j/hands-on-graph-data-visualization-bd1f055a492d&quot;&gt;excellent post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So let see the second one !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-a-graph-structure-from-a-neo4j-query&quot;&gt;Create a graph structure from a Neo4j query&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Result of a query is a collection of tuple, ie. composed of &lt;strong&gt;rows&lt;/strong&gt; where each row has some &lt;strong&gt;columns&lt;/strong&gt;.
Moreover, each &lt;em&gt;cell&lt;/em&gt; is typed, and to display a graph we only want &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;relationship&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create our data structure, we need to iterate over rows, then over columns and finnaly check the type.
If it&amp;#8217;s a node or relationship, we can add it to our sigma graph structure (if it&amp;#8217;s not already present).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And what about &lt;code&gt;path&lt;/code&gt;  ? A &lt;code&gt;path&lt;/code&gt; in Neo4j driver types, is an array of &lt;code&gt;segment&lt;/code&gt; where each segmet is composed of :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a starting node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a relationship&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an ending node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So if we have a path, we need also to iterate over it to add starting &amp;amp; ending node, plus the relationship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But wait, a Neo4j node (resp. relationship) is not a Sigma node (resp. relationship), so we also need to convert them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you code it, finally you should have something like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;let graph = { nodes:[], edges:[]} ;
this.driver.session().run(&quot;MATCH (n)-[r]-&amp;gt;(m) RETURN n,r,m LIMIT $limit&quot;, {limit:50}).then(
  (result) =&amp;gt; {
    // for each rows
    result.records.forEach( record =&amp;gt; {
      // for each column
      record.forEach( ( value, key ) =&amp;gt; {
        // if it's a node
        if ( value &amp;amp;&amp;amp; value.hasOwnProperty( 'labels' ) ) {
          graph.nodes.push(convertionToSigmaNode(value));
        }
        // if it's an edge
        if ( value &amp;amp;&amp;amp; value.hasOwnProperty( 'type' ) ) {
          graph.edges.push(convertionToSigmaEdge(value));
        }
        // if it's a path
        if ( value &amp;amp;&amp;amp; value.hasOwnProperty( 'segments' ) ) {
          value.segments.forEach( ( seg ) =&amp;gt; {
            // add starting &amp;amp; ending nodes + relationship
            graph.nodes.push(convertionToSigmaNode(seg.start));
            graph.nodes.push(convertionToSigmaNode(seg.end));
            graph.edges.push(convertionToSigmaEdge(seg.rel));
          });
        }
      });
    })
  })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here we go, you have everything to display your graph from a Cypher query with SigmaJS !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a little borring, no ? All this code just to display a graph&amp;#8230;&amp;#8203;
And what if I tell you that I have already made the work for you  ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-sigma-neosig&quot;&gt;Neo4j + Sigma = NeoSig&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid you the complexity of doing all the above work, I have created a library for that : &lt;strong&gt;NeoSig&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use it, you need to import the library + the Neo4j driver :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/neo4j-driver@1.6.0&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/neosig@1.2.2/docs/neosig-1.2.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The library embed SigmaJS (with some customs code) but not the Neo4j driver.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can call the function &lt;code&gt;Neo4jGraph(neo4jConfig, neo4jStyle, query, queryParams)&lt;/code&gt;, it returns a &lt;em&gt;promise&lt;/em&gt; with the sigma graph object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;Neo4jGraph(neo4jConfig, neo4jStyle, 'MATCH (n)-[r]-&amp;gt;(m) RETURN n,r,m LIMIT $limit', {limit:20}).then( function(graph) {
  s.graph.read(graph);
  // enable drag'n'drop
  sigma.plugins.dragNodes(s, s.renderers[0]);
  // start layout
  s.startForceAtlas2();
  setTimeout(() =&amp;gt; { s.stopForceAtlas2() }, Math.log(graph.nodes.length*graph.edges.length)*1000);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where &lt;code&gt;neo4jConfig&lt;/code&gt; is an object with :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const neoConfig = {
  url:'bolt://localhost:7867',
  user: 'neo4j',
  password: 'letmein',
  driver : {
    // all the driver configuration (optional)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And &lt;code&gt;neo4jStyle&lt;/code&gt; is :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const neoStyle = {
  labels: { // Map of label
    Person : {
      label: 'name', // The node's property to display as label
      color: '#654321', // Color of the node
      size: 10, // Size of the node
      icon: { // icon object
        name: 'f007', // Fontawesome unicode
        color: '#FFF', // Color of the font
        scale: 1.0 // Scale ratio
      }
    },
    Movie : {
      label: 'title',
      color: '#123456',
      size: 10,
      icon: {
        name: 'f008',
        color: '#FFF',
        scale: 1.0
      }
    }
  },
  edges: { // Map of edges
    ACTED_IN: { // Name of the relationship type
      label: 'roles',
      //color: '#202020',
      // size: 2
    }
  }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
By default, a node is black, with a size of 5, and the label is its Neo4j&amp;#8217;ID ; a relationship is black with a size of 1, and the label is its Neo4j type.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the final result is :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/sigmajs/neosig.png&quot; alt=&quot;neosig&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the code here :&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://jsfiddle.net/sim51/ep6g95st/embed/js/&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now have fun !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;A big thanks to &lt;a href=&quot;https://github.com/jacomyal&quot;&gt;Jacomyal&lt;/a&gt;, &lt;a href=&quot;https://github.com/yomguithereal&quot;&gt;Yomguithereal&lt;/a&gt; and  &lt;a href=&quot;https://github.com/astik&quot;&gt;Astik&lt;/a&gt; for the help !&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 25 Apr 2018 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2018/04/25/graph-viz-with-sigmajs.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2018/04/25/graph-viz-with-sigmajs.html</guid>
        
        <category>sigma, graph, visualisation, dataviz</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Connect Neo4j to a LDAP</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#goals&quot;&gt;Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#setup-an-openldap-server&quot;&gt;Setup an Openldap server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-configuration&quot;&gt;Neo4j configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#how-it-works&quot;&gt;How it works ?&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#authentication&quot;&gt;authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#authorization&quot;&gt;Authorization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#good-to-know&quot;&gt;Good to know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this tutorial you will see how to connect Neo4j to a LDAP server for authentication and authorization (only available with the Enterprise Edition).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setup-an-openldap-server&quot;&gt;Setup an Openldap server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to have a LDAP server with some data.
For this purpose, I will use the following docker image : &lt;a href=&quot;https://github.com/osixia/docker-openldap&quot; class=&quot;bare&quot;&gt;https://github.com/osixia/docker-openldap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default the domain is &lt;code&gt;dc=example,dc=org&lt;/code&gt; and the admin is &lt;code&gt;cn=admin,dc=example,dc=org&lt;/code&gt; with the password &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can pass an argument to docker to add a &lt;strong&gt;ldif&lt;/strong&gt; folder for initiate the ldap server with some data at the startup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the ldif file that I use :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ldif&quot; data-lang=&quot;ldif&quot;&gt;dn: ou=users,dc=example,dc=org
objectClass: organizationalUnit
objectClass: top
ou: users

dn: ou=groups,dc=example,dc=org
objectClass: organizationalUnit
objectClass: top
ou: groups


dn: cn=reader,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: reader
member:uid=reader,ou=users,dc=example,dc=org

dn: cn=publisher,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: publisher
member:uid=publisher,ou=users,dc=example,dc=org

dn: cn=architect,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: architect
member:uid=architect,ou=users,dc=example,dc=org

dn: cn=admin,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: admin
member:uid=admin,ou=users,dc=example,dc=org

dn: uid=reader,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Reader User
givenName: Reader
sn: reader
uid: reader
mail: reader@example.com
ou: users
userpassword: test
memberOf: cn=reader,ou=groups,dc=example,dc=org

dn: uid=publisher,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Publisher User
givenName: Publisher
sn: publisher
uid: publisher
mail: publisher@example.com
ou: users
userpassword: test
memberOf: cn=publisher,ou=groups,dc=example,dc=org

dn: uid=architect,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Architect User
givenName: Architect
sn: architect
uid: architect
mail: architect@example.com
ou: users
userpassword: test
memberOf: cn=architect,ou=groups,dc=example,dc=org

dn: uid=admin,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Admin User
givenName: Architect
sn: admin
uid: admin
mail: admin@example.com
ou: users
userpassword: test
memberOf: cn=admin,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, it only defines :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an organization unit for &lt;strong&gt;groups&lt;/strong&gt; : &lt;code&gt;ou=groups,dc=example,dc=org&lt;/code&gt;, with the following groups&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;group &lt;strong&gt;admin&lt;/strong&gt; &lt;code&gt;cn=admin,ou=groupss,dc=example,dc=org&lt;/code&gt; with the &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group &lt;strong&gt;architect&lt;/strong&gt; &lt;code&gt;cn=architect,ou=groups,dc=example,dc=org&lt;/code&gt; with the &lt;code&gt;architect&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group &lt;strong&gt;publisher&lt;/strong&gt; &lt;code&gt;cn=publisher,ou=groups,dc=example,dc=org&lt;/code&gt; with the &lt;code&gt;publisher&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group &lt;strong&gt;reader&lt;/strong&gt; &lt;code&gt;cn=reader,ou=groups,dc=example,dc=org&lt;/code&gt; with the &lt;code&gt;reader&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an organization unit for &lt;strong&gt;users&lt;/strong&gt; : &lt;code&gt;ou=users,dc=example,dc=org&lt;/code&gt;, with the following users&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;user &lt;strong&gt;admin&lt;/strong&gt; &lt;code&gt;uid=admin,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user &lt;strong&gt;architect&lt;/strong&gt; &lt;code&gt;uid=architect,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user &lt;strong&gt;publisher&lt;/strong&gt; &lt;code&gt;uid=publisher,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user &lt;strong&gt;reader&lt;/strong&gt; &lt;code&gt;uid=reader,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;INFO: users are must be linked to groups via the &lt;code&gt;memberOf&lt;/code&gt; attribut&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, I have stored this ldif file in this folder &lt;code&gt;/home/bsimard/ldif&lt;/code&gt;, so the command to start the docker image is the following :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run \
   --volume /home/bsimard/ldif/:/container/service/slapd/assets/config/bootstrap/ldif/custom \
   osixia/openldap:1.1.10 \
   --copy-service \
   --loglevel debug&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;neo4j-configuration&quot;&gt;Neo4j configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we have to configure Neo4j to use the LDAP.
For this, edit the &lt;code&gt;NEO4J_HOME/conf/neo4j.conf&lt;/code&gt; and put those properties :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;#********************************************************************
# Security Configuration
#********************************************************************

# The authentication and authorization provider that contains both users and roles.
# This can be one of the built-in `native` or `ldap` auth providers,
# or it can be an externally provided plugin, with a custom name prefixed by `plugin`,
# i.e. `plugin-&amp;lt;AUTH_PROVIDER_NAME&amp;gt;`.
dbms.security.auth_provider=ldap

# The time to live (TTL) for cached authentication and authorization info when using
# external auth providers (LDAP or plugin). Setting the TTL to 0 will
# disable auth caching.
#dbms.security.auth_cache_ttl=10m

# The maximum capacity for authentication and authorization caches (respectively).
#dbms.security.auth_cache_max_capacity=10000

# Set to log successful authentication events to the security log.
# If this is set to `false` only failed authentication events will be logged, which
# could be useful if you find that the successful events spam the logs too much,
# and you do not require full auditing capability.
#dbms.security.log_successful_authentication=true

#================================================
# LDAP Auth Provider Configuration
#================================================

# URL of LDAP server to use for authentication and authorization.
# The format of the setting is `&amp;lt;protocol&amp;gt;://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;`, where hostname is the only required field.
# The supported values for protocol are `ldap` (default) and `ldaps`.
# The default port for `ldap` is 389 and for `ldaps` 636.
# For example: `ldaps://ldap.example.com:10389`.
#
# NOTE: You may want to consider using STARTTLS (`dbms.security.ldap.use_starttls`) instead of LDAPS
# for secure connections, in which case the correct protocol is `ldap`.
dbms.security.ldap.host=172.17.0.2

# Use secure communication with the LDAP server using opportunistic TLS.
# First an initial insecure connection will be made with the LDAP server, and then a STARTTLS command
# will be issued to negotiate an upgrade of the connection to TLS before initiating authentication.
#dbms.security.ldap.use_starttls=false

# The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.
# `follow` automatically follows any referrals
# `ignore` ignores any referrals
# `throw` throws an exception, which will lead to authentication failure
#dbms.security.ldap.referral=follow

# The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be
# established within the given time the attempt is aborted.
# A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.
#dbms.security.ldap.connection_timeout=30s

# The timeout for an LDAP read request (i.e. search). If the LDAP server does not respond within
# the given time the request will be aborted. A value of 0 means wait for a response indefinitely.
#dbms.security.ldap.read_timeout=30s

#----------------------------------
# LDAP Authentication Configuration
#----------------------------------

# LDAP authentication mechanism. This is one of `simple` or a SASL mechanism supported by JNDI,
# for example `DIGEST-MD5`. `simple` is basic username
# and password authentication and SASL is used for more advanced mechanisms. See RFC 2251 LDAPv3
# documentation for more details.
dbms.security.ldap.authentication.mechanism=simple

# LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is
# an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that
# conforms with the LDAP directory's schema from the user principal that is submitted with the
# authentication token when logging in.
# The special token {0} is a placeholder where the user principal will be substituted into the DN string.
dbms.security.ldap.authentication.user_dn_template=uid={0},ou=users,dc=example,dc=org

# Determines if the result of authentication via the LDAP server should be cached or not.
# Caching is used to limit the number of LDAP requests that have to be made over the network
# for users that have already been authenticated successfully. A user can be authenticated against
# an existing cache entry (instead of via an LDAP server) as long as it is alive
# (see `dbms.security.auth_cache_ttl`).
# An important consequence of setting this to `true` is that
# Neo4j then needs to cache a hashed version of the credentials in order to perform credentials
# matching. This hashing is done using a cryptographic hash function together with a random salt.
# Preferably a conscious decision should be made if this method is considered acceptable by
# the security standards of the organization in which this Neo4j instance is deployed.
dbms.security.ldap.authentication.cache_enabled=false

#----------------------------------
# LDAP Authorization Configuration
#----------------------------------
# Authorization is performed by searching the directory for the groups that
# the user is a member of, and then map those groups to Neo4j roles.

# Perform LDAP search for authorization info using a system account instead of the user's own account.
#
# If this is set to `false` (default), the search for group membership will be performed
# directly after authentication using the LDAP context bound with the user's own account.
# The mapped roles will be cached for the duration of `dbms.security.auth_cache_ttl`,
# and then expire, requiring re-authentication. To avoid frequently having to re-authenticate
# sessions you may want to set a relatively long auth cache expiration time together with this option.
# NOTE: This option will only work if the users are permitted to search for their
# own group membership attributes in the directory.
#
# If this is set to `true`, the search will be performed using a special system account user
# with read access to all the users in the directory.
# You need to specify the username and password using the settings
# `dbms.security.ldap.authorization.system_username` and
# `dbms.security.ldap.authorization.system_password` with this option.
# Note that this account only needs read access to the relevant parts of the LDAP directory
# and does not need to have access rights to Neo4j, or any other systems.
dbms.security.ldap.authorization.use_system_account=true

# An LDAP system account username to use for authorization searches when
# `dbms.security.ldap.authorization.use_system_account` is `true`.
# Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username,
# so you may have to specify a full DN.
dbms.security.ldap.authorization.system_username=cn=admin,dc=example,dc=org

# An LDAP system account password to use for authorization searches when
# `dbms.security.ldap.authorization.use_system_account` is `true`.
dbms.security.ldap.authorization.system_password=admin

# The name of the base object or named context to search for user objects when LDAP authorization is enabled.
# A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.
dbms.security.ldap.authorization.user_search_base=ou=users,dc=example,dc=org

# The LDAP search filter to search for a user principal when LDAP authorization is
# enabled. The filter should contain the placeholder token {0} which will be substituted for the
# user principal.
dbms.security.ldap.authorization.user_search_filter=(&amp;amp;(objectClass=*)(uid={0}))

# A list of attribute names on a user object that contains groups to be used for mapping to roles
# when LDAP authorization is enabled.
dbms.security.ldap.authorization.group_membership_attributes=memberOf

# An authorization mapping from LDAP group names to Neo4j role names.
# The map should be formatted as a semicolon separated list of key-value pairs, where the
# key is the LDAP group name and the value is a comma separated list of corresponding role names.
# For example: group1=role1;group2=role2;group3=role3,role4,role5
#
# You could also use whitespaces and quotes around group names to make this mapping more readable,
# for example: dbms.security.ldap.authorization.group_to_role_mapping=\
#          &quot;cn=Neo4j Read Only,cn=users,dc=example,dc=com&quot;      = reader;    \
#          &quot;cn=Neo4j Read-Write,cn=users,dc=example,dc=com&quot;     = publisher; \
#          &quot;cn=Neo4j Schema Manager,cn=users,dc=example,dc=com&quot; = architect; \
#          &quot;cn=Neo4j Administrator,cn=users,dc=example,dc=com&quot;  = admin
dbms.security.ldap.authorization.group_to_role_mapping=\
          &quot;cn=reader,ou=groups,dc=example,dc=org&quot;  = reader; \
          &quot;cn=publisher,ou=groups,dc=example,dc=org&quot;  = publisher; \
          &quot;cn=architect,ou=groups,dc=example,dc=org&quot;  = architect; \
          &quot;cn=admin,ou=groups,dc=example,dc=org&quot;  = admin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can restart Neo4j, and open the Neo4j browser (&lt;a href=&quot;http://localhost:7474&quot; class=&quot;bare&quot;&gt;http://localhost:7474&lt;/a&gt;) to test the connection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it works ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is two steps : authentication and authorization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;authentication&quot;&gt;authentication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The authentication is made by a direct bind of the user with the &lt;strong&gt;DN&lt;/strong&gt; defined like this : Neo4j replace the user login (ie .&lt;code&gt;{0}&lt;/code&gt;) in the configuration key &lt;strong&gt;dbms.security.ldap.authentication.user_dn_template&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example, if you try to connect with the user &lt;code&gt;admin&lt;/code&gt;, Neo4j will do a bind with &lt;code&gt;uid=admin,ou=Users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;authorization&quot;&gt;Authorization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now Neo4j knows that the user is valid, so it looks up for the user&amp;#8217;s groups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this, it needs a &lt;strong&gt;system  account&lt;/strong&gt; to searh the authorizations. To do it, it performs :
  * the ldap query configure by &lt;strong&gt;dbms.security.ldap.authorization.user_search_filter&lt;/strong&gt; by replacing the &lt;code&gt;{0}&lt;/code&gt; with the user&amp;#8217;s login : &lt;code&gt;(&amp;amp;(objectClass=*)(uid={0}))&lt;/code&gt;
  * inside the DN configure by &lt;strong&gt;dbms.security.ldap.authorization.user_search_base&lt;/strong&gt; : &lt;code&gt;ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once it has found the correspondig user, it will take the attribute configure by &lt;strong&gt;dbms.security.ldap.authorization.group_membership_attributes&lt;/strong&gt; (so &lt;code&gt;memberOf&lt;/code&gt; in our example) to have the list of all the user&amp;#8217;s group.
Finally, it can makes the &lt;strong&gt;role&lt;/strong&gt; mapping as defined in &lt;strong&gt;dbms.security.ldap.authorization.group_to_role_mapping&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;good-to-know&quot;&gt;Good to know&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The LDAP connector is only available into the &lt;strong&gt;Enterprise Edition&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration is simple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LDAP groups &lt;strong&gt;must be&lt;/strong&gt; linked into users DN (via an attribut like &lt;strong&gt;memberOf&lt;/strong&gt; in our case)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In this example we have used a &lt;strong&gt;system account&lt;/strong&gt; but it&amp;#8217;s not necessary if users have the right to &lt;code&gt;BIND&lt;/code&gt; &amp;amp; &lt;code&gt;SEARCH&lt;/code&gt; themself&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 13 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://www.bsimard.com/2017/11/13/neo4j-ldap.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2017/11/13/neo4j-ldap.html</guid>
        
        <category>neo4j, ldap connection, authentication, authorization</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Import JCDecaux dataset into Neo4j</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#goals&quot;&gt;Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jcdecaux-model&quot;&gt;JCDecaux model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#imports&quot;&gt;Imports&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#apoc&quot;&gt;APOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#constraints&quot;&gt;Constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#importing-all-contracts&quot;&gt;Importing all contracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#importing-station-with-their-state&quot;&gt;Importing station with their state&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#some-cool-stuff&quot;&gt;Some cool stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this post, we will use Neo4j and JCDecaux opendata API, to find the % nearest stations from my position, with a free bike.
I will show you how to design your graph, to load the dataset from the JSON API, and make some queries. As a bonus I have also build a simple javascript application to display the result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jcdecaux-model&quot;&gt;JCDecaux model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JCDecaux provide an API to get all the information about their bicycle services. All is documentated here : &lt;a href=&quot;https://developer.jcdecaux.com&quot; class=&quot;bare&quot;&gt;https://developer.jcdecaux.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;INFO: you need to create an API key to use the API. On my examples you should replace the &lt;code&gt;@JCD_TOKEN_API@&lt;/code&gt; by your own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By reading the &lt;a href=&quot;https://developer.jcdecaux.com/#/opendata/vls?page=dynamic&quot;&gt;real-time API documentation&lt;/a&gt;, we can compute that JCD is using the following schema :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-eb6c5cecc9b1438965322d064c0c4350.png&quot; alt=&quot;diag eb6c5cecc9b1438965322d064c0c4350&quot; width=&quot;728&quot; height=&quot;273&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we have two entities, related together : it&amp;#8217;s a graph ! But can we do a better graph modelisation ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you look at the &lt;code&gt;Contract&lt;/code&gt; entity, you can see :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a dependency to a country&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a list of cities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So let&amp;#8217;s explode this entity like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-b317109bf90f015fb06b4866a5533cc1.png&quot; alt=&quot;diag b317109bf90f015fb06b4866a5533cc1&quot; width=&quot;819&quot; height=&quot;93&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And what can we do about the &lt;code&gt;Station&lt;/code&gt; entity ? It&amp;#8217;s easy we can split it into two parts :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The station (static data)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The state of the station (ie. ephemeral data)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-f3a47245d234f526a6116c10479f97e6.png&quot; alt=&quot;diag f3a47245d234f526a6116c10479f97e6&quot; width=&quot;589&quot; height=&quot;173&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And what if I want to keep the state history ?
So let&amp;#8217;s create a chain of &lt;code&gt;State&lt;/code&gt; nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-6ffe1f11d0d54893b023927cfab8c6a6.png&quot; alt=&quot;diag 6ffe1f11d0d54893b023927cfab8c6a6&quot; width=&quot;589&quot; height=&quot;207&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have chosen this modeling, because my main goal is to get the last updated state, and with this one, I just have to traverse one relationship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the final schema looks like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-74331910fff57af03e80c64bc790e020.png&quot; alt=&quot;diag 74331910fff57af03e80c64bc790e020&quot; width=&quot;1279&quot; height=&quot;259&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our model, let see how to load the data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;imports&quot;&gt;Imports&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apoc&quot;&gt;APOC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before to start, you need to install &lt;a href=&quot;https://neo4j-contrib.github.io/neo4j-apoc-procedures&quot;&gt;APOC&lt;/a&gt;. APOC is a collection of very usefull procedure for Neo4j.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This how to install it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the jar here : &lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download&quot; class=&quot;bare&quot;&gt;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put it into the neo4j &lt;code&gt;plugin&lt;/code&gt; directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart your server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we have to declare some constraints on our model, with all the unique keys :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;// Contract name is unique
CREATE CONSTRAINT ON (n:Contract) ASSERT n.name IS UNIQUE;

// Country code is unique
CREATE CONSTRAINT ON (n:Country) ASSERT n.code IS UNIQUE;

// Station ID is a composition of the contract's name and the station id.
// Because the number field into the Station entity is only unique inside a contract
CREATE CONSTRAINT ON (n:Station) ASSERT n.id IS UNIQUE;

// State id is a composition of the station id plus the last_update timestamp
CREATE CONSTRAINT ON (n:State) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can note here, that I haven&amp;#8217;t create a constraint on cities. This is just because two countries can have a city with the same name.
But we can create an index on it if we want to speed up our queries that are based on this field&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE INDEX ON :City(name);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;importing-all-contracts&quot;&gt;Importing all contracts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will import all contracts of JCDecaux. To do this, there is an endpoint : &lt;code&gt;&lt;a href=&quot;https://api.jcdecaux.com/vls/v1/contracts&quot; class=&quot;bare&quot;&gt;https://api.jcdecaux.com/vls/v1/contracts&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH '@JCD_TOKEN_API@' AS key
CALL apoc.load.json('https://api.jcdecaux.com/vls/v1/contracts?apiKey=' + key) YIELD value as row
    MERGE (contract:Contract { name: row.name, commercial_name:row.commercial_name })
    MERGE (country:Country { code: row.country_code })
    WITH row, contract, country
      UNWIND row.cities AS cityName
          MERGE (country)-[:HAS_CITY]-&amp;gt;(city:City { name: cityName })
          MERGE (contract)-[:FOR_CITY]-&amp;gt;(city)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;importing-station-with-their-state&quot;&gt;Importing station with their state&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we are going to create stations with their data, for all contract, with the help of this endpoint : &lt;code&gt;&lt;a href=&quot;https://api.jcdecaux.com/vls/v1/stations?contract=@contract_name@&quot; class=&quot;bare&quot;&gt;https://api.jcdecaux.com/vls/v1/stations?contract=@contract_name@&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.periodic.iterate(
    &quot;MATCH (c:Contract) RETURN c&quot;,
    &quot;WITH '@JCD_TOKEN_API@' AS key , {c} AS contract
        CALL apoc.load.json('https://api.jcdecaux.com/vls/v1/stations?contract=' + contract.name + '&amp;amp;apiKey=' + key) YIELD value as row

            // we can find the same station number on two contracts, so the unique id is a compisition of the id and the contract
            MERGE (contract)-[:HAS_STATION]-&amp;gt;(station:Station {id: row.contract_name + '_' + row.number})
                ON CREATE SET
                    station.number = row.number,
                    station.name = row.name,
                    station.address = row.address,
                    station.lat = row.position.lat,
                    station.lng = row.position.lng,
                    station.banking = row.banking,
                    station.bonus = row.bonus

            // to have a unique id, I'm using a composition of the station id and the last_update timetsamp
            MERGE (state:State {id: station.id + '_' + row.last_update})
                ON CREATE SET
                    state.status = row.status,
                    state.available_bikes = row.available_bikes,
                    state.bike_stands = row.bike_stands,
                    state.available_bike_stands = row.available_bike_stands

            WITH station, state
                MERGE (station)-[:LAST_STATE]-&amp;gt;(state)

                // Here we remove the previous `LAST_STATE` rel if it exists, and we create the chain
                WITH station, state
                    MATCH (old:State)&amp;lt;-[r:LAST_STATE]-(station)-[:LAST_STATE]-&amp;gt;(state)
                    WHERE NOT id(old) =id(state)
                    WITH old, r, state
                    CREATE (state)-[:PREVIOUS]-&amp;gt;(old)
                    DELETE r&quot;,
    {batchSize:1,parallel:true}) YIELD batches, total, errorMessages&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First instruction is &lt;code&gt;apoc.periodic.iterate&lt;/code&gt;. It&amp;#8217;s a APOC procedure that takes 3 parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A cypher query that give a first collection of results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An other cypher query that will be applied on each result from the first one&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some configurations, here &lt;code&gt;{batchSize:1,parallel:true}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically, it&amp;#8217;s the same as a &lt;code&gt;WITH&lt;/code&gt; (ie. to iterate over the result of a query), with the ability to create some batches (based on the first query), and optionally to parallelize them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So here, I&amp;#8217;m just creating one job per &lt;code&gt;Contract&lt;/code&gt;, to create all the corresponding &lt;code&gt;Station&lt;/code&gt; with theirs &lt;code&gt;State&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can replay this script every 5 minutes, to update the state of each station.
To do this you can create a &lt;code&gt;cron&lt;/code&gt; task, or you also can use the &lt;code&gt;apoc.periodic.repeat&lt;/code&gt; procedure (Job are not persisted, so you will have to re-create it after each restart of neo4j).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end you should have a graph like this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-bicloo/graph-example.png&quot; alt=&quot;graph example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-cool-stuff&quot;&gt;Some cool stuff&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have the data, we can ask to the database, what is the nearest station from me with an available bike :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH point({latitude: 56.7, longitude: 12.6}) as my_position
MATCH (station:Station)-[:LAST_STATE]-&amp;gt;(state:State)
WHERE state.status = &quot;OPEN&quot; AND state.available_bikes &amp;gt; 0
RETURN station, distance(point({latitude: station.lat, longitude: station.lng}), poi)  AS distance
ORDER BY distance
LIMIT 5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see I&amp;#8217;m using two new functions of Neo4j 3.1 :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;point( { latitude: XXX, longitude: XXX} ) :&lt;/strong&gt; allow you to create a geospatial point in WGS-83 projection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;distance( point, point) :&lt;/strong&gt; will returned the geodesic distance between the two points.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can have a better performances, if we create those two indexes :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE INDEX ON :State(available_bikes);
CREATE INDEX ON :State(status);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see the differences, just makes an explain before and after the creations of these indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And what if we display this result directly on a map ?
Nothing easier, Cypher can produce some JSON result, so let&amp;#8217;s change the result to produce a geojson :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH point({latitude: 56.7, longitude: 12.6}) as my_position
MATCH (station:Station)-[:LAST_STATE]-&amp;gt;(state:State)
WHERE state.status = &quot;OPEN&quot; AND state.available_bikes &amp;gt; 0
WITH station, state, distance(point({latitude: station.lat, longitude: station.lng}), my_position)  AS distance
ORDER BY  distance
LIMIT 5
WITH collect( {
        type: 'Feature',
        geometry: {
            type: 'Point',
            coordinates: [station.lng, station.lat]
        },
        properties : {
            name : station.name,
            distance: round(distance),
            address : station.address,
            free_bike: state.available_bikes,
            free_slot: state.available_bike_stands
        }
    }) AS features
RETURN  { type: 'FeatureCollection', features: features } AS geojson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see the result, you can copy/paste the json result on &lt;a href=&quot;http://geojson.io/&quot; class=&quot;bare&quot;&gt;http://geojson.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or you can also build a simple webpage to display the result with &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/sim51/409c769d0501956549221449ca845360&quot;&gt;like this one&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-bicloo/app-example.png&quot; alt=&quot;app example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0100</pubDate>
        <link>http://www.bsimard.com/2017/02/06/jcdecaux-cycle-neo4j.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2017/02/06/jcdecaux-cycle-neo4j.html</guid>
        
        <category>opendata, jcdecaux, neo4j</category>
        
        
      </item>
      
    
     
    
  </channel>
</rss>
