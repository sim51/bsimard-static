<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benoit Simard</title>
    <description>Site de Benoit Simard</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/fr/feed" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Sep 2018 13:24:21 +0200</pubDate>
    <lastBuildDate>Tue, 04 Sep 2018 13:24:21 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>

    
     
    
     
      <item>
        <title>[EN] How to use Kettle ot import data in Neo4j</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#kettle&quot;&gt;Kettle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-connector&quot;&gt;Neo4j connector&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#how-to-install-it&quot;&gt;How to install it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#components&quot;&gt;Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-cypher&quot;&gt;Neo4j Cypher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-output&quot;&gt;Neo4j Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Cet article est pour l&amp;#8217;instant que en Anglais. Si vous le souhaitez je peux le traduire en fran√ßais. Pour me motiver a le faire, laissez un commentaire !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kettle&quot;&gt;Kettle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kettle (or Pentaho Data Integration) is a well known ETL tool.
It is mature tool, simple to learn due to its GUI and open-source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kettle has a lot of plugins for all various data editors, and in this blog, I will show you how to use the Neo4j one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install kettle, it&amp;#8217;s pretty easy, you only need a JDK installed on your laptop, and then you have to follow those steps :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the last binaries at this location : &lt;a href=&quot;https://sourceforge.net/projects/pentaho/files/Data%20Integration/7.1/&quot; class=&quot;bare&quot;&gt;https://sourceforge.net/projects/pentaho/files/Data%20Integration/7.1/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;spoon.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;neo4j-connector&quot;&gt;Neo4j connector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some Neo4j connectors on the Kettle marketplace, but I strongly recommend you to use this one : &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output&quot; class=&quot;bare&quot;&gt;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output&lt;/a&gt;
It is performant, updated and maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is based on the official Neo4j Java Driver and have all the options you want to import your data, even on a cluster envrionment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to-install-it&quot;&gt;How to install it&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go to this page &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/releases/&quot; class=&quot;bare&quot;&gt;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/releases/&lt;/a&gt;, and get the latest release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip it into the &lt;code&gt;plugins&lt;/code&gt; folder of your Kettle installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart spoon&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin comes with 2+1 components :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Cypher :&lt;/strong&gt; a very useful component where you can write a cypher query, and it  can be used as an input or output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Output :&lt;/strong&gt; allow you to dynamically create (or update) nodes or relationships. It will generate the cypher query for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Graph Output:&lt;/strong&gt; By doing a graph mapping on the input fields, it will create/update the graph for you. But this component is in &lt;strong&gt;WIP&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-cypher&quot;&gt;Neo4j Cypher&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is (from my POV) the main component of this plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-cypher.png&quot; alt=&quot;kettle neo4j cypher&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing you need to do is to declare a &lt;strong&gt;Neo4j connection&lt;/strong&gt;.
If you have previously declare a Neo4j connection, you can use it, otherwise you need to create a new one by fulfill this form :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-connection.png&quot; alt=&quot;kettle neo4j connection&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the connection is using the &lt;strong&gt;Bolt&lt;/strong&gt; protocol, and you can also configure a cluster connection with a routing policy.
So it&amp;#8217;s really complete !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;batch size&lt;/code&gt; parameter allow you define the size of your transaction.
In my example, Every 500 rows, the component will commit the transaction.
This is really important to control the transaction size during an import process, to have the best performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your Cypher query can be totally dynamic.
Your query can come from an input field, you just have to enable the &lt;code&gt;Get Cypher from input field?&lt;/code&gt; and then specify the &lt;code&gt;Cypher input field&lt;/code&gt;.
Otherwise, you have to define the &lt;code&gt;Cypher&lt;/code&gt; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another good point is that the component allows you to use query parameters.
In my example, &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$year&lt;/code&gt; come from the input fields. As you can see, I have defined them into the &lt;code&gt;Parameters&lt;/code&gt; section, just below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And last point, If you want to use this component as an &lt;strong&gt;Input&lt;/strong&gt; one, you have to define the &lt;code&gt;Returns&lt;/code&gt; section with the name and type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, you have the hand on everything to create a performant import process.
The only lacks are in the UI (because I&amp;#8217;m a &lt;em&gt;lazy person&lt;/em&gt; ^^), where I would like to have :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a &lt;strong&gt;Get Fields&lt;/strong&gt; button on the &lt;code&gt;Parameters&lt;/code&gt; section, to fulfill it with all the input fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;strong&gt;compute return values&lt;/strong&gt; button to automatically fulfill the &lt;code&gt;Return&lt;/code&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-output&quot;&gt;Neo4j Output&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component allow you to create nodes and relationships without writting a cypher query, it will do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-from.png&quot; alt=&quot;kettle neo4j output from&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use it if you have Input fields define :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A node : you have to use only the &lt;code&gt;From Node&lt;/code&gt; tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two nodes plus the relationship between them : you have to define the &lt;code&gt;From node&lt;/code&gt;, &lt;code&gt;To node&lt;/code&gt; and &lt;code&gt;Relationship&lt;/code&gt; tabulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Same as before, you can define the &lt;code&gt;Batch size&lt;/code&gt;, and moreover you can also tell the component to create the Neo4j &lt;strong&gt;UNIQUE CONSTRAINTS&lt;/strong&gt; for you if you enable the &lt;code&gt;Create indexes?&lt;/code&gt; and specify the &lt;code&gt;Primary&lt;/code&gt; fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;example-for-nodes-and-relationship&quot;&gt;Example for nodes and relationship&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you have the following input fields : &lt;code&gt;label, id, name, parent_id, type&lt;/code&gt;
What you want to do is to create :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a node with the label &lt;code&gt;label&lt;/code&gt; and with the properties &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a relationship between the current node and its &lt;code&gt;parent_id&lt;/code&gt; with the type &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you need to fulfill the component by following those screenshots&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-from.png&quot; alt=&quot;From node tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-to.png&quot; alt=&quot;To node tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-rel.png&quot; alt=&quot;relationship tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
don&amp;#8217;t use the &lt;code&gt;CREATE&lt;/code&gt; mode for such a process, otherwise the &lt;code&gt;To&lt;/code&gt; node created each time.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component needs to have an input field for the label of nodes and for the relationship type.
If you don&amp;#8217;t have one because those value are static, you can use the &lt;code&gt;Add constants&lt;/code&gt; component that allows you to a constant field to the fields :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-constant.png&quot; alt=&quot;kettle constant&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the &lt;code&gt;MERGE&lt;/code&gt; mode, sometimes it is useful to define a default value for the &lt;em&gt;property&lt;/em&gt; on which do the merge.
To do it, you can use the &lt;code&gt;Value Mapper&lt;/code&gt; component like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-map.png&quot; alt=&quot;kettle map&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;in this example, if the &lt;code&gt;parent_id&lt;/code&gt; is not set, I replace it with the value &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 03 Sep 2018 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/09/03/fr-kettle-neo4j.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/03/fr-kettle-neo4j.html</guid>
        
        <category>Kettle, neo4j, ETL</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>[EN] Monitoring Neo4j with influxdb TICK stack</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#influxdb&quot;&gt;Influxdb&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#concept&quot;&gt;Concept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-tick-stack&quot;&gt;The TICK stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-architecture&quot;&gt;The architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-monitored-server&quot;&gt;The monitored server&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j&quot;&gt;Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#telegraf&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-monitoring-server&quot;&gt;The monitoring server&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#installation-2&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#influxdb-2&quot;&gt;InfluxDb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#telegraf-2&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chronograf&quot;&gt;Chronograf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kapacitor&quot;&gt;Kapacitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Cet article est pour l&amp;#8217;instant que en Anglais. Si vous le souhaitez je peux le traduire en fran√ßais. Pour me motiver a le faire, pouvez-vous laisser commentaire ?
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you push a service in production, it&amp;#8217;s really important to monitor its health status.
This will allow you to see if everything is OK,
to be alerted if something is going wrong but also in a case of a problem, to investigate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This rule should be applied for &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, and you will see how to do it with the &lt;strong&gt;TICK&lt;/strong&gt; stack (from &lt;a href=&quot;http://influxdata.com/&quot;&gt;influxDB&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But before to explain how to do it for &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, lets talk a little about Influxdb.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;influxdb&quot;&gt;Influxdb&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;concept&quot;&gt;Concept&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.influxdata.com&quot;&gt;Influx DB&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_series_database&quot;&gt;time series database&lt;/a&gt;.
It&amp;#8217;s made to store and query data in times, so it&amp;#8217;s the perfect tool to store metrics of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Influx has &lt;strong&gt;7 key concepts&lt;/strong&gt; : &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;measurement&lt;/code&gt;, &lt;code&gt;series&lt;/code&gt;, &lt;code&gt;retention policy&lt;/code&gt; and &lt;code&gt;continous queries&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s better to take an example to understand those concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you have a captor of temperature and humidity in your living room and an other one in your bedroom.
Each time you will read one, you will receive the data at a point of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it&amp;#8217;s the same kind of data, you will store them at the same location.
But you also want to be able to distinguish the data from the living room and the bedroom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end, you will have something like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: captor_temperature_humidity
----------------------------------
time                    temperature   humidity   room
2015-08-18T00:00:00Z    18.3          51.2       Living Room
2015-08-18T00:00:00Z    16.7          48.9       Bedroom
2015-08-18T00:01:00Z    18.5          51.1       Living Room
2015-08-18T00:01:02Z    16.9          49.0       Bedroom
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we have a &lt;strong&gt;measurement name&lt;/strong&gt; called &lt;code&gt;captor_temperature_humidity&lt;/code&gt; (you can think about it like a table in SQL) and each line is &lt;strong&gt;measurement&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Measurement&lt;/strong&gt; is composed of : &lt;code&gt;time&lt;/code&gt; , &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;humidity&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Temperature&lt;/strong&gt; and &lt;strong&gt;humidity&lt;/strong&gt; are measurement&amp;#8217;s &lt;strong&gt;fields&lt;/strong&gt;, and their values are the data you want to follow in time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On each measurement, I have added the &lt;strong&gt;room&lt;/strong&gt; to know where comes the measurement. It&amp;#8217;s a measurement&amp;#8217;s &lt;strong&gt;tag&lt;/strong&gt; (a metadata), and you can have multiple tags for a measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the time, you will have a very huge number of measurement, and usually you don&amp;#8217;t want to save them forover.
It&amp;#8217;s where the concept of &lt;strong&gt;retention policy&lt;/strong&gt; takes place,
you can configure the database  to delete measurements older than X (X is hours, days, weeks, &amp;#8230;&amp;#8203;, years).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE RETENTION POLICY one_week ON my_database DURATION 1w;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The default &lt;strong&gt;retention policy&lt;/strong&gt; is to keep the data forever.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, you can define some &lt;strong&gt;continious queries&lt;/strong&gt; to aggregate measurements over time. it will create a new (aggregated) measurement on the same database but with a new retention policy :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE CONTINUOUS QUERY &quot;my_continious_query&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(&quot;temperature&quot;) INTO &quot;my_database&quot;.&quot;one_week&quot;.&quot;average_temperature&quot; FROM &quot;captor_temperature_humidity&quot; GROUP BY time(1h)
END&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So with the help of &lt;strong&gt;retention policies&lt;/strong&gt; and &lt;strong&gt;continious queries&lt;/strong&gt;, you can downsampling the data with somehting similar as that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;keep the fine data for 1 week&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregate per minute for data between one week and one month&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregate per 10 minutes for data older than a month&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This give those retention policies :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE RETENTION POLICY &quot;1_week&quot; ON &quot;my_database&quot; DURATION 7d REPLICATION 1 DEFAULT
CREATE RETENTION POLICY &quot;1_month&quot; ON &quot;my_database&quot; DURATION 30d REPLICATION 1
CREATE RETENTION POLICY &quot;forever&quot; ON &quot;my_database&quot; DURATION INF REPLICATION 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And those continuous query :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;CREATE CONTINUOUS QUERY &quot;cq_1min_1month&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(*) INTO &quot;my_database&quot;.&quot;1_month&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(60s),*
END;
CREATE CONTINUOUS QUERY &quot;cq_1min_1month&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(*) INTO &quot;my_database&quot;.&quot;forever&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(600s),*
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-tick-stack&quot;&gt;The TICK stack&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TICK stack&lt;/strong&gt; is composed of :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Telegraf :&lt;/strong&gt; an agent that collects metrics, and write them in an influx database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Influx :&lt;/strong&gt; the time series database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chronograf :&lt;/strong&gt; a front-end applicatino that allow you to explore your data and to create dashboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kapacitor :&lt;/strong&gt; an alerting system&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a complete stack to collect, manage and exploit your time series data, so it&amp;#8217;s perfect for my goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;The architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally there is a server where all the metrics are a centralized, and where all the monitoring application are installed.
I will call it the &lt;strong&gt;Monitoring server&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This server will save all the metrics fron your system, and to do it there is two methods :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;push&lt;/strong&gt; : metrics are directly pushed to the monitoring server by using an agent on each server that you want to monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pull&lt;/strong&gt; : the monitoring system will query all your servers to collect the metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, the first solution is prefered, and it&amp;#8217;s the one that I will put in place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the architecture schema :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-f2e5f75f5280dc00917b791b23c08a79.png&quot; alt=&quot;diag f2e5f75f5280dc00917b791b23c08a79&quot; width=&quot;440&quot; height=&quot;216&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In red you have the monitoring server, and in grey the monitored server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
With this kind of architecture, Neo4j send metrics locally, so it&amp;#8217;s very fast.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-monitored-server&quot;&gt;The monitored server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j&quot;&gt;Neo4j&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In its &lt;strong&gt;Enterprise Edition&lt;/strong&gt;, Neo4j has a &lt;a href=&quot;https://neo4j.com/docs/operations-manual/current/monitoring/metrics/&quot;&gt;monitoring system&lt;/a&gt;.
In fact there is four ways to monitor it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JMX :&lt;/strong&gt; it&amp;#8217;s a standard java functionnality that allow you to retrive some metrics values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Graphite connector :&lt;/strong&gt; you just have to configure your Graphana server, and Neo4j will send its metrics regulary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prometheus connector :&lt;/strong&gt; same as for Graphite but for Prometheus time series database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSV file :&lt;/strong&gt;  Neo4j dumps all its metrics at a regular time interval&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Telegraf&lt;/strong&gt; is compatible with the Graphite protocol, so I will use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration is really simple, just edit your &lt;code&gt;neo4j.conf&lt;/code&gt; file and put at the end those lines :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;# Setting for enabling all supported metrics.
metrics.enabled=true
# Setting for enabling all Neo4j specific metrics.
metrics.neo4j.enabled=true
# Setting for exposing metrics about transactions; number of transactions started, committed, etc.
metrics.neo4j.tx.enabled=true
# Setting for exposing metrics about the Neo4j page cache; page faults, evictions, flushes and exceptions, etc.
metrics.neo4j.pagecache.enabled=true
# Setting for exposing metrics about approximately entities are in the database; nodes, relationships, properties, etc.
metrics.neo4j.counts.enabled=true
# Setting for exposing metrics about the network usage of the HA cluster component.
metrics.neo4j.network.enabled=true
# Enable the Graphite integration. Default is 'false'.
metrics.graphite.enabled=true
# The IP and port of the Graphite server on the format &amp;lt;hostname or IP address&amp;gt;:&amp;lt;port number&amp;gt;.
# The default port number for Graphite is 2003.
metrics.graphite.server=localhost:2003
# How often to send data. Default is 3 seconds.
metrics.graphite.interval=3s
# Prefix for Neo4j metrics on Graphite server.
metrics.prefix=MyHost&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like you see, I just :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enable the metrics feature and also each familly metric.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable the graphite integration, and configure its location, time interval and the prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You don&amp;#8217;t have to change anything, except the &lt;code&gt;metrics.prefix&lt;/code&gt;. This value will be used as the host identifier in metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;telegraf&quot;&gt;Telegraf&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many ways to install Telegraf on your system, and you can check directly on &lt;a href=&quot;https://docs.influxdata.com/telegraf/v1.6/introduction/installation/#installation&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My prefer OS is &lt;strong&gt;debian&lt;/strong&gt;, so I will show you how to do on it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add the influxdb repository key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add the repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;perfom an update&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install the package &lt;code&gt;telegraf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo &quot;deb https://repos.influxdata.com/debian jessie stable&quot; | tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install telegraf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All &lt;strong&gt;Telegraf&lt;/strong&gt;'s configuration is located in the file &lt;code&gt;/etc/telegraf/telegraf.conf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Firstly we need tell Telegraf to be able to act as a graphite server :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[inputs.socket_listener]]
  service_address = &quot;tcp://:2003&quot;
  separator = &quot;.&quot;
  data_format = &quot;graphite&quot;
  templates = [
    &quot;*.neo4j.*.* host.measurement.measurement.field* name=neo4j,vlan=testing&quot;,
    &quot;*.vm.*.* host.measurement.measurement.field* name=neo4j,vlan=testing&quot;
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think it&amp;#8217;s easy to understand, except for the &lt;code&gt;templates&lt;/code&gt; part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in graphite all metrics follow a schema like this one &lt;code&gt;MyHost.neo4j.bolt.messages_done 10&lt;/code&gt;.
So we need to tell &lt;strong&gt;Telegraf&lt;/strong&gt; how to parse it to find the field measurement, the value,  and tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The part &lt;code&gt;*.neo4j.*.*&lt;/code&gt; is a filter. If a line match this pattern, then it will parsed with &lt;code&gt;host.measurement.measurement.field*&lt;/code&gt;.
With the example &lt;code&gt;MyHost.neo4j.bolt.messages_done 10&lt;/code&gt;, we will have :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tags: &lt;code&gt;MyHost&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measurement: &lt;code&gt;neo4j.bolt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field: &lt;code&gt;messages_done&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value: &lt;code&gt;10&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, at the end of each template you can see this &lt;code&gt;name=neo4j,vlan=testing&lt;/code&gt;.
It&amp;#8217;s a list of static tags that will be added to each metric.
This can be really useful if you want to monitor multiple Neo4j server (like a cluster).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, now we have the metrics, but we need to push them to our centralized &lt;strong&gt;influx&lt;/strong&gt; database.
For this, you need to configure &lt;strong&gt;Telegraf&lt;/strong&gt; like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  urls = [&quot;http://10.0.0.12:8086&quot;]

  ## The target database for metrics; will be created as needed.
  database = &quot;telegraf&quot;

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.
  retention_policy = &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You just have to change the &lt;code&gt;urls&lt;/code&gt; property with yours (in my case &lt;code&gt;&lt;a href=&quot;http://10.0.0.12:8086&quot; class=&quot;bare&quot;&gt;http://10.0.0.12:8086&lt;/a&gt;&lt;/code&gt;), and optionnally the database name (by default it&amp;#8217;s &lt;code&gt;telegraf&lt;/code&gt;) and the rentention policy you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In the general section of the configuration, you can configure the batch size if you want.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-monitoring-server&quot;&gt;The monitoring server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation-2&quot;&gt;Installation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On this server we will install : InfluxDb, Chronograf, Kapacitor and Telegraf (to monitor the monitoring system ^^)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will follow the same process as explained on the installation of &lt;strong&gt;Telegraf&lt;/strong&gt; : via &lt;strong&gt;apt&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo &quot;deb https://repos.influxdata.com/debian jessie stable&quot; | tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install telegraf influxdb chronograf kapacitor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;influxdb-2&quot;&gt;InfluxDb&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I change nothing in the default configuration of &lt;strong&gt;Influxdb&lt;/strong&gt;,
The only thing I will do it&amp;#8217;s to create a database &lt;code&gt;telegraf&lt;/code&gt; with a custom retention policy that keep the data for 3 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this I will use the &lt;strong&gt;Influxdb&lt;/strong&gt; CLI,  &lt;code&gt;sudo influx&lt;/code&gt;, and typing those commands :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;CREATE DATABASE telegraf
USE telegraf
CREATE RETENTION POLICY &quot;3_month&quot; ON &quot;monitoring&quot; DURATION 90d REPLICATION 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to check, you can type &lt;code&gt;SHOW RETENTION POLICIES&lt;/code&gt; to display all RPs.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;telegraf-2&quot;&gt;Telegraf&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have installed &lt;strong&gt;Telegraf&lt;/strong&gt; just to monitor the monitoring server (CPU, network, disk, &amp;#8230;&amp;#8203;).
You just have to configure it to send all the data to the &lt;code&gt;telegraf&lt;/code&gt; (the default value).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  # default is localhost with the standard port of influx
  # urls = [&quot;http://10.0.0.12:8086&quot;]

  ## The target database for metrics; will be created as needed.
  database = &quot;telegraf&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;chronograf&quot;&gt;Chronograf&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Chronograf is listening on the port &lt;code&gt;8888&lt;/code&gt;.
So open your browser at &lt;a href=&quot;http://MONITORING_SERVER_IP:8888/&quot; class=&quot;bare&quot;&gt;http://MONITORING_SERVER_IP:8888/&lt;/a&gt; (change &lt;code&gt;MONITORING_SERVER_IP&lt;/code&gt; with the corresponding IP).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can take a look at the &lt;strong&gt;Host List&lt;/strong&gt;, you should see a list with two items : names of the monitored and monitoring server.
Click on one, and should see something like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/chronograf.png&quot; alt=&quot;chronograf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can create a new dashboard for Neo4j with the following widgets :&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 66.6668%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Query&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Thread Jetty&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;threads.jetty.all&quot;) AS &quot;mean_threads.jetty.all&quot;,
       mean(&quot;threads.jetty.idle&quot;) AS &quot;mean_threads.jetty.idle&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.server&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM memory&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stacked Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT pool.g1_survivor_space/1000000,
       pool.metaspace/1000000,
       pool.g1_eden_space/1000000,
       pool.g1_old_gen/1000000
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.memory&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM GC Time&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DIFFERENCE(&quot;time.g1_young_generation&quot;) AS &quot;mean_time.g1_young_generation&quot;,
       DIFFERENCE(&quot;time.g1_old_generation&quot;) AS &quot;mean_time.g1_old_generation&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.gc&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Transactions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DIFFERENCE(last(&quot;started&quot;)) AS &quot;mean_started&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.transaction&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(linear)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Page cache&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;hits&quot;) AS &quot;mean_hits&quot;,
       mean(&quot;page_faults&quot;) AS &quot;mean_page_faults&quot;,
       mean(&quot;flushes&quot;) AS &quot;mean_flushes&quot;,
       mean(&quot;evictions&quot;) AS &quot;mean_evictions&quot;,
       mean(&quot;eviction_exceptions&quot;) AS &quot;mean_eviction_exceptions&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.page_cache&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM Threads&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;total&quot;) AS &quot;mean_total&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.thread&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Nodes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT max(&quot;node&quot;) AS &quot;max_node&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of relationships&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;relationship&quot;) AS &quot;last_relationship&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Properties&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;property&quot;) AS &quot;last_property&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Relationship Types&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;relationship_type&quot;) AS &quot;last_relationship_type&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Opened Transactions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT started  - committed - rollbacks
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.transaction&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the result :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/neo-dashboard.png&quot; alt=&quot;neo dashboard&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kapacitor&quot;&gt;Kapacitor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kapacitor is the alerting systen of the stack.
You can create some rules for Kapacitor directly in Chronograf :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/kapacitor.png&quot; alt=&quot;kapacitor&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This alert sends a message on slack as soon as there less than 20% of free space on my disk :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You see it&amp;#8217;s really easy to monitor your infrastructure and Neo4j servers with the &lt;strong&gt;TICK&lt;/strong&gt; stack.
But there are some lacks :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is no percentile function in the query language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Telegraf doesn&amp;#8217;t have a JMX plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not possible to make a generic continious query that downsample the data with the same field name (you will have an aggregation prefix).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to make the same kind of article but this time with Promotheus and Graphite.
So if you are interested, please leave a comment, it will motivate me to write it :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 22 May 2018 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/05/22/fr-monitoring-neo4j-influxdb.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/22/fr-monitoring-neo4j-influxdb.html</guid>
        
        <category>monitoring, neo4j, influx, tick</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Importer une matrice d&amp;#8217;adjacence</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#le-fichier-csv&quot;&gt;Le fichier CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-processus&quot;&gt;Le processus&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#pr√©-requis-apoc&quot;&gt;Pr√©-requis: APOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-schema&quot;&gt;Le schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-script-d-import&quot;&gt;Le script d&amp;#8217;import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;objectif ici est de cr√©er un graphe aÃÄ partir d&amp;#8217;un fichier CSV correspondant a une &lt;a href=&quot;https://fr.wikipedia.org/wiki/Matrice_d&amp;#8217;adjacence&quot;&gt;matrice d&amp;#8217;adjacence&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-fichier-csv&quot;&gt;Le fichier CSV&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple de fichier CSV :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;1;1;0;0;1;0
1;0;1;0;1;0
0;1;0;1;0;0
0;0;1;0;1;1
1;1;0;1;0;0
1;0;0;1;0;0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque indice de ligne et de colonne correspond a un noeud du graph.
Si l&amp;#8217;intersection da la ligne &lt;code&gt;i&lt;/code&gt; avec la colonne &lt;code&gt;j&lt;/code&gt; vaut &lt;code&gt;1&lt;/code&gt;, cela signifie que le noeud &lt;code&gt;i&lt;/code&gt; et le noeud &lt;code&gt;j&lt;/code&gt; sont reli√©s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-processus&quot;&gt;Le processus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pr√©-requis-apoc&quot;&gt;Pr√©-requis: APOC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour r√©aliser le script d&amp;#8217;import, je vais utiliser certaines proc√©dures de la librairie &lt;code&gt;APOC&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici les √©tapes pour son installation :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;T√©l√©charger le JAR ici : &lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar&quot; class=&quot;bare&quot;&gt;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copier le JAR dans le r√©pertoire &lt;code&gt;NEO4j_HOME/plugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Editer le fichier de configuration de Neo4j &lt;code&gt;NEO4J_HOME/conf/neo4j.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajouter les propri√©t√©s suivantes :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;# To be able to execute APOC procedures
dbms.security.procedures.unrestricted=apoc.*
# To allow APOC procedure to import files
apoc.import.file.enabled=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Red√©marrer le serveur Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-schema&quot;&gt;Le schema&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le sch√©ma de la base est ici tout simple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;des noeuds avec le label &lt;code&gt;Node&lt;/code&gt;, qui posseÃÄdent un attribut &lt;code&gt;id&lt;/code&gt; de type &lt;code&gt;entier&lt;/code&gt; correspondant a leur indice dans la matrice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;les noeuds seront reli√©s entre eux par une relation de type &lt;code&gt;LINKED_TO&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi pour am√©liorer les performances de la base et assurer la coh√©rence des donn√©es, on va cr√©er une contrainte d&amp;#8217;unicit√© sur le champs &lt;code&gt;id&lt;/code&gt; des noeuds &lt;code&gt;Node&lt;/code&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE CONSTRAINT ON (n:Node) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-script-d-import&quot;&gt;Le script d&amp;#8217;import&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le script permettant d&amp;#8217;importer le graphe :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.load.csv('file:///home/bsimard/Applications/neo4j/current/import/matrice.csv',{}) YIELD lineNo AS lineNumber, list AS line

    MERGE (lineNode:Node { id:lineNumber})

    WITH lineNode, line
    UNWIND range(0,size(line)-1, 1) AS colNumber

    MERGE (colNode:Node { id:colNumber})
    WITH line, colNode, lineNode, colNumber

      CALL apoc.do.when(
        line[colNumber] = '1',
        'MERGE (lineNode)-[:LINKED_TO]-(colNode)',
        '',
        {lineNode:lineNode, colNode:colNode}
      ) YIELD value

      RETURN *&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;1&lt;/code&gt;, permet de lire le fichier CSV correspondant a la matrice d&amp;#8217;adjacence ligne par ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;3&lt;/code&gt; on cr√©e le noeud correspondant a la ligne en cours, si celui-ci n&amp;#8217;existe pas graÃÇce a l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La ligne &lt;code&gt;6&lt;/code&gt; permet d&amp;#8217;it√©rer sur les colonnes de la ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;8&lt;/code&gt; on cr√©e le noeud correspondant a la colonne en cours, si celui-ci n&amp;#8217;existe pas graÃÇce a l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la ligne &lt;code&gt;11&lt;/code&gt; a &lt;code&gt;16&lt;/code&gt;, on v√©rifie le contenu de la cellule &lt;code&gt;(lineNumber, colNumber)&lt;/code&gt;. Si celui-ci vaut &lt;code&gt;1&lt;/code&gt;, on cr√©e la relation entre les deux noeuds si celle-ci n&amp;#8217;existe pas d√©jaÃÄ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voilaÃÄ, la matrice d&amp;#8217;adjacence est charg√© dans Neo4j !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/images/matrice-adjacence/graph.png&quot; alt=&quot;graph&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 23 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2017/11/23/fr-import-matrice-adjacence.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/23/fr-import-matrice-adjacence.html</guid>
        
        <category>neo4j, import, apoc, matrice</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Connecter Neo4j aÃÄ un annuaire LDAP</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#objectif&quot;&gt;Objectif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#installation-d-un-serveur-openldap&quot;&gt;Installation d&amp;#8217;un serveur OpenLDAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-configuration-de-neo4j&quot;&gt;La configuration de Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#d√©tail-du-fonctionnement&quot;&gt;D√©tail du fonctionnement&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#l-authentification&quot;&gt;L&amp;#8217;authentification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-gestion-des-acceÃÄs&quot;&gt;La gestion des acceÃÄs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#en-bref&quot;&gt;En bref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;objectif&quot;&gt;Objectif&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous allez d√©couvrir comment connecter un annuaire LDAP aÃÄ Neo4j pour lui confier la gestion de l&amp;#8217;authentification et des acceÃÄs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation-d-un-serveur-openldap&quot;&gt;Installation d&amp;#8217;un serveur OpenLDAP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Au lieu d&amp;#8217;installer un serveur OpenLDAP sur ma machine, je vais utiliser Docker avec l&amp;#8217;image suivante : &lt;a href=&quot;https://github.com/osixia/docker-openldap&quot; class=&quot;bare&quot;&gt;https://github.com/osixia/docker-openldap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Celle-ci me permet de lancer un serveur OpenLDAP pr√©-configur√© ouÃÄ :
  * le domaine par d√©fault est  &lt;code&gt;dc=example,dc=org&lt;/code&gt;
  * l&amp;#8217;administrateur est &lt;code&gt;cn=admin,dc=example,dc=org&lt;/code&gt; avec le password &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus on peut lui passer en parameÃÄtre le chemin d&amp;#8217;acceÃÄs d&amp;#8217;un r√©pertoire contenant des fichiers LDIF, qui vont eÃÇtre √©x√©cut√©s aÃÄ son lancement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi, voici le fichier LDIF que j&amp;#8217;ai r√©alis√© pour cr√©er la structure de mon LDAP et importer les donn√©es au d√©marrage du serveur :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ldif&quot; data-lang=&quot;ldif&quot;&gt;dn: ou=users,dc=example,dc=org
objectClass: organizationalUnit
objectClass: top
ou: users

dn: ou=groups,dc=example,dc=org
objectClass: organizationalUnit
objectClass: top
ou: groups


dn: cn=reader,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: reader
member:uid=reader,ou=users,dc=example,dc=org

dn: cn=publisher,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: publisher
member:uid=publisher,ou=users,dc=example,dc=org

dn: cn=architect,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: architect
member:uid=architect,ou=users,dc=example,dc=org

dn: cn=admin,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: admin
member:uid=admin,ou=users,dc=example,dc=org

dn: uid=reader,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Reader User
givenName: Reader
sn: reader
uid: reader
mail: reader@example.com
ou: users
userpassword: test
memberOf: cn=reader,ou=groups,dc=example,dc=org

dn: uid=publisher,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Publisher User
givenName: Publisher
sn: publisher
uid: publisher
mail: publisher@example.com
ou: users
userpassword: test
memberOf: cn=publisher,ou=groups,dc=example,dc=org

dn: uid=architect,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Architect User
givenName: Architect
sn: architect
uid: architect
mail: architect@example.com
ou: users
userpassword: test
memberOf: cn=architect,ou=groups,dc=example,dc=org

dn: uid=admin,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Admin User
givenName: Architect
sn: admin
uid: admin
mail: admin@example.com
ou: users
userpassword: test
memberOf: cn=admin,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme vous pouvez le constater, j&amp;#8217;y d√©finis les √©l√©ments suivants :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;une &lt;em&gt;organization unit&lt;/em&gt;  &lt;strong&gt;groups&lt;/strong&gt; : &lt;code&gt;ou=groups,dc=example,dc=org&lt;/code&gt;, contenant la d√©finition des groupes suivants&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;admin&lt;/strong&gt; &lt;code&gt;cn=admin,ou=groupss,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;architect&lt;/strong&gt; &lt;code&gt;cn=architect,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;publisher&lt;/strong&gt; &lt;code&gt;cn=publisher,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;reader&lt;/strong&gt; &lt;code&gt;cn=reader,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;une &lt;em&gt;organization unit&lt;/em&gt; &lt;strong&gt;users&lt;/strong&gt; : &lt;code&gt;ou=users,dc=example,dc=org&lt;/code&gt;, contenant la d√©finition des utilisateurs suivants&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;admin&lt;/strong&gt; &lt;code&gt;uid=admin,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;architect&lt;/strong&gt; &lt;code&gt;uid=architect,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;publisher&lt;/strong&gt; &lt;code&gt;uid=publisher,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;reader&lt;/strong&gt; &lt;code&gt;uid=reader,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;INFO: les utilisateurs doivent eÃÇtre li√©s a leurs groupes via l&amp;#8217;attribut &lt;code&gt;memberOf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon cas, j&amp;#8217;ai sauvegard√© ce fichier dans le r√©pertoire &lt;code&gt;/home/bsimard/ldif&lt;/code&gt;,
ce qui donne la commande suivante pour d√©marrer le container docker :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run \
   --volume /home/bsimard/ldif/:/container/service/slapd/assets/config/bootstrap/ldif/custom \
   osixia/openldap:1.1.10 \
   --copy-service \
   --loglevel debug&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;la-configuration-de-neo4j&quot;&gt;La configuration de Neo4j&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La configuration de Neo4j est centralis√©e dans le fichier &lt;code&gt;NEO4J_HOME/conf/neo4j.conf&lt;/code&gt;.
Ainsi il suffit de l&amp;#8217;√©diter et d&amp;#8217;y ajouter les propri√©t√©s suivantes :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;#********************************************************************
# Security Configuration
#********************************************************************

# The authentication and authorization provider that contains both users and roles.
# This can be one of the built-in `native` or `ldap` auth providers,
# or it can be an externally provided plugin, with a custom name prefixed by `plugin`,
# i.e. `plugin-&amp;lt;AUTH_PROVIDER_NAME&amp;gt;`.
dbms.security.auth_provider=ldap

# The time to live (TTL) for cached authentication and authorization info when using
# external auth providers (LDAP or plugin). Setting the TTL to 0 will
# disable auth caching.
#dbms.security.auth_cache_ttl=10m

# The maximum capacity for authentication and authorization caches (respectively).
#dbms.security.auth_cache_max_capacity=10000

# Set to log successful authentication events to the security log.
# If this is set to `false` only failed authentication events will be logged, which
# could be useful if you find that the successful events spam the logs too much,
# and you do not require full auditing capability.
#dbms.security.log_successful_authentication=true

#================================================
# LDAP Auth Provider Configuration
#================================================

# URL of LDAP server to use for authentication and authorization.
# The format of the setting is `&amp;lt;protocol&amp;gt;://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;`, where hostname is the only required field.
# The supported values for protocol are `ldap` (default) and `ldaps`.
# The default port for `ldap` is 389 and for `ldaps` 636.
# For example: `ldaps://ldap.example.com:10389`.
#
# NOTE: You may want to consider using STARTTLS (`dbms.security.ldap.use_starttls`) instead of LDAPS
# for secure connections, in which case the correct protocol is `ldap`.
dbms.security.ldap.host=172.17.0.2

# Use secure communication with the LDAP server using opportunistic TLS.
# First an initial insecure connection will be made with the LDAP server, and then a STARTTLS command
# will be issued to negotiate an upgrade of the connection to TLS before initiating authentication.
#dbms.security.ldap.use_starttls=false

# The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.
# `follow` automatically follows any referrals
# `ignore` ignores any referrals
# `throw` throws an exception, which will lead to authentication failure
#dbms.security.ldap.referral=follow

# The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be
# established within the given time the attempt is aborted.
# A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.
#dbms.security.ldap.connection_timeout=30s

# The timeout for an LDAP read request (i.e. search). If the LDAP server does not respond within
# the given time the request will be aborted. A value of 0 means wait for a response indefinitely.
#dbms.security.ldap.read_timeout=30s

#----------------------------------
# LDAP Authentication Configuration
#----------------------------------

# LDAP authentication mechanism. This is one of `simple` or a SASL mechanism supported by JNDI,
# for example `DIGEST-MD5`. `simple` is basic username
# and password authentication and SASL is used for more advanced mechanisms. See RFC 2251 LDAPv3
# documentation for more details.
dbms.security.ldap.authentication.mechanism=simple

# LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is
# an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that
# conforms with the LDAP directory's schema from the user principal that is submitted with the
# authentication token when logging in.
# The special token {0} is a placeholder where the user principal will be substituted into the DN string.
dbms.security.ldap.authentication.user_dn_template=uid={0},ou=users,dc=example,dc=org

# Determines if the result of authentication via the LDAP server should be cached or not.
# Caching is used to limit the number of LDAP requests that have to be made over the network
# for users that have already been authenticated successfully. A user can be authenticated against
# an existing cache entry (instead of via an LDAP server) as long as it is alive
# (see `dbms.security.auth_cache_ttl`).
# An important consequence of setting this to `true` is that
# Neo4j then needs to cache a hashed version of the credentials in order to perform credentials
# matching. This hashing is done using a cryptographic hash function together with a random salt.
# Preferably a conscious decision should be made if this method is considered acceptable by
# the security standards of the organization in which this Neo4j instance is deployed.
dbms.security.ldap.authentication.cache_enabled=false

#----------------------------------
# LDAP Authorization Configuration
#----------------------------------
# Authorization is performed by searching the directory for the groups that
# the user is a member of, and then map those groups to Neo4j roles.

# Perform LDAP search for authorization info using a system account instead of the user's own account.
#
# If this is set to `false` (default), the search for group membership will be performed
# directly after authentication using the LDAP context bound with the user's own account.
# The mapped roles will be cached for the duration of `dbms.security.auth_cache_ttl`,
# and then expire, requiring re-authentication. To avoid frequently having to re-authenticate
# sessions you may want to set a relatively long auth cache expiration time together with this option.
# NOTE: This option will only work if the users are permitted to search for their
# own group membership attributes in the directory.
#
# If this is set to `true`, the search will be performed using a special system account user
# with read access to all the users in the directory.
# You need to specify the username and password using the settings
# `dbms.security.ldap.authorization.system_username` and
# `dbms.security.ldap.authorization.system_password` with this option.
# Note that this account only needs read access to the relevant parts of the LDAP directory
# and does not need to have access rights to Neo4j, or any other systems.
dbms.security.ldap.authorization.use_system_account=true

# An LDAP system account username to use for authorization searches when
# `dbms.security.ldap.authorization.use_system_account` is `true`.
# Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username,
# so you may have to specify a full DN.
dbms.security.ldap.authorization.system_username=cn=admin,dc=example,dc=org

# An LDAP system account password to use for authorization searches when
# `dbms.security.ldap.authorization.use_system_account` is `true`.
dbms.security.ldap.authorization.system_password=admin

# The name of the base object or named context to search for user objects when LDAP authorization is enabled.
# A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.
dbms.security.ldap.authorization.user_search_base=ou=users,dc=example,dc=org

# The LDAP search filter to search for a user principal when LDAP authorization is
# enabled. The filter should contain the placeholder token {0} which will be substituted for the
# user principal.
dbms.security.ldap.authorization.user_search_filter=(&amp;amp;(objectClass=*)(uid={0}))

# A list of attribute names on a user object that contains groups to be used for mapping to roles
# when LDAP authorization is enabled.
dbms.security.ldap.authorization.group_membership_attributes=memberOf

# An authorization mapping from LDAP group names to Neo4j role names.
# The map should be formatted as a semicolon separated list of key-value pairs, where the
# key is the LDAP group name and the value is a comma separated list of corresponding role names.
# For example: group1=role1;group2=role2;group3=role3,role4,role5
#
# You could also use whitespaces and quotes around group names to make this mapping more readable,
# for example: dbms.security.ldap.authorization.group_to_role_mapping=\
#          &quot;cn=Neo4j Read Only,cn=users,dc=example,dc=com&quot;      = reader;    \
#          &quot;cn=Neo4j Read-Write,cn=users,dc=example,dc=com&quot;     = publisher; \
#          &quot;cn=Neo4j Schema Manager,cn=users,dc=example,dc=com&quot; = architect; \
#          &quot;cn=Neo4j Administrator,cn=users,dc=example,dc=com&quot;  = admin
dbms.security.ldap.authorization.group_to_role_mapping=\
          &quot;cn=reader,ou=groups,dc=example,dc=org&quot;  = reader; \
          &quot;cn=publisher,ou=groups,dc=example,dc=org&quot;  = publisher; \
          &quot;cn=architect,ou=groups,dc=example,dc=org&quot;  = architect; \
          &quot;cn=admin,ou=groups,dc=example,dc=org&quot;  = admin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ApreÃÄs un red√©marrage du service, la nouvelle configuration est prise en compte,
et on peut tester la connection LDAP directement avec le navigateur Neo4j : &lt;a href=&quot;http://localhost:7474/browser&quot; class=&quot;bare&quot;&gt;http://localhost:7474/browser&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;d√©tail-du-fonctionnement&quot;&gt;D√©tail du fonctionnement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a deux √©tapes dans le processus : l&amp;#8217;authentification et la gestion des acceÃÄs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;l-authentification&quot;&gt;L&amp;#8217;authentification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Celle-ci est r√©alis√©e directement par un &lt;code&gt;BIND&lt;/code&gt; sur le LDAP avec le &lt;strong&gt;DN&lt;/strong&gt; de l&amp;#8217;utilisateur.
Le &lt;strong&gt;DN&lt;/strong&gt; est calcul√© par Neo4j graÃÇce aÃÄ la clef de configuration &lt;strong&gt;dbms.security.ldap.authentication.user_dn_template&lt;/strong&gt;.
Le &lt;code&gt;{0}&lt;/code&gt; est remplac√© par le login de l&amp;#8217;utilisateur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi dans notre exemple, si on essaye de se connecter avec l&amp;#8217;utilisateur &lt;code&gt;admin&lt;/code&gt;,
le &lt;code&gt;BIND&lt;/code&gt; sera effectu√© avec le DN &lt;code&gt;uid=admin,ou=Users,dc=example,dc=org&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;la-gestion-des-acceÃÄs&quot;&gt;La gestion des acceÃÄs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois que le couple login/password est valid√©, on peut passer aÃÄ la gestion des acceÃÄs.
Celle-ci est d√©l√©gu√©e aÃÄ un utilisateur systeÃÄme qui va effecuter une recherche dans le LDAP pour retrouver l&amp;#8217;utilisateur et ses groupes associ√©s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi il effectue :
  * la requeÃÇte LDAP configur√©e via la clef &lt;strong&gt;dbms.security.ldap.authorization.user_search_filter&lt;/strong&gt; (dans notre cas &lt;code&gt;(&amp;amp;(objectClass=*)(uid={0}))&lt;/code&gt;). Neo4j remplace &lt;code&gt;{0}&lt;/code&gt; par le login de l&amp;#8217;utilisateur.
  * dans le sous-arbre d√©finit vi la clef &lt;strong&gt;dbms.security.ldap.authorization.user_search_base&lt;/strong&gt; (dans notre cas &lt;code&gt;ou=users,dc=example,dc=org&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci lui permet de retrouver l&amp;#8217;utilisateur dans l&amp;#8217;annuaire,
puis de r√©cup√©rer ses groupe via l&amp;#8217;attribut configur√© par la clef &lt;strong&gt;dbms.security.ldap.authorization.group_membership_attributes&lt;/strong&gt;
(donc &lt;code&gt;memberOf&lt;/code&gt; dans l&amp;#8217;exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour finir, la correspondance entre les groupes LDAP et les roles Neo4j est effectu√© en respectant les reÃÄgles d√©finie dans la clef de configuration
&lt;strong&gt;dbms.security.ldap.authorization.group_to_role_mapping&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;en-bref&quot;&gt;En bref&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le connecteur LDAP est uniquement pr√©sent dans l&amp;#8217;√©dition &lt;strong&gt;Entreprise&lt;/strong&gt; de Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuratin est simple et permet de g√©rer aÃÄ la fois l&amp;#8217;authentification et les acceÃÄs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les utilisateurs &lt;strong&gt;doivent imp√©rativement&lt;/strong&gt; eÃÇtre li√©s aux groupes via un attribut comme &lt;strong&gt;memberOf&lt;/strong&gt; (relation utilisateur &amp;#8594; groupes, et pas l&amp;#8217;inverse)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;exemple utilise un utilisateur systeÃÄme, mais ce n&amp;#8217;est pas une obligation. Il est possible de modifier la configuration pour que l&amp;#8217;utilisateur effectue aÃÄ la fois l&amp;#8217;authenfication et les droits d&amp;#8217;acceÃÄs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 13 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2017/11/13/fr-neo4j-ldap.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/13/fr-neo4j-ldap.html</guid>
        
        <category>neo4j, ldap, authenfication, authorisation</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Importer de l&amp;#8217;API opendata de JCD√©caux dans Neo4j</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#l-objectif&quot;&gt;L&amp;#8217;objectif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-modeÃÄle-de-jcdecaux&quot;&gt;Le modeÃÄle de JCDecaux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#l-import&quot;&gt;L&amp;#8217;import&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#pr√©-requis&quot;&gt;Pr√©-requis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#les-contraintes&quot;&gt;Les contraintes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#import-des-contrats&quot;&gt;Import des contrats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#importer-les-stations-et-leur-√©tat&quot;&gt;Importer les stations et leur √©tat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#amusons-nous-maintenant&quot;&gt;Amusons-nous maintenant !&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;l-objectif&quot;&gt;L&amp;#8217;objectif&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Durant ce billet, nous allons utiliser Neo4j sur les donn√©es ouvertes de JCDecaux pour trouver les 5 stations de V√©lo-partage les plus proches de ma position, ayant un v√©lo disponible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vais vous montrer comment r√©aliser un modeÃÄle en graphe, charger les donn√©es depuis l‚ÄôAPI JSON, faire quelques requeÃÇtes Cypher et finir sur une petite application web pour afficher le tout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est parti !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-modeÃÄle-de-jcdecaux&quot;&gt;Le modeÃÄle de JCDecaux&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JCDecaux fournit une API pour les informations sur leur services de v√©los. La documentation est disponible ici : &lt;a href=&quot;https://developer.jcdecaux.com&quot; class=&quot;bare&quot;&gt;https://developer.jcdecaux.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;INFO: vous devez cr√©er un token pour utiliser leur API. Dans mes examples, vous devrez remplacer &lt;code&gt;@JCD_TOKEN_API@&lt;/code&gt; par le votre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En lisant &lt;a href=&quot;https://developer.jcdecaux.com/#/opendata/vls?page=dynamic&quot;&gt;la document 'real-time'&lt;/a&gt;, on peut en d√©finir que JCD utilise le modÃÄle suivant :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-eb6c5cecc9b1438965322d064c0c4350.png&quot; alt=&quot;diag eb6c5cecc9b1438965322d064c0c4350&quot; width=&quot;728&quot; height=&quot;273&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a deux entit√©s, li√©es ensemble : c&amp;#8217;est le d√©but d&amp;#8217;un graphe ! Mais on peut faire mieux &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si on regarde l&amp;#8217;entit√© &lt;code&gt;Contact&lt;/code&gt;, on voit :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;une d√©pendance aÃÄ un pays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;une liste de ville&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc explosons la !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-b317109bf90f015fb06b4866a5533cc1.png&quot; alt=&quot;diag b317109bf90f015fb06b4866a5533cc1&quot; width=&quot;819&quot; height=&quot;93&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et si on regardait aÃÄ pr√©sent le noeud &lt;code&gt;Station&lt;/code&gt; ? Il est facile de voir qu&amp;#8217;on peut le s√©parer en deux&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;les donn√©es statiques&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;les donn√©es √©ph√©meÃÄres&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-f3a47245d234f526a6116c10479f97e6.png&quot; alt=&quot;diag f3a47245d234f526a6116c10479f97e6&quot; width=&quot;589&quot; height=&quot;173&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais que fait-on si on a envie de garder l&amp;#8217;historique des donn√©es ?
Et bien il suffit de cr√©er une chaine de noeuds &lt;code&gt;State&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-6ffe1f11d0d54893b023927cfab8c6a6.png&quot; alt=&quot;diag 6ffe1f11d0d54893b023927cfab8c6a6&quot; width=&quot;589&quot; height=&quot;207&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai choisi cette mod√©lisation car mon principal objectif est d&amp;#8217;obtenir les derni√©res donn√©es (ie. l&amp;#8217;√©tat courant de la station).
Avec ce systeÃÄme je n&amp;#8217;ai qu&amp;#8217;√† traverser une seule relation, et je garde l&amp;#8217;historique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc mon sch√©ma final ressemble aÃÄ cela :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-74331910fff57af03e80c64bc790e020.png&quot; alt=&quot;diag 74331910fff57af03e80c64bc790e020&quot; width=&quot;1279&quot; height=&quot;259&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pr√©sent que nous avons notre modeÃÄle, passons aÃÄ l&amp;#8217;√©tape d&amp;#8217;import.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;l-import&quot;&gt;L&amp;#8217;import&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pr√©-requis&quot;&gt;Pr√©-requis&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avant de commencer, il vous faut installer &lt;a href=&quot;https://neo4j-contrib.github.io/neo4j-apoc-procedures&quot;&gt;APOC&lt;/a&gt;. Il s&amp;#8217;agit d&amp;#8217;une collection de proc√©dures stock√©es treÃÄs utiles, dont je ne peux plus me passer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici la proc√©dure de son installation :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;T√©l√©charger la derni√®re version de la librairie √† l&amp;#8217;adresse suivante :
&lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.0.4.1/apoc-3.0.4.1-all.jar&quot; class=&quot;bare&quot;&gt;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.0.4.1/apoc-3.0.4.1-all.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$&amp;gt; cd NEO4J_HOME/plugins
$&amp;gt; wget https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.0.4.1/apoc-3.0.4.1-all.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Red√©marrer le serveur Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$&amp;gt; bin/neo4j restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;les-contraintes&quot;&gt;Les contraintes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans Neo4j nous pouvons cr√©er des contraintes d&amp;#8217;unicit√©, ce qui permet de s&amp;#8217;assurer de la coh√©rence de nos donn√©es, mais aussi d&amp;#8217;acc√©leÃÄrer la recherche d&amp;#8217;un noeud via son identifiant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci va eÃÇtre utile pour la phase d&amp;#8217;import pour s&amp;#8217;assurer qu&amp;#8217;on ne cr√©e pas deux fois le meÃÇme noeud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;// Contract name is unique
CREATE CONSTRAINT ON (n:Contract) ASSERT n.name IS UNIQUE;

// Country code is unique
CREATE CONSTRAINT ON (n:Country) ASSERT n.code IS UNIQUE;

// Station ID is a composition of the contract's name and the station id.
// Because the number field into the Station entity is only unique inside a contract
CREATE CONSTRAINT ON (n:Station) ASSERT n.id IS UNIQUE;

// State id is a composition of the station id plus the last_update timestamp
CREATE CONSTRAINT ON (n:State) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est a noter qu&amp;#8217;ici je n&amp;#8217;ai pas cr√©√© de contrainte sur les villes. C&amp;#8217;est juste parce que deux pays peuvent avoir une ville avec le meÃÇme nom.
Mais si on le souhaite, on peut cr√©er un index dessus, pour acc√©l√©rer nos recherches de ville par leur nom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE INDEX ON :City(name);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;import-des-contrats&quot;&gt;Import des contrats&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La seconde √©tape consiste aÃÄ importer la liste des contrats de JCD. Pour ce faire nous allons utiliser l&amp;#8217;endpoint suivant : &lt;code&gt;&lt;a href=&quot;https://api.jcdecaux.com/vls/v1/contracts&quot; class=&quot;bare&quot;&gt;https://api.jcdecaux.com/vls/v1/contracts&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voici la requeÃÇte :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH '@JCD_TOKEN_API@' AS key
CALL apoc.load.json('https://api.jcdecaux.com/vls/v1/contracts?apiKey=' + key) YIELD value as row
    MERGE (contract:Contract { name: row.name, commercial_name:row.commercial_name })
    MERGE (country:Country { code: row.country_code })
    WITH row, contract, country
      UNWIND row.cities AS cityName
          MERGE (country)-[:HAS_CITY]-&amp;gt;(city:City { name: cityName })
          MERGE (contract)-[:FOR_CITY]-&amp;gt;(city)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;importer-les-stations-et-leur-√©tat&quot;&gt;Importer les stations et leur √©tat&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant que nous avons les contrats, nous allons pouvoir importer les stations avec leur √©tat, graÃÇce au endpoint suivant : &lt;code&gt;&lt;a href=&quot;https://api.jcdecaux.com/vls/v1/stations?contract=@contract_name@&quot; class=&quot;bare&quot;&gt;https://api.jcdecaux.com/vls/v1/stations?contract=@contract_name@&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;`@contract_name@ ` doit simplement eÃÇtre remplac√© par le nom commercial du contrat afin d&amp;#8217;obtenir la liste des stations de celui-ci.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici la requeÃÇte :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.periodic.iterate(
    &quot;MATCH (c:Contract) RETURN c&quot;,
    &quot;WITH '@JCD_TOKEN_API@' AS key , {c} AS contract
        CALL apoc.load.json('https://api.jcdecaux.com/vls/v1/stations?contract=' + contract.name + '&amp;amp;apiKey=' + key) YIELD value as row

            // we can find the same station number on two contracts, so the unique id is a compisition of the id and the contract
            MERGE (contract)-[:HAS_STATION]-&amp;gt;(station:Station {id: row.contract_name + '_' + row.number})
                ON CREATE SET
                    station.number = row.number,
                    station.name = row.name,
                    station.address = row.address,
                    station.lat = row.position.lat,
                    station.lng = row.position.lng,
                    station.banking = row.banking,
                    station.bonus = row.bonus

            // to have a unique id, I'm using a composition of the station id and the last_update timetsamp
            MERGE (state:State {id: station.id + '_' + row.last_update})
                ON CREATE SET
                    state.status = row.status,
                    state.available_bikes = row.available_bikes,
                    state.bike_stands = row.bike_stands,
                    state.available_bike_stands = row.available_bike_stands

            WITH station, state
                MERGE (station)-[:LAST_STATE]-&amp;gt;(state)

                // Here we remove the previous `LAST_STATE` rel if it exists, and we create the chain
                WITH station, state
                    MATCH (old:State)&amp;lt;-[r:LAST_STATE]-(station)-[:LAST_STATE]-&amp;gt;(state)
                    WHERE NOT id(old) =id(state)
                    WITH old, r, state
                    CREATE (state)-[:PREVIOUS]-&amp;gt;(old)
                    DELETE r&quot;,
    {batchSize:1,parallel:true}) YIELD batches, total, errorMessages&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La premieÃÄre instruction est &lt;code&gt;apoc.periodic.iterate&lt;/code&gt;. Il s&amp;#8217;agit d&amp;#8217;une proc√©dure stock√©e qui prend 3 parameÃÇtres :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Une requeÃÇte cypher qui permet d&amp;#8217;obtenir une premieÃÄre collection de r√©sultat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une autre requeÃÇte qui va s&amp;#8217;appliquer sur chacun des r√©sultats de la premieÃÄre&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De la configuration (ici &lt;code&gt;{batchSize:1,parallel:true}&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basiquement, cela ressemble √† un WITH  (ie. it√©rer sur les r√©sultats d&amp;#8217;une requeÃÇte), mais avec des possiblit√©s de batch (bas√© sur le nombre d&amp;#8217;it√©ration de la premieÃÄre requeÃÇete), et de parall√©lisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc ici, je cr√©e juste un job par &lt;code&gt;Contrat&lt;/code&gt; pour cr√©er les stations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez rejouer ce script toutes les 5 minutes afin de mettre aÃÄ jour l&amp;#8217;√©tat des stations, vu que j&amp;#8217;utilise l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;, qui permet de selectionner une noeud et de le cr√©er s&amp;#8217;il n&amp;#8217;exsite pas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un &lt;code&gt;cron&lt;/code&gt; job est suffisant, ou vous pouvez aussi utiliser la procedure &lt;code&gt;apoc.periodic.repeat&lt;/code&gt; (Les jobs ne sont pas persist√©s, donc a chaque red√©marrage de Neo4j il faudra rejouer recr√©er le job).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous avez bien suivi les √©tapes, vous devriez avoir un graph ressemblant aÃÄ cela :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-bicloo/graph-example.png&quot; alt=&quot;graph example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;amusons-nous-maintenant&quot;&gt;Amusons-nous maintenant !&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant que nous avons une base op√©rationnelle avec les donn√©es, pourquoi ne pas lui demander la liste des stations les plus proches avec un v√©lo disponible :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH point({latitude: 56.7, longitude: 12.6}) as my_position
MATCH (station:Station)-[:LAST_STATE]-&amp;gt;(state:State)
WHERE state.status = &quot;OPEN&quot; AND state.available_bikes &amp;gt; 0
RETURN station, distance(point({latitude: station.lat, longitude: station.lng}), poi)  AS distance
ORDER BY distance
LIMIT 5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise deux nouvelles fonctions de Neo4j 3.1 :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;point( { latitude: XXX, longitude: XXX} ) :&lt;/strong&gt; permets de cr√©er un point geospatial avec la projection WGS-83.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;distance( point, point) :&lt;/strong&gt; retourne la distance g√©od√©sique entre deux points.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est bien, mais nous pouvons avoir de meilleur performances en cr√©ant ces deux indexes (je vous laisse faire les EXPLAIN des requeÃÇte avant et apreÃÄs) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE INDEX ON :State(available_bikes);
CREATE INDEX ON :State(status);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, et si je veux afficher ces donn√©es sur une carte avec du geojson ?
Cypher sachant construire du json, il suffit de lui dire comment :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH point({latitude: 56.7, longitude: 12.6}) as my_position
MATCH (station:Station)-[:LAST_STATE]-&amp;gt;(state:State)
WHERE state.status = &quot;OPEN&quot; AND state.available_bikes &amp;gt; 0
WITH station, state, distance(point({latitude: station.lat, longitude: station.lng}), my_position)  AS distance
ORDER BY  distance
LIMIT 5
WITH collect( {
        type: 'Feature',
        geometry: {
            type: 'Point',
            coordinates: [station.lng, station.lat]
        },
        properties : {
            name : station.name,
            distance: round(distance),
            address : station.address,
            free_bike: state.available_bikes,
            free_slot: state.available_bike_stands
        }
    }) AS features
RETURN  { type: 'FeatureCollection', features: features } AS geojson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour voir le r√©sultat (et v√©rifier la validit√© du geoJson), vous pouvez copier/coller le r√©sultat de la requeÃÇte dans &lt;a href=&quot;http://geojson.io/&quot; class=&quot;bare&quot;&gt;http://geojson.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ou, si vous avez suivi les differentes √©tapes, vous pouvez utiliser cette petite page web qui affiche les r√©sultats grace a &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; : &lt;a href=&quot;https://gist.github.com/sim51/409c769d0501956549221449ca845360&quot;&gt;Comme ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le rendu finale :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-bicloo/app-example.png&quot; alt=&quot;app example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2017/02/06/fr-jcdecaux-cycle-neo4j.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/06/fr-jcdecaux-cycle-neo4j.html</guid>
        
        <category>opendata, jcdecaux, neo4j</category>
        
        
      </item>
      
    
  </channel>
</rss>
