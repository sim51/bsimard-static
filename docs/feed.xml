<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benoit Simard</title>
    <description>Site de Benoit Simard</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/fr/feed" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 May 2018 23:42:42 +0200</pubDate>
    <lastBuildDate>Tue, 01 May 2018 23:42:42 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>

    
     
    
     
      <item>
        <title>Importer une matrice d&amp;#8217;adjacence</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#le-fichier-csv&quot;&gt;Le fichier CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-processus&quot;&gt;Le processus&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#pré-requis-apoc&quot;&gt;Pré-requis: APOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-schema&quot;&gt;Le schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-script-d-import&quot;&gt;Le script d&amp;#8217;import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;objectif ici est de créer un graphe à partir d&amp;#8217;un fichier CSV correspondant a une &lt;a href=&quot;https://fr.wikipedia.org/wiki/Matrice_d&amp;#8217;adjacence&quot;&gt;matrice d&amp;#8217;adjacence&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-fichier-csv&quot;&gt;Le fichier CSV&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple de fichier CSV :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;1;1;0;0;1;0
1;0;1;0;1;0
0;1;0;1;0;0
0;0;1;0;1;1
1;1;0;1;0;0
1;0;0;1;0;0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque indice de ligne et de colonne correspond a un noeud du graph.
Si l&amp;#8217;intersection da la ligne &lt;code&gt;i&lt;/code&gt; avec la colonne &lt;code&gt;j&lt;/code&gt; vaut &lt;code&gt;1&lt;/code&gt;, cela signifie que le noeud &lt;code&gt;i&lt;/code&gt; et le noeud &lt;code&gt;j&lt;/code&gt; sont reliés.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-processus&quot;&gt;Le processus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pré-requis-apoc&quot;&gt;Pré-requis: APOC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour réaliser le script d&amp;#8217;import, je vais utiliser certaines procédures de la librairie &lt;code&gt;APOC&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici les étapes pour son installation :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Télécharger le JAR ici : &lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar&quot; class=&quot;bare&quot;&gt;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copier le JAR dans le répertoire &lt;code&gt;NEO4j_HOME/plugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Editer le fichier de configuration de Neo4j &lt;code&gt;NEO4J_HOME/conf/neo4j.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajouter les propriétés suivantes :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;# To be able to execute APOC procedures
dbms.security.procedures.unrestricted=apoc.*
# To allow APOC procedure to import files
apoc.import.file.enabled=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redémarrer le serveur Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-schema&quot;&gt;Le schema&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le schéma de la base est ici tout simple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;des noeuds avec le label &lt;code&gt;Node&lt;/code&gt;, qui possèdent un attribut &lt;code&gt;id&lt;/code&gt; de type &lt;code&gt;entier&lt;/code&gt; correspondant a leur indice dans la matrice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;les noeuds seront reliés entre eux par une relation de type &lt;code&gt;LINKED_TO&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi pour améliorer les performances de la base et assurer la cohérence des données, on va créer une contrainte d&amp;#8217;unicité sur le champs &lt;code&gt;id&lt;/code&gt; des noeuds &lt;code&gt;Node&lt;/code&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE CONSTRAINT ON (n:Node) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-script-d-import&quot;&gt;Le script d&amp;#8217;import&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le script permettant d&amp;#8217;importer le graphe :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.load.csv('file:///home/bsimard/Applications/neo4j/current/import/matrice.csv',{}) YIELD lineNo AS lineNumber, list AS line

    MERGE (lineNode:Node { id:lineNumber})

    WITH lineNode, line
    UNWIND range(0,size(line)-1, 1) AS colNumber

    MERGE (colNode:Node { id:colNumber})
    WITH line, colNode, lineNode, colNumber

      CALL apoc.do.when(
        line[colNumber] = '1',
        'MERGE (lineNode)-[:LINKED_TO]-(colNode)',
        '',
        {lineNode:lineNode, colNode:colNode}
      ) YIELD value

      RETURN *&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;1&lt;/code&gt;, permet de lire le fichier CSV correspondant a la matrice d&amp;#8217;adjacence ligne par ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;3&lt;/code&gt; on crée le noeud correspondant a la ligne en cours, si celui-ci n&amp;#8217;existe pas grâce a l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La ligne &lt;code&gt;6&lt;/code&gt; permet d&amp;#8217;itérer sur les colonnes de la ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;8&lt;/code&gt; on crée le noeud correspondant a la colonne en cours, si celui-ci n&amp;#8217;existe pas grâce a l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la ligne &lt;code&gt;11&lt;/code&gt; a &lt;code&gt;16&lt;/code&gt;, on vérifie le contenu de la cellule &lt;code&gt;(lineNumber, colNumber)&lt;/code&gt;. Si celui-ci vaut &lt;code&gt;1&lt;/code&gt;, on crée la relation entre les deux noeuds si celle-ci n&amp;#8217;existe pas déjà.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voilà, la matrice d&amp;#8217;adjacence est chargé dans Neo4j !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/images/matrice-adjacence/graph.png&quot; alt=&quot;graph&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 23 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2017/11/23/fr-import-matrice-adjacence.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/23/fr-import-matrice-adjacence.html</guid>
        
        <category>neo4j, import, apoc, matrice</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Connecter Neo4j à un annuaire LDAP</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#objectif&quot;&gt;Objectif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#installation-d-un-serveur-openldap&quot;&gt;Installation d&amp;#8217;un serveur OpenLDAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-configuration-de-neo4j&quot;&gt;La configuration de Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#détail-du-fonctionnement&quot;&gt;Détail du fonctionnement&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#l-authentification&quot;&gt;L&amp;#8217;authentification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-gestion-des-accès&quot;&gt;La gestion des accès&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#en-bref&quot;&gt;En bref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;objectif&quot;&gt;Objectif&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous allez découvrir comment connecter un annuaire LDAP à Neo4j pour lui confier la gestion de l&amp;#8217;authentification et des accès.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation-d-un-serveur-openldap&quot;&gt;Installation d&amp;#8217;un serveur OpenLDAP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Au lieu d&amp;#8217;installer un serveur OpenLDAP sur ma machine, je vais utiliser Docker avec l&amp;#8217;image suivante : &lt;a href=&quot;https://github.com/osixia/docker-openldap&quot; class=&quot;bare&quot;&gt;https://github.com/osixia/docker-openldap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Celle-ci me permet de lancer un serveur OpenLDAP pré-configuré où :
  * le domaine par défault est  &lt;code&gt;dc=example,dc=org&lt;/code&gt;
  * l&amp;#8217;administrateur est &lt;code&gt;cn=admin,dc=example,dc=org&lt;/code&gt; avec le password &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus on peut lui passer en paramètre le chemin d&amp;#8217;accès d&amp;#8217;un répertoire contenant des fichiers LDIF, qui vont être éxécutés à son lancement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi, voici le fichier LDIF que j&amp;#8217;ai réalisé pour créer la structure de mon LDAP et importer les données au démarrage du serveur :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ldif&quot; data-lang=&quot;ldif&quot;&gt;dn: ou=users,dc=example,dc=org
objectClass: organizationalUnit
objectClass: top
ou: users

dn: ou=groups,dc=example,dc=org
objectClass: organizationalUnit
objectClass: top
ou: groups


dn: cn=reader,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: reader
member:uid=reader,ou=users,dc=example,dc=org

dn: cn=publisher,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: publisher
member:uid=publisher,ou=users,dc=example,dc=org

dn: cn=architect,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: architect
member:uid=architect,ou=users,dc=example,dc=org

dn: cn=admin,ou=groups,dc=example,dc=org
objectClass: groupOfNames
objectClass: top
cn: admin
member:uid=admin,ou=users,dc=example,dc=org

dn: uid=reader,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Reader User
givenName: Reader
sn: reader
uid: reader
mail: reader@example.com
ou: users
userpassword: test
memberOf: cn=reader,ou=groups,dc=example,dc=org

dn: uid=publisher,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Publisher User
givenName: Publisher
sn: publisher
uid: publisher
mail: publisher@example.com
ou: users
userpassword: test
memberOf: cn=publisher,ou=groups,dc=example,dc=org

dn: uid=architect,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Architect User
givenName: Architect
sn: architect
uid: architect
mail: architect@example.com
ou: users
userpassword: test
memberOf: cn=architect,ou=groups,dc=example,dc=org

dn: uid=admin,ou=users,dc=example,dc=org
objectClass: organizationalPerson
objectClass: person
objectClass: extensibleObject
objectClass: uidObject
objectClass: inetOrgPerson
objectClass: top
cn: Admin User
givenName: Architect
sn: admin
uid: admin
mail: admin@example.com
ou: users
userpassword: test
memberOf: cn=admin,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme vous pouvez le constater, j&amp;#8217;y définis les éléments suivants :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;une &lt;em&gt;organization unit&lt;/em&gt;  &lt;strong&gt;groups&lt;/strong&gt; : &lt;code&gt;ou=groups,dc=example,dc=org&lt;/code&gt;, contenant la définition des groupes suivants&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;admin&lt;/strong&gt; &lt;code&gt;cn=admin,ou=groupss,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;architect&lt;/strong&gt; &lt;code&gt;cn=architect,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;publisher&lt;/strong&gt; &lt;code&gt;cn=publisher,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;groupe &lt;strong&gt;reader&lt;/strong&gt; &lt;code&gt;cn=reader,ou=groups,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;une &lt;em&gt;organization unit&lt;/em&gt; &lt;strong&gt;users&lt;/strong&gt; : &lt;code&gt;ou=users,dc=example,dc=org&lt;/code&gt;, contenant la définition des utilisateurs suivants&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;admin&lt;/strong&gt; &lt;code&gt;uid=admin,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;architect&lt;/strong&gt; &lt;code&gt;uid=architect,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;publisher&lt;/strong&gt; &lt;code&gt;uid=publisher,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l&amp;#8217;utilisateur &lt;strong&gt;reader&lt;/strong&gt; &lt;code&gt;uid=reader,ou=users,dc=example,dc=org&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;INFO: les utilisateurs doivent être liés a leurs groupes via l&amp;#8217;attribut &lt;code&gt;memberOf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon cas, j&amp;#8217;ai sauvegardé ce fichier dans le répertoire &lt;code&gt;/home/bsimard/ldif&lt;/code&gt;,
ce qui donne la commande suivante pour démarrer le container docker :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run \
   --volume /home/bsimard/ldif/:/container/service/slapd/assets/config/bootstrap/ldif/custom \
   osixia/openldap:1.1.10 \
   --copy-service \
   --loglevel debug&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;la-configuration-de-neo4j&quot;&gt;La configuration de Neo4j&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La configuration de Neo4j est centralisée dans le fichier &lt;code&gt;NEO4J_HOME/conf/neo4j.conf&lt;/code&gt;.
Ainsi il suffit de l&amp;#8217;éditer et d&amp;#8217;y ajouter les propriétés suivantes :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;#********************************************************************
# Security Configuration
#********************************************************************

# The authentication and authorization provider that contains both users and roles.
# This can be one of the built-in `native` or `ldap` auth providers,
# or it can be an externally provided plugin, with a custom name prefixed by `plugin`,
# i.e. `plugin-&amp;lt;AUTH_PROVIDER_NAME&amp;gt;`.
dbms.security.auth_provider=ldap

# The time to live (TTL) for cached authentication and authorization info when using
# external auth providers (LDAP or plugin). Setting the TTL to 0 will
# disable auth caching.
#dbms.security.auth_cache_ttl=10m

# The maximum capacity for authentication and authorization caches (respectively).
#dbms.security.auth_cache_max_capacity=10000

# Set to log successful authentication events to the security log.
# If this is set to `false` only failed authentication events will be logged, which
# could be useful if you find that the successful events spam the logs too much,
# and you do not require full auditing capability.
#dbms.security.log_successful_authentication=true

#================================================
# LDAP Auth Provider Configuration
#================================================

# URL of LDAP server to use for authentication and authorization.
# The format of the setting is `&amp;lt;protocol&amp;gt;://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;`, where hostname is the only required field.
# The supported values for protocol are `ldap` (default) and `ldaps`.
# The default port for `ldap` is 389 and for `ldaps` 636.
# For example: `ldaps://ldap.example.com:10389`.
#
# NOTE: You may want to consider using STARTTLS (`dbms.security.ldap.use_starttls`) instead of LDAPS
# for secure connections, in which case the correct protocol is `ldap`.
dbms.security.ldap.host=172.17.0.2

# Use secure communication with the LDAP server using opportunistic TLS.
# First an initial insecure connection will be made with the LDAP server, and then a STARTTLS command
# will be issued to negotiate an upgrade of the connection to TLS before initiating authentication.
#dbms.security.ldap.use_starttls=false

# The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.
# `follow` automatically follows any referrals
# `ignore` ignores any referrals
# `throw` throws an exception, which will lead to authentication failure
#dbms.security.ldap.referral=follow

# The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be
# established within the given time the attempt is aborted.
# A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.
#dbms.security.ldap.connection_timeout=30s

# The timeout for an LDAP read request (i.e. search). If the LDAP server does not respond within
# the given time the request will be aborted. A value of 0 means wait for a response indefinitely.
#dbms.security.ldap.read_timeout=30s

#----------------------------------
# LDAP Authentication Configuration
#----------------------------------

# LDAP authentication mechanism. This is one of `simple` or a SASL mechanism supported by JNDI,
# for example `DIGEST-MD5`. `simple` is basic username
# and password authentication and SASL is used for more advanced mechanisms. See RFC 2251 LDAPv3
# documentation for more details.
dbms.security.ldap.authentication.mechanism=simple

# LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is
# an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that
# conforms with the LDAP directory's schema from the user principal that is submitted with the
# authentication token when logging in.
# The special token {0} is a placeholder where the user principal will be substituted into the DN string.
dbms.security.ldap.authentication.user_dn_template=uid={0},ou=users,dc=example,dc=org

# Determines if the result of authentication via the LDAP server should be cached or not.
# Caching is used to limit the number of LDAP requests that have to be made over the network
# for users that have already been authenticated successfully. A user can be authenticated against
# an existing cache entry (instead of via an LDAP server) as long as it is alive
# (see `dbms.security.auth_cache_ttl`).
# An important consequence of setting this to `true` is that
# Neo4j then needs to cache a hashed version of the credentials in order to perform credentials
# matching. This hashing is done using a cryptographic hash function together with a random salt.
# Preferably a conscious decision should be made if this method is considered acceptable by
# the security standards of the organization in which this Neo4j instance is deployed.
dbms.security.ldap.authentication.cache_enabled=false

#----------------------------------
# LDAP Authorization Configuration
#----------------------------------
# Authorization is performed by searching the directory for the groups that
# the user is a member of, and then map those groups to Neo4j roles.

# Perform LDAP search for authorization info using a system account instead of the user's own account.
#
# If this is set to `false` (default), the search for group membership will be performed
# directly after authentication using the LDAP context bound with the user's own account.
# The mapped roles will be cached for the duration of `dbms.security.auth_cache_ttl`,
# and then expire, requiring re-authentication. To avoid frequently having to re-authenticate
# sessions you may want to set a relatively long auth cache expiration time together with this option.
# NOTE: This option will only work if the users are permitted to search for their
# own group membership attributes in the directory.
#
# If this is set to `true`, the search will be performed using a special system account user
# with read access to all the users in the directory.
# You need to specify the username and password using the settings
# `dbms.security.ldap.authorization.system_username` and
# `dbms.security.ldap.authorization.system_password` with this option.
# Note that this account only needs read access to the relevant parts of the LDAP directory
# and does not need to have access rights to Neo4j, or any other systems.
dbms.security.ldap.authorization.use_system_account=true

# An LDAP system account username to use for authorization searches when
# `dbms.security.ldap.authorization.use_system_account` is `true`.
# Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username,
# so you may have to specify a full DN.
dbms.security.ldap.authorization.system_username=cn=admin,dc=example,dc=org

# An LDAP system account password to use for authorization searches when
# `dbms.security.ldap.authorization.use_system_account` is `true`.
dbms.security.ldap.authorization.system_password=admin

# The name of the base object or named context to search for user objects when LDAP authorization is enabled.
# A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.
dbms.security.ldap.authorization.user_search_base=ou=users,dc=example,dc=org

# The LDAP search filter to search for a user principal when LDAP authorization is
# enabled. The filter should contain the placeholder token {0} which will be substituted for the
# user principal.
dbms.security.ldap.authorization.user_search_filter=(&amp;amp;(objectClass=*)(uid={0}))

# A list of attribute names on a user object that contains groups to be used for mapping to roles
# when LDAP authorization is enabled.
dbms.security.ldap.authorization.group_membership_attributes=memberOf

# An authorization mapping from LDAP group names to Neo4j role names.
# The map should be formatted as a semicolon separated list of key-value pairs, where the
# key is the LDAP group name and the value is a comma separated list of corresponding role names.
# For example: group1=role1;group2=role2;group3=role3,role4,role5
#
# You could also use whitespaces and quotes around group names to make this mapping more readable,
# for example: dbms.security.ldap.authorization.group_to_role_mapping=\
#          &quot;cn=Neo4j Read Only,cn=users,dc=example,dc=com&quot;      = reader;    \
#          &quot;cn=Neo4j Read-Write,cn=users,dc=example,dc=com&quot;     = publisher; \
#          &quot;cn=Neo4j Schema Manager,cn=users,dc=example,dc=com&quot; = architect; \
#          &quot;cn=Neo4j Administrator,cn=users,dc=example,dc=com&quot;  = admin
dbms.security.ldap.authorization.group_to_role_mapping=\
          &quot;cn=reader,ou=groups,dc=example,dc=org&quot;  = reader; \
          &quot;cn=publisher,ou=groups,dc=example,dc=org&quot;  = publisher; \
          &quot;cn=architect,ou=groups,dc=example,dc=org&quot;  = architect; \
          &quot;cn=admin,ou=groups,dc=example,dc=org&quot;  = admin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après un redémarrage du service, la nouvelle configuration est prise en compte,
et on peut tester la connection LDAP directement avec le navigateur Neo4j : &lt;a href=&quot;http://localhost:7474/browser&quot; class=&quot;bare&quot;&gt;http://localhost:7474/browser&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;détail-du-fonctionnement&quot;&gt;Détail du fonctionnement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a deux étapes dans le processus : l&amp;#8217;authentification et la gestion des accès&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;l-authentification&quot;&gt;L&amp;#8217;authentification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Celle-ci est réalisée directement par un &lt;code&gt;BIND&lt;/code&gt; sur le LDAP avec le &lt;strong&gt;DN&lt;/strong&gt; de l&amp;#8217;utilisateur.
Le &lt;strong&gt;DN&lt;/strong&gt; est calculé par Neo4j grâce à la clef de configuration &lt;strong&gt;dbms.security.ldap.authentication.user_dn_template&lt;/strong&gt;.
Le &lt;code&gt;{0}&lt;/code&gt; est remplacé par le login de l&amp;#8217;utilisateur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi dans notre exemple, si on essaye de se connecter avec l&amp;#8217;utilisateur &lt;code&gt;admin&lt;/code&gt;,
le &lt;code&gt;BIND&lt;/code&gt; sera effectué avec le DN &lt;code&gt;uid=admin,ou=Users,dc=example,dc=org&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;la-gestion-des-accès&quot;&gt;La gestion des accès&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois que le couple login/password est validé, on peut passer à la gestion des accès.
Celle-ci est déléguée à un utilisateur système qui va effecuter une recherche dans le LDAP pour retrouver l&amp;#8217;utilisateur et ses groupes associés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi il effectue :
  * la requête LDAP configurée via la clef &lt;strong&gt;dbms.security.ldap.authorization.user_search_filter&lt;/strong&gt; (dans notre cas &lt;code&gt;(&amp;amp;(objectClass=*)(uid={0}))&lt;/code&gt;). Neo4j remplace &lt;code&gt;{0}&lt;/code&gt; par le login de l&amp;#8217;utilisateur.
  * dans le sous-arbre définit vi la clef &lt;strong&gt;dbms.security.ldap.authorization.user_search_base&lt;/strong&gt; (dans notre cas &lt;code&gt;ou=users,dc=example,dc=org&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci lui permet de retrouver l&amp;#8217;utilisateur dans l&amp;#8217;annuaire,
puis de récupérer ses groupe via l&amp;#8217;attribut configuré par la clef &lt;strong&gt;dbms.security.ldap.authorization.group_membership_attributes&lt;/strong&gt;
(donc &lt;code&gt;memberOf&lt;/code&gt; dans l&amp;#8217;exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour finir, la correspondance entre les groupes LDAP et les roles Neo4j est effectué en respectant les règles définie dans la clef de configuration
&lt;strong&gt;dbms.security.ldap.authorization.group_to_role_mapping&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;en-bref&quot;&gt;En bref&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le connecteur LDAP est uniquement présent dans l&amp;#8217;édition &lt;strong&gt;Entreprise&lt;/strong&gt; de Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuratin est simple et permet de gérer à la fois l&amp;#8217;authentification et les accès&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les utilisateurs &lt;strong&gt;doivent impérativement&lt;/strong&gt; être liés aux groupes via un attribut comme &lt;strong&gt;memberOf&lt;/strong&gt; (relation utilisateur &amp;#8594; groupes, et pas l&amp;#8217;inverse)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;exemple utilise un utilisateur système, mais ce n&amp;#8217;est pas une obligation. Il est possible de modifier la configuration pour que l&amp;#8217;utilisateur effectue à la fois l&amp;#8217;authenfication et les droits d&amp;#8217;accès.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 13 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2017/11/13/fr-neo4j-ldap.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/13/fr-neo4j-ldap.html</guid>
        
        <category>neo4j, ldap, authenfication, authorisation</category>
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Importer de l&amp;#8217;API opendata de JCDécaux dans Neo4j</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#l-objectif&quot;&gt;L&amp;#8217;objectif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-modèle-de-jcdecaux&quot;&gt;Le modèle de JCDecaux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#l-import&quot;&gt;L&amp;#8217;import&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#pré-requis&quot;&gt;Pré-requis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#les-contraintes&quot;&gt;Les contraintes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#import-des-contrats&quot;&gt;Import des contrats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#importer-les-stations-et-leur-état&quot;&gt;Importer les stations et leur état&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#amusons-nous-maintenant&quot;&gt;Amusons-nous maintenant !&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;l-objectif&quot;&gt;L&amp;#8217;objectif&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Durant ce billet, nous allons utiliser Neo4j sur les données ouvertes de JCDecaux pour trouver les 5 stations de Vélo-partage les plus proches de ma position, ayant un vélo disponible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vais vous montrer comment réaliser un modèle en graphe, charger les données depuis l’API JSON, faire quelques requêtes Cypher et finir sur une petite application web pour afficher le tout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est parti !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-modèle-de-jcdecaux&quot;&gt;Le modèle de JCDecaux&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JCDecaux fournit une API pour les informations sur leur services de vélos. La documentation est disponible ici : &lt;a href=&quot;https://developer.jcdecaux.com&quot; class=&quot;bare&quot;&gt;https://developer.jcdecaux.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;INFO: vous devez créer un token pour utiliser leur API. Dans mes examples, vous devrez remplacer &lt;code&gt;@JCD_TOKEN_API@&lt;/code&gt; par le votre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En lisant &lt;a href=&quot;https://developer.jcdecaux.com/#/opendata/vls?page=dynamic&quot;&gt;la document 'real-time'&lt;/a&gt;, on peut en définir que JCD utilise le mod̀le suivant :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-eb6c5cecc9b1438965322d064c0c4350.png&quot; alt=&quot;diag eb6c5cecc9b1438965322d064c0c4350&quot; width=&quot;728&quot; height=&quot;273&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a deux entités, liées ensemble : c&amp;#8217;est le début d&amp;#8217;un graphe ! Mais on peut faire mieux &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si on regarde l&amp;#8217;entité &lt;code&gt;Contact&lt;/code&gt;, on voit :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;une dépendance à un pays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;une liste de ville&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc explosons la !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-b317109bf90f015fb06b4866a5533cc1.png&quot; alt=&quot;diag b317109bf90f015fb06b4866a5533cc1&quot; width=&quot;819&quot; height=&quot;93&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et si on regardait à présent le noeud &lt;code&gt;Station&lt;/code&gt; ? Il est facile de voir qu&amp;#8217;on peut le séparer en deux&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;les données statiques&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;les données éphémères&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-f3a47245d234f526a6116c10479f97e6.png&quot; alt=&quot;diag f3a47245d234f526a6116c10479f97e6&quot; width=&quot;589&quot; height=&quot;173&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais que fait-on si on a envie de garder l&amp;#8217;historique des données ?
Et bien il suffit de créer une chaine de noeuds &lt;code&gt;State&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-6ffe1f11d0d54893b023927cfab8c6a6.png&quot; alt=&quot;diag 6ffe1f11d0d54893b023927cfab8c6a6&quot; width=&quot;589&quot; height=&quot;207&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai choisi cette modélisation car mon principal objectif est d&amp;#8217;obtenir les derniéres données (ie. l&amp;#8217;état courant de la station).
Avec ce système je n&amp;#8217;ai qu&amp;#8217;à traverser une seule relation, et je garde l&amp;#8217;historique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc mon schéma final ressemble à cela :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-74331910fff57af03e80c64bc790e020.png&quot; alt=&quot;diag 74331910fff57af03e80c64bc790e020&quot; width=&quot;1279&quot; height=&quot;261&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A présent que nous avons notre modèle, passons à l&amp;#8217;étape d&amp;#8217;import.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;l-import&quot;&gt;L&amp;#8217;import&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pré-requis&quot;&gt;Pré-requis&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avant de commencer, il vous faut installer &lt;a href=&quot;https://neo4j-contrib.github.io/neo4j-apoc-procedures&quot;&gt;APOC&lt;/a&gt;. Il s&amp;#8217;agit d&amp;#8217;une collection de procédures stockées très utiles, dont je ne peux plus me passer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici la procédure de son installation :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Télécharger la dernière version de la librairie à l&amp;#8217;adresse suivante :
&lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.0.4.1/apoc-3.0.4.1-all.jar&quot; class=&quot;bare&quot;&gt;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.0.4.1/apoc-3.0.4.1-all.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$&amp;gt; cd NEO4J_HOME/plugins
$&amp;gt; wget https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.0.4.1/apoc-3.0.4.1-all.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redémarrer le serveur Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$&amp;gt; bin/neo4j restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;les-contraintes&quot;&gt;Les contraintes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans Neo4j nous pouvons créer des contraintes d&amp;#8217;unicité, ce qui permet de s&amp;#8217;assurer de la cohérence de nos données, mais aussi d&amp;#8217;accélèrer la recherche d&amp;#8217;un noeud via son identifiant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci va être utile pour la phase d&amp;#8217;import pour s&amp;#8217;assurer qu&amp;#8217;on ne crée pas deux fois le même noeud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;// Contract name is unique
CREATE CONSTRAINT ON (n:Contract) ASSERT n.name IS UNIQUE;

// Country code is unique
CREATE CONSTRAINT ON (n:Country) ASSERT n.code IS UNIQUE;

// Station ID is a composition of the contract's name and the station id.
// Because the number field into the Station entity is only unique inside a contract
CREATE CONSTRAINT ON (n:Station) ASSERT n.id IS UNIQUE;

// State id is a composition of the station id plus the last_update timestamp
CREATE CONSTRAINT ON (n:State) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est a noter qu&amp;#8217;ici je n&amp;#8217;ai pas créé de contrainte sur les villes. C&amp;#8217;est juste parce que deux pays peuvent avoir une ville avec le même nom.
Mais si on le souhaite, on peut créer un index dessus, pour accélérer nos recherches de ville par leur nom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE INDEX ON :City(name);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;import-des-contrats&quot;&gt;Import des contrats&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La seconde étape consiste à importer la liste des contrats de JCD. Pour ce faire nous allons utiliser l&amp;#8217;endpoint suivant : &lt;code&gt;&lt;a href=&quot;https://api.jcdecaux.com/vls/v1/contracts&quot; class=&quot;bare&quot;&gt;https://api.jcdecaux.com/vls/v1/contracts&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voici la requête :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH '@JCD_TOKEN_API@' AS key
CALL apoc.load.json('https://api.jcdecaux.com/vls/v1/contracts?apiKey=' + key) YIELD value as row
    MERGE (contract:Contract { name: row.name, commercial_name:row.commercial_name })
    MERGE (country:Country { code: row.country_code })
    WITH row, contract, country
      UNWIND row.cities AS cityName
          MERGE (country)-[:HAS_CITY]-&amp;gt;(city:City { name: cityName })
          MERGE (contract)-[:FOR_CITY]-&amp;gt;(city)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;importer-les-stations-et-leur-état&quot;&gt;Importer les stations et leur état&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant que nous avons les contrats, nous allons pouvoir importer les stations avec leur état, grâce au endpoint suivant : &lt;code&gt;&lt;a href=&quot;https://api.jcdecaux.com/vls/v1/stations?contract=@contract_name@&quot; class=&quot;bare&quot;&gt;https://api.jcdecaux.com/vls/v1/stations?contract=@contract_name@&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;`@contract_name@ ` doit simplement être remplacé par le nom commercial du contrat afin d&amp;#8217;obtenir la liste des stations de celui-ci.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici la requête :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.periodic.iterate(
    &quot;MATCH (c:Contract) RETURN c&quot;,
    &quot;WITH '@JCD_TOKEN_API@' AS key , {c} AS contract
        CALL apoc.load.json('https://api.jcdecaux.com/vls/v1/stations?contract=' + contract.name + '&amp;amp;apiKey=' + key) YIELD value as row

            // we can find the same station number on two contracts, so the unique id is a compisition of the id and the contract
            MERGE (contract)-[:HAS_STATION]-&amp;gt;(station:Station {id: row.contract_name + '_' + row.number})
                ON CREATE SET
                    station.number = row.number,
                    station.name = row.name,
                    station.address = row.address,
                    station.lat = row.position.lat,
                    station.lng = row.position.lng,
                    station.banking = row.banking,
                    station.bonus = row.bonus

            // to have a unique id, I'm using a composition of the station id and the last_update timetsamp
            MERGE (state:State {id: station.id + '_' + row.last_update})
                ON CREATE SET
                    state.status = row.status,
                    state.available_bikes = row.available_bikes,
                    state.bike_stands = row.bike_stands,
                    state.available_bike_stands = row.available_bike_stands

            WITH station, state
                MERGE (station)-[:LAST_STATE]-&amp;gt;(state)

                // Here we remove the previous `LAST_STATE` rel if it exists, and we create the chain
                WITH station, state
                    MATCH (old:State)&amp;lt;-[r:LAST_STATE]-(station)-[:LAST_STATE]-&amp;gt;(state)
                    WHERE NOT id(old) =id(state)
                    WITH old, r, state
                    CREATE (state)-[:PREVIOUS]-&amp;gt;(old)
                    DELETE r&quot;,
    {batchSize:1,parallel:true}) YIELD batches, total, errorMessages&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première instruction est &lt;code&gt;apoc.periodic.iterate&lt;/code&gt;. Il s&amp;#8217;agit d&amp;#8217;une procédure stockée qui prend 3 paramêtres :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Une requête cypher qui permet d&amp;#8217;obtenir une première collection de résultat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une autre requête qui va s&amp;#8217;appliquer sur chacun des résultats de la première&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De la configuration (ici &lt;code&gt;{batchSize:1,parallel:true}&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basiquement, cela ressemble à un WITH  (ie. itérer sur les résultats d&amp;#8217;une requête), mais avec des possiblités de batch (basé sur le nombre d&amp;#8217;itération de la première requêete), et de parallélisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc ici, je crée juste un job par &lt;code&gt;Contrat&lt;/code&gt; pour créer les stations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez rejouer ce script toutes les 5 minutes afin de mettre à jour l&amp;#8217;état des stations, vu que j&amp;#8217;utilise l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;, qui permet de selectionner une noeud et de le créer s&amp;#8217;il n&amp;#8217;exsite pas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un &lt;code&gt;cron&lt;/code&gt; job est suffisant, ou vous pouvez aussi utiliser la procedure &lt;code&gt;apoc.periodic.repeat&lt;/code&gt; (Les jobs ne sont pas persistés, donc a chaque redémarrage de Neo4j il faudra rejouer recréer le job).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous avez bien suivi les étapes, vous devriez avoir un graph ressemblant à cela :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-bicloo/graph-example.png&quot; alt=&quot;graph example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;amusons-nous-maintenant&quot;&gt;Amusons-nous maintenant !&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant que nous avons une base opérationnelle avec les données, pourquoi ne pas lui demander la liste des stations les plus proches avec un vélo disponible :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH point({latitude: 56.7, longitude: 12.6}) as my_position
MATCH (station:Station)-[:LAST_STATE]-&amp;gt;(state:State)
WHERE state.status = &quot;OPEN&quot; AND state.available_bikes &amp;gt; 0
RETURN station, distance(point({latitude: station.lat, longitude: station.lng}), poi)  AS distance
ORDER BY distance
LIMIT 5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise deux nouvelles fonctions de Neo4j 3.1 :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;point( { latitude: XXX, longitude: XXX} ) :&lt;/strong&gt; permets de créer un point geospatial avec la projection WGS-83.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;distance( point, point) :&lt;/strong&gt; retourne la distance géodésique entre deux points.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est bien, mais nous pouvons avoir de meilleur performances en créant ces deux indexes (je vous laisse faire les EXPLAIN des requête avant et après) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE INDEX ON :State(available_bikes);
CREATE INDEX ON :State(status);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, et si je veux afficher ces données sur une carte avec du geojson ?
Cypher sachant construire du json, il suffit de lui dire comment :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH point({latitude: 56.7, longitude: 12.6}) as my_position
MATCH (station:Station)-[:LAST_STATE]-&amp;gt;(state:State)
WHERE state.status = &quot;OPEN&quot; AND state.available_bikes &amp;gt; 0
WITH station, state, distance(point({latitude: station.lat, longitude: station.lng}), my_position)  AS distance
ORDER BY  distance
LIMIT 5
WITH collect( {
        type: 'Feature',
        geometry: {
            type: 'Point',
            coordinates: [station.lng, station.lat]
        },
        properties : {
            name : station.name,
            distance: round(distance),
            address : station.address,
            free_bike: state.available_bikes,
            free_slot: state.available_bike_stands
        }
    }) AS features
RETURN  { type: 'FeatureCollection', features: features } AS geojson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour voir le résultat (et vérifier la validité du geoJson), vous pouvez copier/coller le résultat de la requête dans &lt;a href=&quot;http://geojson.io/&quot; class=&quot;bare&quot;&gt;http://geojson.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ou, si vous avez suivi les differentes étapes, vous pouvez utiliser cette petite page web qui affiche les résultats grace a &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; : &lt;a href=&quot;https://gist.github.com/sim51/409c769d0501956549221449ca845360&quot;&gt;Comme ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le rendu finale :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-bicloo/app-example.png&quot; alt=&quot;app example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2017/02/06/fr-jcdecaux-cycle-neo4j.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/06/fr-jcdecaux-cycle-neo4j.html</guid>
        
        <category>opendata, jcdecaux, neo4j</category>
        
        
      </item>
      
    
     
    
     
    
     
      <item>
        <title>Les icônes du passé</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-top-5-des-icônes-du-passé&quot;&gt;Le top 5 des icônes du passé&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#enregistrer&quot;&gt;Enregistrer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-téléphone&quot;&gt;Le téléphone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-touche-répondeur&quot;&gt;La touche répondeur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-télévision&quot;&gt;La télévision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#la-touche-vérouiller&quot;&gt;La touche vérouiller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#et-bien-d-autres&quot;&gt;Et bien d&amp;#8217;autres &amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#en-résumé&quot;&gt;En résumé&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#coup-de-gueule-perso&quot;&gt;Coup de gueule perso&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Non ce n&amp;#8217;est pas un post sur les stars de mon enfance.
Dans mon travail je fais de plus en plus d&amp;#8217;ergonomie, et lorsque je vois un graphiste mettre une &quot;disquette&quot; à coté du bouton &quot;save&quot; cela me fait toujours sourire&amp;#8230;&amp;#8203;
J&amp;#8217;ai donc décidé de faire un petit florilège des icônes obsolètes qu&amp;#8217;on utilise toujours et qui ne parle plus aux nouvelles générations, mais qu&amp;#8217;on utilise toujours un peu partout.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-top-5-des-icônes-du-passé&quot;&gt;Le top 5 des icônes du passé&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;enregistrer&quot;&gt;Enregistrer&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/icones/floppy.png&quot; alt=&quot;floppy&quot; width=&quot;100&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais pourquoi c&amp;#8217;est encore une disquette !
Cela fait 10 ans que je n&amp;#8217;ai même plus un lecteur de disquette sur mon ordinateur, et au moins 15 que je les utilise plus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-téléphone&quot;&gt;Le téléphone&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/icones/phone.jpg&quot; alt=&quot;phone&quot; width=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Là on retrouve plusieurs variantes :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le téléphone avec le cadran qu&amp;#8217;on tourne. Cela date quand même de l&amp;#8217;époque de ma grand-mère, faudrait penser à passer à autre chose.
Le combiné de téléphone qu&amp;#8217;on retrouvait dans les cabines téléphoniques. Depuis combien de temps vous n&amp;#8217;avez pas utilisé voir croisé une cabine téléphonique ?
Le téléphone portable avec l&amp;#8217;antenne qui dépasse en haut à gauche. Là aussi cela à plus de dix ans &amp;#8230;&amp;#8203; (coucou itinéris, hola, &amp;#8230;&amp;#8203;)
Bon après représenter une brique noire sans touche, c&amp;#8217;est pas simple &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;la-touche-répondeur&quot;&gt;La touche répondeur&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/icones/repondeur.png&quot; alt=&quot;repondeur&quot; width=&quot;100&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Qui a connu les répondeurs à cassettes ? Il n&amp;#8217;y a que dans les films des années 80 qu&amp;#8217;on voit ça.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;la-télévision&quot;&gt;La télévision&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/icones/television.jpg&quot; alt=&quot;television&quot; width=&quot;500&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous avez toujours une antenne sur votre télévision ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;la-touche-vérouiller&quot;&gt;La touche vérouiller&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/icones/key.png&quot; alt=&quot;key&quot; width=&quot;100&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit encore souvent une bonne clef à l&amp;#8217;ancienne comme symbole pour vérouiller le clavier de son téléphone ou autre.
Personnellement j&amp;#8217;en ai plus des comme ça depuis longtemps. Toutefois, je pense que ce symbole peut encore marcher, même s&amp;#8217;il est voué à disparaitre. Il vaut mieux préférer un cadena ou prendre une clef récente.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;et-bien-d-autres&quot;&gt;Et bien d&amp;#8217;autres &amp;#8230;&amp;#8203;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Que dire du &quot;porte document&quot;, des banettes pour les dossiers,  de la caméra/pellicule pour les films, du micro datant d&amp;#8217;une autre époque, du presse-papier, du termomètre à mercure pour la température &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;en-résumé&quot;&gt;En résumé&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je sais bien que réaliser des icônes n&amp;#8217;est pas chose aisé, il faut qu&amp;#8217;elles soient épurées et reconnaissables du premier coup.
Toutefois, je pense qu&amp;#8217;il est nécessaire de les faire évoluer pour que cela représente la réalité. Sinon cela n&amp;#8217;est plus une icône, c&amp;#8217;est à dire  une représentation de quelque chose, mais tout simplement un symbole, qui n&amp;#8217;a que de sens que celui qu&amp;#8217;on veut bien lui donner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;coup-de-gueule-perso&quot;&gt;Coup de gueule perso&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le même genre, si un jour je tiens celui qui a créé l&amp;#8217;icône &quot;wifi&quot;, il passera un mauvais 1/4 d&amp;#8217;heure. C&amp;#8217;est quasiment la même que celle pour le volume, mais à la verticale. Il est fréquent que je me trompe, d&amp;#8217;autant plus que j&amp;#8217;ai aussi une icône RSS dans mon systemtray &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/Les-icones-du-passe</link>
        <guid isPermaLink="true">http://localhost:4000/Les-icones-du-passe</guid>
        
        <category>ergonomie</category>
        
        
      </item>
      
    
     
      <item>
        <title>Stresser facilement votre base Neo4j avec gatling</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#la-création-des-scenarii&quot;&gt;La création des scenarii&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#configuration-de-neo4j-pour-le-query-log&quot;&gt;Configuration de Neo4j pour le query-log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gatling&quot;&gt;Gatling&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#création-du-scenario&quot;&gt;Création du scenario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lancement-des-tests&quot;&gt;Lancement des tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;la-création-des-scenarii&quot;&gt;La création des scenarii&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La chose la plus fastidieuse sur les tests de monté en charge, c’est la création des scenarii qui seront utilisés lors des tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsqu’on veut tester une application web, c’est assez simple puisque tous les outils possèdent un recorder permettant d’enregistrer vos actions de votre navigateur par l’intermédiaire d’un proxy. Et gatling ne déroge pas à la règle !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comment faire pour une base de données ? Et bien avec le journal des requêtes pardi !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;, même si cette méthode est efficace et très simple à mettre en place, généralement on préfère écrire nos scenarii de manière à ce qu’ils soient reproductibles (ie. idempotent).
Or les query-log ne le sont pas !
Et oui on ne peut faire deux fois la même requête d’insertion si celle-ci tombe sous le joug d’une contrainte d’unicité.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, cette méthode est simple &amp;amp; rapide, mais &lt;strong&gt;criticable&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration-de-neo4j-pour-le-query-log&quot;&gt;Configuration de Neo4j pour le query-log&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Neo4j vous permet de logger toutes les requêtes HTTP qui lui sont envoyées.
Vous pouvez retrouver la documentation ici : &lt;a href=&quot;http://neo4j.com/docs/stable/server-configuration.html#_http_logging_configuration&quot; class=&quot;bare&quot;&gt;http://neo4j.com/docs/stable/server-configuration.html#_http_logging_configuration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici la liste des actions à réaliser :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Editer le fichier &lt;code&gt;neo4j-server.properties&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activer ou ajouter les lignes suivantes :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;org.neo4j.server.http.log.enabled=true
org.neo4j.server.http.log.config=conf/neo4j-http-logging.xml
Editer le fichier neo4j-http-logging.xml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remplacer la ligne pattern par celle-ci : &lt;code&gt;&amp;lt;pattern&amp;gt;%t{dd/MMM/yyyy:HH:mm:ss Z};%h;%m;%r;%replace(%replace(%replace(%requestContent){'\\', '\\\\'}){';', '\\;'}){'&quot;', '\\&quot;'};%s&amp;lt;/pattern&amp;gt;`&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;%t{dd/MMM/yyyy:HH:mm:ss Z} :&lt;/strong&gt; la date de la requête&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;%h :&lt;/strong&gt; l’hote d’où provient la requête&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;%m :&lt;/strong&gt; le verbe HTTP utilisé&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;%r :&lt;/strong&gt; l’url de la requête&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;%replace(%replace(%requestContent){'\', '\\'}){';', '\;'} :&lt;/strong&gt; le contenu de la requête où on echappe les caractères '\', ';' &amp;amp; '&quot;'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;%s :&lt;/strong&gt; le code HTTP de réponse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous voulez avoir plus de détail sur ces varaibles, c’est par ici : &lt;a href=&quot;http://logback.qos.ch/manual/layouts.html#AccessPatternLayout&quot; class=&quot;bare&quot;&gt;http://logback.qos.ch/manual/layouts.html#AccessPatternLayout&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://logback.qos.ch/xref/ch/qos/logback/access/PatternLayout.html&quot; class=&quot;bare&quot;&gt;http://logback.qos.ch/xref/ch/qos/logback/access/PatternLayout.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A présent, toutes les requêtes HTTP envoyés à Neo4j seront tracées dans un fichier selon le shema suivant : &lt;code&gt;date;hote;method;url;content;code&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;gatling&quot;&gt;Gatling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez télécharger le bundle Gatling ici : &lt;a href=&quot;http://gatling.io/#/download&quot; class=&quot;bare&quot;&gt;http://gatling.io/#/download&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour son installation, il suffit de le dézipper dans le répertoire de votre choix et d’avoir un JDK7 sur votre ordinateur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et c’est tout, on ne peut pas faire plus simple non ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;création-du-scenario&quot;&gt;Création du scenario&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les scenarii dans Gatling sont du code écrit en Scala avec un DSL simple à prendre en main.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici celui-ci que je vous propose :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;package neo4j

import io.gatling.core.Predef._
import io.gatling.http.Predef._

/**
 * Simple simulation that take the neo4j query file with this :
 * * Pattern : %t{dd/MMM/yyyy:HH:mm:ss Z};%h;%m;%r;%replace(%replace(%replace(%requestContent){'\\', '\\\\'}){';', '\\;'}){'&quot;', '\\&quot;'};%s
 * * Header : date;hote;method;url;content;code
 */
class HttpLogReplaySimulation extends Simulation {

  val httpConf = http
    .baseURL(&quot;http://localhost:7474&quot;)
    .acceptHeader(&quot;application/json, text/plain, */*&quot;)
    .basicAuth(&quot;neo4j&quot;, &quot;admin&quot;)

  val queryFeeder = ssv(&quot;http.log&quot;).convert {
    case (&quot;code&quot;, string) =&amp;gt; string.toInt // transform response code to an int
    case (&quot;url&quot;, string) =&amp;gt; {
      // we only take the uri
      val uri :String = string.replaceFirst(&quot;(GET|POST|PUT|DELETE|OPTIONS) (.*) HTTP(.*)&quot;, &quot;$2&quot;)

      // we make serial transaction query as unique transaction query
      uri.matches(&quot;/db/data/transaction.*&quot;) match {
        case true =&amp;gt;  &quot;/db/data/transaction/commit&quot;
        case false =&amp;gt; uri
      }
    }
  }.circular

  val scn = scenario(&quot;query-log&quot;)
    .feed(queryFeeder)
    .doSwitch(&quot;${method}&quot;) (
      &quot;GET&quot; -&amp;gt; exec(http(&quot;Query-log&quot;)
                .get(&quot;${url}&quot;)
                .body(StringBody(&quot;${content}&quot;))
                .asJSON
                .check(status.is(&quot;${code}&quot;))),
      &quot;POST&quot; -&amp;gt; exec(http(&quot;Query-log&quot;)
        .post(&quot;${url}&quot;)
        .body(StringBody(&quot;${content}&quot;))
        .asJSON
        .check(status.is(&quot;${code}&quot;))),
      &quot;PUT&quot; -&amp;gt; exec(http(&quot;Query-log&quot;)
        .put(&quot;${url}&quot;)
        .body(StringBody(&quot;${content}&quot;))
        .asJSON
        .check(status.is(&quot;${code}&quot;))),
      &quot;DELETE&quot; -&amp;gt; exec(http(&quot;Query-log&quot;)
        .delete(&quot;${url}&quot;)
        .body(StringBody(&quot;${content}&quot;))
        .asJSON
        .check(status.is(&quot;${code}&quot;))),
      &quot;OPTIONS&quot; -&amp;gt; exec(http(&quot;Query-log&quot;)
        .options(&quot;${url}&quot;)
        .body(StringBody(&quot;${content}&quot;))
        .asJSON
        .check(status.is(&quot;${code}&quot;)))
    )

  setUp(
    scn
      .inject(
        rampUsers(100) over (10) // making 100 queries on 10 sec
      )
      .protocols(httpConf)
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour installer ce scenario, il vous suffit d’enregistrer le code dans le fichier &lt;code&gt;HttpLogReplaySimulation.scala&lt;/code&gt; dans le répertoire &lt;code&gt;$GATLING_HOME/user_files/simulations/neo4j&lt;/code&gt; (créer le fichier et les répertoires).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Son comportement est simple, il vient lire un fichier de log http, et exécute les requêtes une à une. Par contre il faut que le fichier de log :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;soit dans le répertoire &lt;code&gt;$GATLING_HOME/user_files/data&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;possède en-tête le header suivant : &lt;code&gt;date;hote;method;url;content;code&lt;/code&gt;. Ceci peut être fait simplement avec la commande unix sed : &lt;code&gt;sed -i -e &quot;1i\date;hote;method;url;content;code&quot; http.log&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ne comporte pas de ligne vide à la fin du fichier&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est à noter que ce scenario &lt;strong&gt;transforme toutes les transactions multi-requêtes en multiple transactions&lt;/strong&gt;, et donc &lt;strong&gt;les rollbacks ne sont pas pris en compte&lt;/strong&gt;. Bref il n’est pas parfait, mais comme évoqué précécemment il est préférable de faire ses propres scenarii si vous voulez quelques de choses aux petits oignons.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lancement-des-tests&quot;&gt;Lancement des tests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A présent, dans le répertoire &lt;code&gt;$GATLING_HOME/user_files&lt;/code&gt; vous devez avoir la structure suivante :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;├── data
│   └── http.log
└── simulations
    └── neo4j
        └── HttpLogReplaySimulation.scala&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant il ne vous reste plus qu’à lancer Gatling vi la commande suivante : &lt;code&gt;bin/gatling.sh&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L’outil va vous poser trois questions :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;le numéro du scenario a exécuter. Choississez celui avec le nom &lt;code&gt;neo4j.HttpLogReplaySimulation&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;le nom de la simulation, celui-ci servira pour la génération du rapport. Laissez le par défaut.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;la description du tir au besoin. Laissez la vide.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois ce questionnaire remplie, Gatling va exécuter son tir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la fin, vous obtenez un rapport en html dans le répertoire &lt;code&gt;$GATLING_HOME/results/httplogreplaysimulation-*&lt;/code&gt;, contenant toutes les résultats du tests :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;le nombre de requête simultanée&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;les différents percentiles, avec la moyenne, le min le max et l’écart-type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;la distribution des temps de réponse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-gatling/gatling-report.png&quot; alt=&quot;gatling report&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 05 Oct 2015 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/Stresser-facilement-votre-base-Neo4j-avec-gatling</link>
        <guid isPermaLink="true">http://localhost:4000/Stresser-facilement-votre-base-Neo4j-avec-gatling</guid>
        
        <category>neo4j, gatling, stress-tool</category>
        
        
      </item>
      
    
  </channel>
</rss>
