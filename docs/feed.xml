<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benoit Simard</title>
    <description>Site de Benoit Simard</description>
    <link>http://www.bsimard.com/</link>
    <atom:link href="http://www.bsimard.com/fr/feed" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 23 Apr 2019 18:09:16 +0200</pubDate>
    <lastBuildDate>Tue, 23 Apr 2019 18:09:16 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>

    
     
      <item>
        <title>Le graphe des licences</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#import-des-données-de-choosealicense-com&quot;&gt;Import des données de choosealicense.com&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#récupérer-le-contenu-du-ficher&quot;&gt;Récupérer le contenu du ficher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#convertir-du-yml-en-json&quot;&gt;Convertir du YML en JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modélisation-en-graphe&quot;&gt;Modélisation en Graphe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-script-final&quot;&gt;Le script final&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ajout-de-données-et-amélioration-du-processus&quot;&gt;Ajout de données et amélioration du processus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#allons-plus-loin&quot;&gt;Allons plus loin !&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#détection-de-communauté&quot;&gt;Détection de communauté&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Des licences en informatiques il y en a beaucoup, et il est souvent dur de s&amp;#8217;y retrouver,
surtout quand comme moi vous n&amp;#8217;avez aucun background juridique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais il existe un site web qui permet de s&amp;#8217;y retrouver : &lt;a href=&quot;https://choosealicense.com&quot;&gt;Choose a license&lt;/a&gt;
Ce qui est bien avec ce site, c&amp;#8217;est que chaque licence y est décrite et qu&amp;#8217;on y retrouve une liste des &lt;strong&gt;permissions&lt;/strong&gt;,
des &lt;strong&gt;conditions&lt;/strong&gt; et des &lt;strong&gt;limitations&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus le contenu du site ou sous licence &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;
et est disponible au format &lt;strong&gt;YAML&lt;/strong&gt; sur &lt;a href=&quot;https://github.com/github/choosealicense.com/tree/gh-pages/_licenses&quot;&gt;github&lt;/a&gt;,
donc parsable pour une machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;import-des-données-de-choosealicense-com&quot;&gt;Import des données de choosealicense.com&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque licence est dans un fichier sur &lt;a href=&quot;https://github.com/github/choosealicense.com/tree/gh-pages/_licenses&quot;&gt;github&lt;/a&gt;,
et donc accessible en HTTP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le détail des opérations pour importer un fichier :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Récupérer tout le contenu d&amp;#8217;un fichier dans une variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transformer le contenu en &lt;code&gt;YML&lt;/code&gt; en &lt;code&gt;JSON&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Importer le &lt;code&gt;JSON&lt;/code&gt; en graphe&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vais réaliser toutes ces étapes avec Cypher et &lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures&quot;&gt;APOC&lt;/a&gt;,
juste parceque c&amp;#8217;est possible que je trouve cela fun et vous permet aussi de voir les possibilités du language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;récupérer-le-contenu-du-ficher&quot;&gt;Récupérer le contenu du ficher&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vu que les fichiers sont accessibles sur github, on peut obtenir le contenu brute des fichiers.
Par exemple : &lt;a href=&quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/afl-3.0.txt&quot; class=&quot;bare&quot;&gt;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/afl-3.0.txt&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comment faire pour récupérer tout le contenu du fichier dans une variable cypher ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et bien on va utiliser &lt;code&gt;apoc.load.csv&lt;/code&gt; et le hacker un peu !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si on considère que le fichier &lt;strong&gt;TXT&lt;/strong&gt; est un fichier &lt;strong&gt;CSV&lt;/strong&gt; ,
on va pouvoir récupérer chaque ligne du fichier si on utilise comme séparateur un charactère improbable : &lt;code&gt;�&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite il suffit de faire de &quot;collecter&quot; les lignes et de les &quot;joindres&quot; avec un retour à la ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais si on regarde bien les fichiers, on constate qu&amp;#8217;ils sont découpés en deux avec une partie &lt;strong&gt;YAML&lt;/strong&gt;
puis le texte de la licence . Ainsi un simple &lt;code&gt;split&lt;/code&gt; sur &lt;code&gt;---&lt;/code&gt; devrait suffir pour obtenir uniquement la partie &lt;strong&gt;YAML&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce qui donne :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;---
CALL apoc.load.csv(
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/0bsd.txt&quot;,
  { header:false, sep:'�', quoteChar:'¤' }
) yield list
WITH apoc.convert.toString(list[0]) AS line
WITH collect(line) AS lines
WITH reduce(s='', x in lines | s + x + &quot;\n&quot;) AS txt
RETURN split(txt, '---')[1] AS yaml
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et en plus compact :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;---
CALL apoc.load.csv(
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/0bsd.txt&quot;,
  { header:false, sep:'�', quoteChar:'¤' }
) yield list
RETURN split(reduce(s='', x in collect(apoc.convert.toString(list[0])) | s + x + &quot;\n&quot;), '---')[1] AS yaml
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;convertir-du-yml-en-json&quot;&gt;Convertir du YML en JSON&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;existe pas de function dans APOC qui permet de lire du YML.
Par contre on peut utiliser une API en ligne qui peut le faire : &lt;a href=&quot;https://www.json2yaml.com&quot; class=&quot;bare&quot;&gt;https://www.json2yaml.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il suffit de faire un &lt;code&gt;POST&lt;/code&gt; sur l&amp;#8217;url &lt;a href=&quot;https://www.json2yaml.com/api/j2y&quot; class=&quot;bare&quot;&gt;https://www.json2yaml.com/api/j2y&lt;/a&gt; avec en payload le YAML (encodé) et en retour on reçoit du JSON.
Et justement dans APOC il y a une procédure qui permet d&amp;#8217;appeler une API et de parser le JSON : &lt;code&gt;apoc.load.jsonParams&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici ce que cela donne :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH &quot;
---
json:
  - rigid
  - better for data interchange
yaml:
  - slim and flexible
  - better for configuration&quot;
AS yaml
CALL apoc.load.jsonParams('https://www.json2yaml.com/api/y2j', {method:'POST'}, &quot;q=&quot; + replace(yaml, ';', '%3B')) YIELD value
RETURN value&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et si combine cette requête avec la première, on obtient :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.load.csv(
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/0bsd.txt&quot;,
  { header:false, sep:'�', quoteChar:'¤' }
) yield list
split(reduce(s='', x in collect(apoc.convert.toString(list[0])) | s + x + &quot;\n&quot;), '---')[1] AS yaml

CALL apoc.load.jsonParams('https://www.json2yaml.com/api/y2j', {method:'POST'}, &quot;q=&quot; + replace(yaml, ';', '%3B')) YIELD value
RETURN value&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce qui nous renvoie le résultat suivant :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;how&quot;: &quot;Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.  Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders. You may take the additional step of removing the copyright notice.&quot;,
  &quot;using&quot;: [
    {
      &quot;PickMeUp&quot;: &quot;https:\/\/github.com\/nazar-pc\/PickMeUp\/blob\/master\/copying.md&quot;
    },
    {
      &quot;smoltcp&quot;: &quot;https:\/\/github.com\/m-labs\/smoltcp\/blob\/master\/LICENSE-0BSD.txt&quot;
    },
    {
      &quot;Toybox&quot;: &quot;https:\/\/github.com\/landley\/toybox\/blob\/master\/LICENSE&quot;
    }
  ],
  &quot;spdx-id&quot;: &quot;0BSD&quot;,
  &quot;permissions&quot;: [
    &quot;commercial-use&quot;,
    &quot;distribution&quot;,
    &quot;modifications&quot;,
    &quot;private-use&quot;
  ],
  &quot;description&quot;: &quot;The BSD Zero Clause license goes further than the BSD 2-Clause license to allow you unlimited freedom with the software without requirements to include the copyright notice, license text, or disclaimer in either source or binary forms.&quot;,
  &quot;title&quot;: &quot;BSD Zero Clause License&quot;,
  &quot;conditions&quot;: [

  ],
  &quot;limitations&quot;: [
    &quot;liability&quot;,
    &quot;warranty&quot;
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;custom-cypher-function-procedure&quot;&gt;Custom Cypher function, procedure&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vu que la lecture du YAML est contraignante à écrire en Cypher et qu&amp;#8217;on va l&amp;#8217;utiliser plusieurs fois,
je vous propose d&amp;#8217;écrire une &lt;a href=&quot;https://neo4j-contrib.github.io/neo4j-apoc-procedures/#cypher-based-procedures-functions&quot;&gt;Custom Cypher Function&lt;/a&gt; avec APOC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci nous permet d&amp;#8217;écrire une fonction qu&amp;#8217;on pourra appeler plus tard, directement avec du cypher.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici comment définir notre fonction personnalisé :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.custom.asFunction(
  'loadYml',
  'CALL apoc.load.csv(
    $url,
    { header:false, sep:&quot;�&quot;, quoteChar:&quot;¤&quot; }
   ) yield list
   WITH  reduce(s=&quot;&quot;, x in collect(apoc.convert.toString(list[0])) | s + x + &quot;\n&quot;) AS yaml
   CALL apoc.load.jsonParams(&quot;https://www.json2yaml.com/api/y2j&quot;, {method:&quot;POST&quot;}, &quot;q=&quot; + replace(replace(trim(yaml), &quot;;&quot;, &quot;%3B&quot;), &quot; &quot;, &quot;+&quot;)) YIELD value
   RETURN value',
   'MAP',
   [['url','STRING', '']],
   true,
   &quot;LOAD a YAML file&quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A présent nous pouvons appeler notre fonction pour charger notre fichier YML :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;RETURN custom.loadYml(&quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/0bsd.txt&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il nous reste plus qu&amp;#8217;à transformer ce JSON en graph !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;modélisation-en-graphe&quot;&gt;Modélisation en Graphe&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vous propose la modélisation suivante :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Failed to generate image: dot failed: Error: &amp;lt;stdin&amp;gt;: syntax error in line 9 near '\'

digraph finite_state_machine {
    rankdir=LR;
    node [
         shape = Mrecord
    ];

    // NODES
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    LICENSE [label = &quot;License | id:String* \lname: String \ldescription: String* \lurl&quot;String \lhow_to_apply: String* \lnote: String\l&quot; ];
    PROJECT [label = &quot;Project | name:String* \lurl: String \l&quot; ];
    PERMISSION [label = &quot;Permission | id:String* \lname: String \ldescription: String\l&quot;];
    CONDITION [label = &quot;Condition | id:String* \lname: String* \ldescription: String\l&quot;];
    LIMITATION [label = &quot;Limitation | id:String* \lname: String* \ldescription: String\l&quot;];


    // EDGES
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    PROJECT-&amp;gt;LICENSE [label = &quot;USES&quot;];
    LICENSE-&amp;gt;PERMISSION [label = &quot;HAS_PERMISSION&quot;];
    LICENSE-&amp;gt;CONDITION [label = &quot;HAS_CONDITION&quot;];
    LICENSE-&amp;gt;LIMITATION [label = &quot;HAS_LIMITATION&quot;];
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Premièrement, il faut créer les contraintes d&amp;#8217;unicités :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE CONSTRAINT ON (n:License) ASSERT n.id IS UNIQUE;
CREATE CONSTRAINT ON (n:Project) ASSERT n.name IS UNIQUE;
CREATE CONSTRAINT ON (n:Permission) ASSERT n.id IS UNIQUE;
CREATE CONSTRAINT ON (n:Condition) ASSERT n.id IS UNIQUE;
CREATE CONSTRAINT ON (n:Limitation) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Puis avec le JSON obtenu précédemment, il faut créer le script cypher pour obtenir la modélisation :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;MERGE (license:License { id:json.`spdx-id` })
  ON CREATE SET
    license.name = json.title,
    license.description = json.description,
    license.url = 'https://spdx.org/licenses/' + json.`spdx-id` + '.html',
    license.how_to_apply = json.how,
    license.note = json.note

WITH license, json
UNWIND json.permissions AS permissionTxt
  MERGE (permission:Permission {id:permissionTxt})
  MERGE (license)-[:HAS_PERMISSION]-&amp;gt;(permission)

WITH license, json
UNWIND json.conditions AS conditionTxt
  MERGE (condition:Condition {id:conditionTxt})
  MERGE (license)-[:HAS_CONDITION]-&amp;gt;(condition)

WITH license, json
UNWIND json.limitations AS limitationTxt
  MERGE (limitation:Limitation {id:limitationTxt})
  MERGE (license)-[:HAS_LIMITATION]-&amp;gt;(limitation)

WITH license, json
UNWIND json.using AS project
  WITH keys(project)[0] AS name, project[keys(project)[0]] AS url, license
  MERGE (project:Project {name:name })
    ON CREATE SET project.url=url
  MERGE (project)-[:USES]-&amp;gt;(license)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-script-final&quot;&gt;Le script final&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A présent on a toutes les briques pour faire notre import final.
Pour ce faire il suffit de combiner nos scripts ensemble et de boucler sur les URL des fichiers de licence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH
[
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/0bsd.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/afl-3.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/agpl-3.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/apache-2.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/artistic-2.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/bsd-2-clause.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/bsd-3-clause-clear.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/bsd-3-clause.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/bsl-1.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/cc-by-4.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/cc-by-sa-4.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/cc0-1.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/ecl-2.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/epl-1.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/epl-2.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/eupl-1.1.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/eupl-1.2.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/gpl-2.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/gpl-3.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/isc.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/lgpl-2.1.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/lgpl-3.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/lppl-1.3c.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/mit.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/mpl-2.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/ms-pl.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/ms-rl.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/ncsa.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/ofl-1.1.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/osl-3.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/postgresql.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/unlicense.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/upl-1.0.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/wtfpl.txt&quot;,
  &quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/zlib.txt&quot;
] AS files
UNWIND files as file

WITH custom.loadYml(file) AS json
WITH json.value AS json

MERGE (license:License { id:json.`spdx-id` })
  ON CREATE SET
    license.name = json.title,
    license.description = json.description,
    license.url = 'https://spdx.org/licenses/' + json.`spdx-id` + '.html',
    license.how_to_apply = json.how,
    license.note = json.note

FOREACH( permissionTxt IN json.permissions |
  MERGE (permission:Permission {id:permissionTxt})
  MERGE (license)-[:HAS_PERMISSION]-&amp;gt;(permission)
)

FOREACH( conditionTxt IN json.conditions |
  MERGE (condition:Condition {id:conditionTxt})
  MERGE (license)-[:HAS_CONDITION]-&amp;gt;(condition)
)

FOREACH( limitationTxt IN json.limitations |
  MERGE (limitation:Limitation {id:limitationTxt})
  MERGE (license)-[:HAS_LIMITATION]-&amp;gt;(limitation)
)

FOREACH( proj IN json.using |
  MERGE (project:Project {name: keys(proj)[0] })
    ON CREATE SET project.url = project[keys(proj)[0]]
  MERGE (project)-[:USES]-&amp;gt;(license)
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ajout-de-données-et-amélioration-du-processus&quot;&gt;Ajout de données et amélioration du processus&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur le github du projet, on peut trouver un autre fichier YAML avec le descriptif de chaque permissions, conditions et limitations.
Ce serait pas mal de l&amp;#8217;importer, surtout maintenant qu&amp;#8217;on sait comment faire !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le script :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH custom.loadYml(&quot;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_data/rules.yml&quot;) AS json
WITH json.value AS json

FOREACH( condition IN json.conditions |
  MERGE (c:Condition { id: condition.tag})
  SET c.name = condition.label,
      c.description = condition.description
)

FOREACH( permission IN json.permissions |
  MERGE (p:Permission { id: permission.tag})
  SET p.name = permission.label,
      p.description = permission.description
)

FOREACH( limitation IN json.limitations |
  MERGE (l:Limitation { id: limitation.tag})
  SET l.name = limitation.label,
      l.description = limitation.description
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;allons-plus-loin&quot;&gt;Allons plus loin !&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aimerai bien ajouter plus de données dans ce graphe comme la compabilité entre les licences, ou la reconnaissance des licences par des organisme (FSF, Linux Fondation, &amp;#8230;&amp;#8203;)
Mais je n&amp;#8217;ai pas trouvé d&amp;#8217;autres jeux de données exploitable par informatique&amp;#8230;&amp;#8203;
Si vous en connaissez je suis preneur !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;détection-de-communauté&quot;&gt;Détection de communauté&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En attendant, un petit truc sympa qu&amp;#8217;on peut faire avec notre jeux de données, c&amp;#8217;est de la recherche de communauté entre ces licences.
Neo4j dispose d&amp;#8217;un plugin de &lt;a href=&quot;https://neo4j.com/docs/graph-algorithms/current/algorithms/&quot;&gt;graph-algo&lt;/a&gt; que vous pouvez installer.
Celui-ci dispose de plusieurs algorithmes de détection de communauté, et je vais vous montrer comment utiliser celui de &lt;a href=&quot;https://fr.wikipedia.org/wiki/M%C3%A9thode_de_Louvain&quot;&gt;Louvain&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour utiliser une procédure de &lt;strong&gt;graph-algo&lt;/strong&gt; il faut à chaque fois définir deux requêtes :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La requête qui renvoie les noeuds qui nous intéressent. Ici on va prendre les noeuds &lt;code&gt;License&lt;/code&gt;, et donc la requête est &lt;code&gt;MATCH (l:License) RETURN id(l) AS id&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La requête de projection qui permet de créer les relations entre les noeuds sélectionnés.
Dans notre cas, on va dire que deux noeuds licences sont reliés s&amp;#8217;ils partagent une même &lt;strong&gt;permission&lt;/strong&gt;, &lt;strong&gt;limitation&lt;/strong&gt; ou &lt;strong&gt;condition&lt;/strong&gt; : 'MATCH (l1:License)-&amp;#8594;()&amp;#8592;-(l2:License) WHERE id(l1)&amp;lt; id(l2) RETURN id(l1) as source, id(l2) as target'.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;CALL algo.louvain(
  'MATCH (l:License) RETURN id(l) as id',
  'MATCH (l1:License)--&amp;gt;()&amp;lt;--(l2:License) WHERE id(l1)&amp;lt; id(l2) RETURN id(l1) as source, id(l2) as target',
  {
    graph: 'cypher',
    write:true,
    writeProperty:'community'
  }
);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur notre dataset le résultat est instantané, mais sachez que ce plugin est développé pour être utilisé sur de grand datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;algorithme a détecté &lt;strong&gt;deux&lt;/strong&gt; communautés&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Communauté 1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Communauté 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;MATCH (l:License) WHERE l.community=0 RETURN l.name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;MATCH (l:License) WHERE l.community=1 RETURN l.name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BSD Zero Clause License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BSD 2-Clause &quot;Simplified&quot; License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BSD 3-Clause Clear License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boost Software License 1.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creative Commons Zero v1.0 Universal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ISC License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU Lesser General Public License v2.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MIT License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;University of Illinois/NCSA Open Source License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SIL Open Font License 1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Unlicense&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do What The F*ck You Want To Public License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zlib License&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Academic Free License v3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU Affero General Public License v3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache License 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Artistic License 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creative Commons Attribution 4.0 International&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creative Commons Attribution Share Alike 4.0 International&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Educational Community License v2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eclipse Public License 1.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eclipse Public License 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;European Union Public License 1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;European Union Public License 1.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU General Public License v2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU General Public License v3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU Lesser General Public License v3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LaTeX Project Public License v1.3c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mozilla Public License 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft Public License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft Reciprocal License&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open Software License 3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Universal Permissive License v1.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après faut analyser les communautés pour pouvoir les comprendre,
mais déjà on constate que les licences BSD sont à gauches et les GPL à droite.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce billet est juste un exemple pour vous montrer la simplicité d&amp;#8217;utilisation de cette librairie
et de voir ce qu&amp;#8217;il est possible de réaliser avec Neo4j.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je reitère, mais si vous savez où trouver de la données pour aggrémenter ce dataset,
et/ou si vous avez des idées d&amp;#8217;analyse, n&amp;#8217;hésitez pas à me le signaler !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 18 Apr 2019 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2019/04/18/graph-licenses.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2019/04/18/graph-licenses.html</guid>
        
        
        <category>graphe</category>
        
        <category> licence</category>
        
        <category> neo4j</category>
        
        <category> open-source</category>
        
        <category> libre</category>
        
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Libérer la puissance des graphes avec GraphQL et Neo4j</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici la vidéo de ma présentation au JUG SUmmer Camp sur GraphQL :&lt;/p&gt;
&lt;/div&gt;
&lt;iframe class=&quot;prez&quot; src=&quot;http://www.youtube.com/embed/n7q8QzO3ncY&quot; &gt;
&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et les slides sont ici : &lt;a href=&quot;https://sim51.github.io/presentations/graphql-neo4j/&quot; class=&quot;bare&quot;&gt;https://sim51.github.io/presentations/graphql-neo4j/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 14 Sep 2018 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2018/09/14/fr-graphql-et-neo4j.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2018/09/14/fr-graphql-et-neo4j.html</guid>
        
        
        <category>JUGSummerCamp</category>
        
        <category> Neo4j</category>
        
        <category> graphe</category>
        
        <category> graphql</category>
        
        <category> apollo</category>
        
        
        
      </item>
      
    
     
    
     
      <item>
        <title>[EN] importez vos données dans Neo4j grâce a Kettle</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#kettle&quot;&gt;Kettle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-connector&quot;&gt;Neo4j connector&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#how-to-install-it&quot;&gt;How to install it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#components&quot;&gt;Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-cypher&quot;&gt;Neo4j Cypher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j-output&quot;&gt;Neo4j Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Cet article est pour l&amp;#8217;instant que en Anglais. Si vous le souhaitez je peux le traduire en français. Pour me motiver a le faire, laissez un commentaire !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kettle&quot;&gt;Kettle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kettle (or Pentaho Data Integration) is a well known ETL tool.
It is mature tool, simple to learn due to its GUI and open-source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, Kettle has a lot of plugins for all various data editors, so can really do every thing you want with your data.
In this post, I will show you how to use the Neo4j components, but firstly, you need to have ketlle on your computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install kettle, it&amp;#8217;s pretty easy, you only need a JDK installed on your laptop (&amp;gt;= version 8), and then follow those steps :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the last binaries at this location : &lt;a href=&quot;https://sourceforge.net/projects/pentaho/files/Data%20Integration/7.1/&quot; class=&quot;bare&quot;&gt;https://sourceforge.net/projects/pentaho/files/Data%20Integration/7.1/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;spoon.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Spoon is the application name of the graphic interface on which you will design your process
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;neo4j-connector&quot;&gt;Neo4j connector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some Neo4j connectors on the Kettle marketplace, but I strongly recommend you to use this one : &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output&quot; class=&quot;bare&quot;&gt;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output&lt;/a&gt;
It is efficient, updated and maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is based on the official Neo4j Java Driver and have all the options you want to import your data in Neo4j, even on a cluster environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For now, this plugin is not on the marketplace but it will be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to-install-it&quot;&gt;How to install it&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go to this page &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/releases/&quot; class=&quot;bare&quot;&gt;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/releases/&lt;/a&gt;, and get the latest release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip it into the &lt;code&gt;plugins&lt;/code&gt; folder of your Kettle installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart spoon&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin comes with 2+1 components :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Cypher :&lt;/strong&gt; a very useful component where you can write a cypher query, and it  can be used as an input or output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Output :&lt;/strong&gt; allow you to dynamically create (or update) nodes or relationships. It will generate the cypher query for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neo4j Graph Output:&lt;/strong&gt; By doing a graph mapping on the input fields, it will create/update the graph for you. But this component is in &lt;strong&gt;WIP&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-cypher&quot;&gt;Neo4j Cypher&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is (from my POV) the main component of this plugin (I&amp;#8217;m a Cypher expert, so I like to write my own query ^^).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-cypher.png&quot; alt=&quot;kettle neo4j cypher&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing you need to do is to declare a &lt;strong&gt;Neo4j connection&lt;/strong&gt;.
If you have previously declare a Neo4j connection you can reuse it, otherwise you need to create a new one by fulfill this form :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-connection.png&quot; alt=&quot;kettle neo4j connection&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the connection is using the &lt;strong&gt;Bolt&lt;/strong&gt; protocol, and you can also configure a cluster connection with a routing policy.
So it&amp;#8217;s really complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;batch size&lt;/code&gt; parameter allow you define the size of your transaction.
In my example, Every 500 rows the component will do a commit.
This is really important to control the transaction size during an import process, to have the best performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your Cypher query can be totally dynamic, ie, can be defined from an input field. To do it,  you just have to enable the &lt;code&gt;Get Cypher from input field?&lt;/code&gt; and then specify the &lt;code&gt;Cypher input field&lt;/code&gt;.
Otherwise, you have to write your query in the &lt;code&gt;Cypher&lt;/code&gt; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another good point is that the component allows you to use query parameters.
In my example, &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$year&lt;/code&gt; come from the input fields.
As you can see, I have defined them into the &lt;code&gt;Parameters&lt;/code&gt; section, just below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And last point, If you want to use this component as an &lt;strong&gt;Input&lt;/strong&gt; one, you have to define the &lt;code&gt;Returns&lt;/code&gt; section with the name and type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, you have the hand on everything to create an efficient import process.
The only lacks are in the UI (because I&amp;#8217;m a lazy person ^^), where I would like to have :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a &lt;strong&gt;Get Fields&lt;/strong&gt; button on the &lt;code&gt;Parameters&lt;/code&gt; section, to fulfill it with all the input fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;strong&gt;compute return values&lt;/strong&gt; button to automatically fulfill the &lt;code&gt;Return&lt;/code&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/knowbi/knowbi-pentaho-pdi-neo4j-output/issues/22&quot;&gt;github issue&lt;/a&gt;  is already created, and &lt;a href=&quot;https://github.com/mattcasters&quot;&gt;Matt Caster&lt;/a&gt; (the father of Kettle and one of the dev. of this plugin) is on it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j-output&quot;&gt;Neo4j Output&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component allow you to create nodes and relationships without writing a cypher query, it will do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-from.png&quot; alt=&quot;kettle neo4j output from&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use it if you have Input fields define :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A node : you have to use only the &lt;code&gt;From Node&lt;/code&gt; tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two nodes plus the relationship between them : you have to define the &lt;code&gt;From node&lt;/code&gt;, &lt;code&gt;To node&lt;/code&gt; and &lt;code&gt;Relationship&lt;/code&gt; tabulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Same as before, you can define the &lt;code&gt;Batch size&lt;/code&gt;, and moreover you can also tell the component to create the Neo4j &lt;strong&gt;UNIQUE CONSTRAINTS&lt;/strong&gt; for you if you enable the &lt;code&gt;Create indexes?&lt;/code&gt; and specify the &lt;code&gt;Primary&lt;/code&gt; fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component has been designed to have the best performances for Neo4j.
For example if you create nodes with a batch size, the component will collect your input fields in an array and generate a query like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;WITH $data
UNWIND $data as $object
  CREATE ....&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you will not have many queries, but only one that match your batch size.
This is really cool for performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;example-for-nodes-and-relationship&quot;&gt;Example for nodes and relationship&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you have the following input fields : &lt;code&gt;label, id, name, parent_id, type&lt;/code&gt;
What you want to do is to create :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a node with the label &lt;code&gt;label&lt;/code&gt; and with the properties &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a relationship between the current node and its &lt;code&gt;parent_id&lt;/code&gt; with the type &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you need to fulfill the component by following those screenshots&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-from.png&quot; alt=&quot;From node tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-to.png&quot; alt=&quot;To node tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-neo4j-output-rel.png&quot; alt=&quot;relationship tabulation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
don&amp;#8217;t use the &lt;code&gt;CREATE&lt;/code&gt; mode for such a process, otherwise the &lt;code&gt;To&lt;/code&gt; node will be created each time.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This component needs to have an input field for the label of nodes and for the relationship type.
If you don&amp;#8217;t have one because those value are static, you can use the &lt;code&gt;Add constants&lt;/code&gt; component that allows you to a constant field to the fields :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-constant.png&quot; alt=&quot;kettle constant&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the &lt;code&gt;MERGE&lt;/code&gt; mode, sometimes it is useful to define a default value for the &lt;em&gt;property&lt;/em&gt; on which do the merge.
To do it, you can use the &lt;code&gt;Value Mapper&lt;/code&gt; component like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/neo4j-kettle/kettle-map.png&quot; alt=&quot;kettle map&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;in this example, if the &lt;code&gt;parent_id&lt;/code&gt; is not set, I replace it with the value &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post is just an overview of Kettle, but as you can see its integration with Neo4j is really easy.
I recommend you to test it, and if you have questions, requests or issues, don&amp;#8217;t hesitate to create an issue on the github repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have fun, and boil your graph imports !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 03 Sep 2018 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2018/09/03/fr-kettle-neo4j.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2018/09/03/fr-kettle-neo4j.html</guid>
        
        
        <category>Kettle</category>
        
        <category> neo4j</category>
        
        <category> ETL</category>
        
        
        
      </item>
      
    
     
    
     
      <item>
        <title>[EN] Monitoring Neo4j with influxdb TICK stack</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#influxdb&quot;&gt;Influxdb&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#concept&quot;&gt;Concept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-tick-stack&quot;&gt;The TICK stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-architecture&quot;&gt;The architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-monitored-server&quot;&gt;The monitored server&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#neo4j&quot;&gt;Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#telegraf&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-monitoring-server&quot;&gt;The monitoring server&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#installation-2&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#influxdb-2&quot;&gt;InfluxDb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#telegraf-2&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chronograf&quot;&gt;Chronograf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kapacitor&quot;&gt;Kapacitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Cet article est pour l&amp;#8217;instant que en Anglais. Si vous le souhaitez je peux le traduire en français. Pour me motiver a le faire, laissez un commentaire !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you push a service in production, it&amp;#8217;s really important to monitor its health status.
This will allow you to see if everything is OK,
to be alerted if something is going wrong but also in a case of a problem, to investigate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This rule should be applied for &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, and you will see how to do it with the &lt;strong&gt;TICK&lt;/strong&gt; stack (from &lt;a href=&quot;http://influxdata.com/&quot;&gt;influxDB&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But before to explain how to do it for &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, lets talk a little about Influxdb.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;influxdb&quot;&gt;Influxdb&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;concept&quot;&gt;Concept&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.influxdata.com&quot;&gt;Influx DB&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_series_database&quot;&gt;time series database&lt;/a&gt;.
It&amp;#8217;s made to store and query data in times, so it&amp;#8217;s the perfect tool to store metrics of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Influx has &lt;strong&gt;7 key concepts&lt;/strong&gt; : &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;measurement&lt;/code&gt;, &lt;code&gt;series&lt;/code&gt;, &lt;code&gt;retention policy&lt;/code&gt; and &lt;code&gt;continous queries&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s better to take an example to understand those concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that you have a captor of temperature and humidity in your living room and an other one in your bedroom.
Each time you will read one, you will receive the data at a point of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it&amp;#8217;s the same kind of data, you will store them at the same location.
But you also want to be able to distinguish the data from the living room and the bedroom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end, you will have something like that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: captor_temperature_humidity
----------------------------------
time                    temperature   humidity   room
2015-08-18T00:00:00Z    18.3          51.2       Living Room
2015-08-18T00:00:00Z    16.7          48.9       Bedroom
2015-08-18T00:01:00Z    18.5          51.1       Living Room
2015-08-18T00:01:02Z    16.9          49.0       Bedroom
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we have a &lt;strong&gt;measurement name&lt;/strong&gt; called &lt;code&gt;captor_temperature_humidity&lt;/code&gt; (you can think about it like a table in SQL) and each line is &lt;strong&gt;measurement&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Measurement&lt;/strong&gt; is composed of : &lt;code&gt;time&lt;/code&gt; , &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;humidity&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Temperature&lt;/strong&gt; and &lt;strong&gt;humidity&lt;/strong&gt; are measurement&amp;#8217;s &lt;strong&gt;fields&lt;/strong&gt;, and their values are the data you want to follow in time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On each measurement, I have added the &lt;strong&gt;room&lt;/strong&gt; to know where comes the measurement. It&amp;#8217;s a measurement&amp;#8217;s &lt;strong&gt;tag&lt;/strong&gt; (a metadata), and you can have multiple tags for a measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the time, you will have a very huge number of measurement, and usually you don&amp;#8217;t want to save them forover.
It&amp;#8217;s where the concept of &lt;strong&gt;retention policy&lt;/strong&gt; takes place,
you can configure the database  to delete measurements older than X (X is hours, days, weeks, &amp;#8230;&amp;#8203;, years).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE RETENTION POLICY one_week ON my_database DURATION 1w;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The default &lt;strong&gt;retention policy&lt;/strong&gt; is to keep the data forever.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, you can define some &lt;strong&gt;continious queries&lt;/strong&gt; to aggregate measurements over time. it will create a new (aggregated) measurement on the same database but with a new retention policy :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE CONTINUOUS QUERY &quot;my_continious_query&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(&quot;temperature&quot;) INTO &quot;my_database&quot;.&quot;one_week&quot;.&quot;average_temperature&quot; FROM &quot;captor_temperature_humidity&quot; GROUP BY time(1h)
END&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So with the help of &lt;strong&gt;retention policies&lt;/strong&gt; and &lt;strong&gt;continious queries&lt;/strong&gt;, you can downsampling the data with somehting similar as that :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;keep the fine data for 1 week&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregate per minute for data between one week and one month&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregate per 10 minutes for data older than a month&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This give those retention policies :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE RETENTION POLICY &quot;1_week&quot; ON &quot;my_database&quot; DURATION 7d REPLICATION 1 DEFAULT
CREATE RETENTION POLICY &quot;1_month&quot; ON &quot;my_database&quot; DURATION 30d REPLICATION 1
CREATE RETENTION POLICY &quot;forever&quot; ON &quot;my_database&quot; DURATION INF REPLICATION 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And those continuous query :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;CREATE CONTINUOUS QUERY &quot;cq_1min_1month&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(*) INTO &quot;my_database&quot;.&quot;1_month&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(60s),*
END;
CREATE CONTINUOUS QUERY &quot;cq_1min_1month&quot; ON &quot;my_database&quot;
BEGIN
  SELECT mean(*) INTO &quot;my_database&quot;.&quot;forever&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(600s),*
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-tick-stack&quot;&gt;The TICK stack&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TICK stack&lt;/strong&gt; is composed of :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Telegraf :&lt;/strong&gt; an agent that collects metrics, and write them in an influx database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Influx :&lt;/strong&gt; the time series database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chronograf :&lt;/strong&gt; a front-end applicatino that allow you to explore your data and to create dashboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kapacitor :&lt;/strong&gt; an alerting system&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a complete stack to collect, manage and exploit your time series data, so it&amp;#8217;s perfect for my goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;The architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally there is a server where all the metrics are a centralized, and where all the monitoring application are installed.
I will call it the &lt;strong&gt;Monitoring server&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This server will save all the metrics fron your system, and to do it there is two methods :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;push&lt;/strong&gt; : metrics are directly pushed to the monitoring server by using an agent on each server that you want to monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pull&lt;/strong&gt; : the monitoring system will query all your servers to collect the metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, the first solution is prefered, and it&amp;#8217;s the one that I will put in place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the architecture schema :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/diag/diag-f2e5f75f5280dc00917b791b23c08a79.png&quot; alt=&quot;diag f2e5f75f5280dc00917b791b23c08a79&quot; width=&quot;440&quot; height=&quot;216&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In red you have the monitoring server, and in grey the monitored server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
With this kind of architecture, Neo4j send metrics locally, so it&amp;#8217;s very fast.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-monitored-server&quot;&gt;The monitored server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;neo4j&quot;&gt;Neo4j&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In its &lt;strong&gt;Enterprise Edition&lt;/strong&gt;, Neo4j has a &lt;a href=&quot;https://neo4j.com/docs/operations-manual/current/monitoring/metrics/&quot;&gt;monitoring system&lt;/a&gt;.
In fact there is four ways to monitor it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JMX :&lt;/strong&gt; it&amp;#8217;s a standard java functionnality that allow you to retrive some metrics values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Graphite connector :&lt;/strong&gt; you just have to configure your Graphana server, and Neo4j will send its metrics regulary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prometheus connector :&lt;/strong&gt; same as for Graphite but for Prometheus time series database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSV file :&lt;/strong&gt;  Neo4j dumps all its metrics at a regular time interval&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Telegraf&lt;/strong&gt; is compatible with the Graphite protocol, so I will use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration is really simple, just edit your &lt;code&gt;neo4j.conf&lt;/code&gt; file and put at the end those lines :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;# Setting for enabling all supported metrics.
metrics.enabled=true
# Setting for enabling all Neo4j specific metrics.
metrics.neo4j.enabled=true
# Setting for exposing metrics about transactions; number of transactions started, committed, etc.
metrics.neo4j.tx.enabled=true
# Setting for exposing metrics about the Neo4j page cache; page faults, evictions, flushes and exceptions, etc.
metrics.neo4j.pagecache.enabled=true
# Setting for exposing metrics about approximately entities are in the database; nodes, relationships, properties, etc.
metrics.neo4j.counts.enabled=true
# Setting for exposing metrics about the network usage of the HA cluster component.
metrics.neo4j.network.enabled=true
# Enable the Graphite integration. Default is 'false'.
metrics.graphite.enabled=true
# The IP and port of the Graphite server on the format &amp;lt;hostname or IP address&amp;gt;:&amp;lt;port number&amp;gt;.
# The default port number for Graphite is 2003.
metrics.graphite.server=localhost:2003
# How often to send data. Default is 3 seconds.
metrics.graphite.interval=3s
# Prefix for Neo4j metrics on Graphite server.
metrics.prefix=MyHost&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like you see, I just :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enable the metrics feature and also each familly metric.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable the graphite integration, and configure its location, time interval and the prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You don&amp;#8217;t have to change anything, except the &lt;code&gt;metrics.prefix&lt;/code&gt;. This value will be used as the host identifier in metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;telegraf&quot;&gt;Telegraf&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many ways to install Telegraf on your system, and you can check directly on &lt;a href=&quot;https://docs.influxdata.com/telegraf/v1.6/introduction/installation/#installation&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My prefer OS is &lt;strong&gt;debian&lt;/strong&gt;, so I will show you how to do on it :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add the influxdb repository key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add the repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;perfom an update&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install the package &lt;code&gt;telegraf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo &quot;deb https://repos.influxdata.com/debian jessie stable&quot; | tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install telegraf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All &lt;strong&gt;Telegraf&lt;/strong&gt;'s configuration is located in the file &lt;code&gt;/etc/telegraf/telegraf.conf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Firstly we need tell Telegraf to be able to act as a graphite server :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[inputs.socket_listener]]
  service_address = &quot;tcp://:2003&quot;
  separator = &quot;.&quot;
  data_format = &quot;graphite&quot;
  templates = [
    &quot;*.neo4j.*.* host.measurement.measurement.field* name=neo4j,vlan=testing&quot;,
    &quot;*.vm.*.* host.measurement.measurement.field* name=neo4j,vlan=testing&quot;
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think it&amp;#8217;s easy to understand, except for the &lt;code&gt;templates&lt;/code&gt; part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in graphite all metrics follow a schema like this one &lt;code&gt;MyHost.neo4j.bolt.messages_done 10&lt;/code&gt;.
So we need to tell &lt;strong&gt;Telegraf&lt;/strong&gt; how to parse it to find the field measurement, the value,  and tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The part &lt;code&gt;*.neo4j.*.*&lt;/code&gt; is a filter. If a line match this pattern, then it will parsed with &lt;code&gt;host.measurement.measurement.field*&lt;/code&gt;.
With the example &lt;code&gt;MyHost.neo4j.bolt.messages_done 10&lt;/code&gt;, we will have :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tags: &lt;code&gt;MyHost&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measurement: &lt;code&gt;neo4j.bolt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field: &lt;code&gt;messages_done&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value: &lt;code&gt;10&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, at the end of each template you can see this &lt;code&gt;name=neo4j,vlan=testing&lt;/code&gt;.
It&amp;#8217;s a list of static tags that will be added to each metric.
This can be really useful if you want to monitor multiple Neo4j server (like a cluster).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, now we have the metrics, but we need to push them to our centralized &lt;strong&gt;influx&lt;/strong&gt; database.
For this, you need to configure &lt;strong&gt;Telegraf&lt;/strong&gt; like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  urls = [&quot;http://10.0.0.12:8086&quot;]

  ## The target database for metrics; will be created as needed.
  database = &quot;telegraf&quot;

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.
  retention_policy = &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You just have to change the &lt;code&gt;urls&lt;/code&gt; property with yours (in my case &lt;code&gt;&lt;a href=&quot;http://10.0.0.12:8086&quot; class=&quot;bare&quot;&gt;http://10.0.0.12:8086&lt;/a&gt;&lt;/code&gt;), and optionnally the database name (by default it&amp;#8217;s &lt;code&gt;telegraf&lt;/code&gt;) and the rentention policy you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In the general section of the configuration, you can configure the batch size if you want.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-monitoring-server&quot;&gt;The monitoring server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation-2&quot;&gt;Installation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On this server we will install : InfluxDb, Chronograf, Kapacitor and Telegraf (to monitor the monitoring system ^^)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will follow the same process as explained on the installation of &lt;strong&gt;Telegraf&lt;/strong&gt; : via &lt;strong&gt;apt&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo &quot;deb https://repos.influxdata.com/debian jessie stable&quot; | tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install telegraf influxdb chronograf kapacitor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;influxdb-2&quot;&gt;InfluxDb&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I change nothing in the default configuration of &lt;strong&gt;Influxdb&lt;/strong&gt;,
The only thing I will do it&amp;#8217;s to create a database &lt;code&gt;telegraf&lt;/code&gt; with a custom retention policy that keep the data for 3 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this I will use the &lt;strong&gt;Influxdb&lt;/strong&gt; CLI,  &lt;code&gt;sudo influx&lt;/code&gt;, and typing those commands :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;CREATE DATABASE telegraf
USE telegraf
CREATE RETENTION POLICY &quot;3_month&quot; ON &quot;monitoring&quot; DURATION 90d REPLICATION 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to check, you can type &lt;code&gt;SHOW RETENTION POLICIES&lt;/code&gt; to display all RPs.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;telegraf-2&quot;&gt;Telegraf&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have installed &lt;strong&gt;Telegraf&lt;/strong&gt; just to monitor the monitoring server (CPU, network, disk, &amp;#8230;&amp;#8203;).
You just have to configure it to send all the data to the &lt;code&gt;telegraf&lt;/code&gt; (the default value).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-property&quot; data-lang=&quot;property&quot;&gt;[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  # default is localhost with the standard port of influx
  # urls = [&quot;http://10.0.0.12:8086&quot;]

  ## The target database for metrics; will be created as needed.
  database = &quot;telegraf&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;chronograf&quot;&gt;Chronograf&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Chronograf is listening on the port &lt;code&gt;8888&lt;/code&gt;.
So open your browser at &lt;a href=&quot;http://MONITORING_SERVER_IP:8888/&quot; class=&quot;bare&quot;&gt;http://MONITORING_SERVER_IP:8888/&lt;/a&gt; (change &lt;code&gt;MONITORING_SERVER_IP&lt;/code&gt; with the corresponding IP).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can take a look at the &lt;strong&gt;Host List&lt;/strong&gt;, you should see a list with two items : names of the monitored and monitoring server.
Click on one, and should see something like this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/chronograf.png&quot; alt=&quot;chronograf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can create a new dashboard for Neo4j with the following widgets :&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 66.6668%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Query&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Thread Jetty&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;threads.jetty.all&quot;) AS &quot;mean_threads.jetty.all&quot;,
       mean(&quot;threads.jetty.idle&quot;) AS &quot;mean_threads.jetty.idle&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.server&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM memory&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stacked Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT pool.g1_survivor_space/1000000,
       pool.metaspace/1000000,
       pool.g1_eden_space/1000000,
       pool.g1_old_gen/1000000
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.memory&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM GC Time&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DIFFERENCE(&quot;time.g1_young_generation&quot;) AS &quot;mean_time.g1_young_generation&quot;,
       DIFFERENCE(&quot;time.g1_old_generation&quot;) AS &quot;mean_time.g1_old_generation&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.gc&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Transactions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DIFFERENCE(last(&quot;started&quot;)) AS &quot;mean_started&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.transaction&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(linear)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Page cache&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;hits&quot;) AS &quot;mean_hits&quot;,
       mean(&quot;page_faults&quot;) AS &quot;mean_page_faults&quot;,
       mean(&quot;flushes&quot;) AS &quot;mean_flushes&quot;,
       mean(&quot;evictions&quot;) AS &quot;mean_evictions&quot;,
       mean(&quot;eviction_exceptions&quot;) AS &quot;mean_eviction_exceptions&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.page_cache&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM Threads&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT mean(&quot;total&quot;) AS &quot;mean_total&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;vm.thread&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Nodes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT max(&quot;node&quot;) AS &quot;max_node&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of relationships&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;relationship&quot;) AS &quot;last_relationship&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Properties&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;property&quot;) AS &quot;last_property&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of Relationship Types&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT last(&quot;relationship_type&quot;) AS &quot;last_relationship_type&quot;
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.ids_in_use&quot;
WHERE time &amp;gt; :dashboardTime:
GROUP BY time(:interval:) FILL(none)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Opened Transactions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Line Graph + Single stat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT started  - committed - rollbacks
FROM &quot;telegraf&quot;.&quot;autogen&quot;.&quot;neo4j.transaction&quot;
WHERE time &amp;gt; :dashboardTime:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the result :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/neo-dashboard.png&quot; alt=&quot;neo dashboard&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kapacitor&quot;&gt;Kapacitor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kapacitor is the alerting systen of the stack.
You can create some rules for Kapacitor directly in Chronograf :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/monitor-neo4j-influx/kapacitor.png&quot; alt=&quot;kapacitor&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This alert sends a message on slack as soon as there less than 20% of free space on my disk :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You see it&amp;#8217;s really easy to monitor your infrastructure and Neo4j servers with the &lt;strong&gt;TICK&lt;/strong&gt; stack.
But there are some lacks :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Telegraf doesn&amp;#8217;t have a JMX plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not possible to make a generic continious query that downsample the data with the same field name (you will have an aggregation prefix).
This is really annoying when you want to have only one query to make your dashboard (and not one per retention). See this &lt;a href=&quot;https://github.com/influxdata/influxdb/issues/7332&quot;&gt;link for more details&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to make the same kind of article but this time with Prometheus and Grafana.
So if you are interested, please leave a comment, it will motivate me to write it :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 22 May 2018 00:00:00 +0200</pubDate>
        <link>http://www.bsimard.com/2018/05/22/fr-monitoring-neo4j-influxdb.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2018/05/22/fr-monitoring-neo4j-influxdb.html</guid>
        
        
        <category>monitoring</category>
        
        <category> neo4j</category>
        
        <category> influx</category>
        
        <category> tick</category>
        
        
        
      </item>
      
    
     
    
     
      <item>
        <title>Importer une matrice d&amp;#8217;adjacence</title>
        <description>&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#le-fichier-csv&quot;&gt;Le fichier CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-processus&quot;&gt;Le processus&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#pré-requis-apoc&quot;&gt;Pré-requis: APOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-schema&quot;&gt;Le schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#le-script-d-import&quot;&gt;Le script d&amp;#8217;import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;objectif ici est de créer un graphe à partir d&amp;#8217;un fichier CSV correspondant a une &lt;a href=&quot;https://fr.wikipedia.org/wiki/Matrice_d&amp;#8217;adjacence&quot;&gt;matrice d&amp;#8217;adjacence&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-fichier-csv&quot;&gt;Le fichier CSV&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple de fichier CSV :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;1;1;0;0;1;0
1;0;1;0;1;0
0;1;0;1;0;0
0;0;1;0;1;1
1;1;0;1;0;0
1;0;0;1;0;0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque indice de ligne et de colonne correspond a un noeud du graph.
Si l&amp;#8217;intersection da la ligne &lt;code&gt;i&lt;/code&gt; avec la colonne &lt;code&gt;j&lt;/code&gt; vaut &lt;code&gt;1&lt;/code&gt;, cela signifie que le noeud &lt;code&gt;i&lt;/code&gt; et le noeud &lt;code&gt;j&lt;/code&gt; sont reliés.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;le-processus&quot;&gt;Le processus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pré-requis-apoc&quot;&gt;Pré-requis: APOC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour réaliser le script d&amp;#8217;import, je vais utiliser certaines procédures de la librairie &lt;code&gt;APOC&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici les étapes pour son installation :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Télécharger le JAR ici : &lt;a href=&quot;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar&quot; class=&quot;bare&quot;&gt;https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copier le JAR dans le répertoire &lt;code&gt;NEO4j_HOME/plugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Editer le fichier de configuration de Neo4j &lt;code&gt;NEO4J_HOME/conf/neo4j.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajouter les propriétés suivantes :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;# To be able to execute APOC procedures
dbms.security.procedures.unrestricted=apoc.*
# To allow APOC procedure to import files
apoc.import.file.enabled=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redémarrer le serveur Neo4j&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-schema&quot;&gt;Le schema&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le schéma de la base est ici tout simple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;des noeuds avec le label &lt;code&gt;Node&lt;/code&gt;, qui possèdent un attribut &lt;code&gt;id&lt;/code&gt; de type &lt;code&gt;entier&lt;/code&gt; correspondant a leur indice dans la matrice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;les noeuds seront reliés entre eux par une relation de type &lt;code&gt;LINKED_TO&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ainsi pour améliorer les performances de la base et assurer la cohérence des données, on va créer une contrainte d&amp;#8217;unicité sur le champs &lt;code&gt;id&lt;/code&gt; des noeuds &lt;code&gt;Node&lt;/code&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CREATE CONSTRAINT ON (n:Node) ASSERT n.id IS UNIQUE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;le-script-d-import&quot;&gt;Le script d&amp;#8217;import&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici le script permettant d&amp;#8217;importer le graphe :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;CALL apoc.load.csv('file:///home/bsimard/Applications/neo4j/current/import/matrice.csv',{}) YIELD lineNo AS lineNumber, list AS line

    MERGE (lineNode:Node { id:lineNumber})

    WITH lineNode, line
    UNWIND range(0,size(line)-1, 1) AS colNumber

    MERGE (colNode:Node { id:colNumber})
    WITH line, colNode, lineNode, colNumber

      CALL apoc.do.when(
        line[colNumber] = '1',
        'MERGE (lineNode)-[:LINKED_TO]-(colNode)',
        '',
        {lineNode:lineNode, colNode:colNode}
      ) YIELD value

      RETURN *&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;1&lt;/code&gt;, permet de lire le fichier CSV correspondant a la matrice d&amp;#8217;adjacence ligne par ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;3&lt;/code&gt; on crée le noeud correspondant a la ligne en cours, si celui-ci n&amp;#8217;existe pas grâce a l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La ligne &lt;code&gt;6&lt;/code&gt; permet d&amp;#8217;itérer sur les colonnes de la ligne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la ligne &lt;code&gt;8&lt;/code&gt; on crée le noeud correspondant a la colonne en cours, si celui-ci n&amp;#8217;existe pas grâce a l&amp;#8217;instruction &lt;code&gt;MERGE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la ligne &lt;code&gt;11&lt;/code&gt; a &lt;code&gt;16&lt;/code&gt;, on vérifie le contenu de la cellule &lt;code&gt;(lineNumber, colNumber)&lt;/code&gt;. Si celui-ci vaut &lt;code&gt;1&lt;/code&gt;, on crée la relation entre les deux noeuds si celle-ci n&amp;#8217;existe pas déjà.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voilà, la matrice d&amp;#8217;adjacence est chargé dans Neo4j !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/images/matrice-adjacence/graph.png&quot; alt=&quot;graph&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 23 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://www.bsimard.com/2017/11/23/fr-import-matrice-adjacence.html</link>
        <guid isPermaLink="true">http://www.bsimard.com/2017/11/23/fr-import-matrice-adjacence.html</guid>
        
        
        <category>neo4j</category>
        
        <category> import</category>
        
        <category> apoc</category>
        
        <category> matrice</category>
        
        
        
      </item>
      
    
     
    
  </channel>
</rss>
