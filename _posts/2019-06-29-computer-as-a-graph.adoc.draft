= Your computer is a graph !
Benoit Simard <contact@bsimard.com>
:page-layout: post
:page-locale: en
:page-description: Discover your computer by importing its hardwares, packages, network connection , ..., and see it as a graph
:page-image: /public/images/computer-as-a-graph/banner.png
:page-tags: graph,neo4j, cmdb, linux, discovery
:page-ref: computer-as-a-graph
:toc:

In this article I will show you how to import all the components of a Linux computer (package network connection, user, group, ...),
into a graph with the help of Neo4j.

In an next article, we will play with this dataset and see what we value we can get.

== The model

This is the model I want to produce :

[graphviz]
----
digraph finite_state_machine {
    rankdir=LR;
    node [
         shape = Mrecord
    ];

    // NODES
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    SERVER [label = "Server | fqdn:String*" ];
    PROCESS [label = "Process | pid:Integer* \l command: String" ];
    USER [label = "User | uid:Integer* \l username: String" ];
    GROUP [label = "Group | gid:Integer* \l name: String" ];
    NET_INTERFACE [label = "Interface | name:String* \l ip: String" ];
    NET_PORT [label = "Port | number:Integer" ];
    CONNECTION [label = "Connection" ];
    PACKAGE [label = "Package | name:String* \l url: String" ];
    PACKAGE_VERSION [label = "PackageVersion | version:String* \l architecture: String" ];
    PACKAGE_SECTION [label = "PackageSection | name:String* \l ip: String" ];
    VENDOR [label = "Vendor | name:String*" ];
    PRODUCT [label = "Product | name:String*" ];
    HARDWARE [label = "Hardware | id:String* \l description:String \l businfo:String" ];

    // EDGES
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    SERVER -> GROUP [label = "HAS_GROUP"];
    GROUP -> USER [label = "HAS_USER"];
    SERVER -> NET_INTERFACE [label = "HAS_INTERFACE"];
    NET_INTERFACE -> NET_PORT [label = "USES_PORT"];
    SERVER -> PROCESS [label = "RUN"];
    PROCESS -> PROCESS [label = "RUNS"];
    PROCESS -> USER [label = "OWNED_BY"];
    PROCESS -> NET_PORT [label="LISTEN_ON"];
    PROCESS -> CONNECTION [label="HAS_CONNECTION"];
    CONNECTION -> NET_PORT [label="SOURCE"];
    CONNECTION -> NET_PORT [label="TARGET"];
    SERVER -> HARDWARE [label="HAS_HARDWARE"];
    HARDWARE -> HARDWARE [label="HAS_HARDWARE"];
    HARDWARE -> PRODUCT  [label="TYPE_OF"];
    VENDOR -> PRODUCT  [label="HAS_PRODUCT"];
    PACKAGE_SECTION -> PACKAGE  [label="HAS_PACKAGE"];
    PACKAGE -> PACKAGE_VERSION  [label="HAS_VERSION"];
    PACKAGE_VERSION -> PACKAGE  [label="HAS_DEPENDENCY"];
    SERVER -> PACKAGE_VERSION [label="HAS_PACKAGE"];
}
----

Basicaly, I have a server that is composed of a list of:

* installed packages with their dependencies
* network interfaces with their connections
* hardware (as tree)
* groups and users
* process (as a tree)

From that model, we can create the indexes/constraints for the database :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/00_CONSTRAINTS.cyp[]
----

== Import items

=== Computer name

The first thing to retrieve is the https://fr.wikipedia.org/wiki/Fully_qualified_domain_name[FQDN] of the computer.
For this I will use the command : `hostname --fqdn`.

[source,bash]
----
$> hostname --fqdn
pythagore
----

This will help us to create the node `Server` :

[source,bash]
----
include::../public/blog/computer-as-a-graph/cypher/01_SERVER.cyp[lines=3..-1]
----

=== Hardware

To retrieve the entire composition of the server,
I will use the command `lshw` that list all the hardware in a tree format.

Moreover, the command can generate a JSON file if we pass the argument `-json`:

[source,shell]
----
include::../public/blog/computer-as-a-graph/shell/08_HARDWARE.sh[lines=7;13]
----

[source,json]
----
{
  "id" : "pythagore",
  "class" : "system",
  "claimed" : true,
  "description" : "Computer",
  "width" : 64,
  "capabilities" : {
    "vsyscall32" : "processus 32 bits"
  },
  "children" : [
    {
      "id" : "core",
      "class" : "bus",
      "claimed" : true,
      "description" : "Motherboard",
      "physid" : "0",
      "children" : [
        {
          "id" : "memory",
          "class" : "memory",
          "claimed" : true,
          "description" : "Mémoire système",
          "physid" : "0",
          "units" : "bytes",
          "size" : 16695070720
        }
        ...
      ]
    }
  ]
}
----

The import process of this file will be a little complexe,
because it's a **JSON tree** with an undeterminated depth. So I need to create a **recursive query** to create its structure in neo4j.

For this I will use massively https://neo4j-contrib.github.io/neo4j-apoc-procedures[APOC] for that !

For each item of the JSON, I want to create this : `(Vendor)-->(Product)<--(ProductInstance)<--(ParentHardwareInstance)`

If I translate that in Cypher in a custom procedure, it gives that :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/08_HARDWARE.cyp[lines=4..31]
----

As you see at the **line 18**, I recall the procedure itself if there are some children.
Pretty cool no ?

NOTE: The documentation for the cypher custom procedure feature is available  here : https://neo4j-contrib.github.io/neo4j-apoc-procedures/#cypher-based-procedures-functions

Then I just have to call the procedure with the data like that :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/08_HARDWARE.cyp[lines=34..37]
----

And to finish, I put the `class` attribut as a Label :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/08_HARDWARE.cyp[lines=40..43]
----

If you want to see the result in the browser, this is the query for just displaying the tree structure of hardwares :

[source,cypher]
----
MATCH p=(n:Server {fqdn:'pythagore.logisima'})-[:HAS_HARDWARE]->(:Hardware)-[:HAS_HARDWARE*]->(h:Hardware)
WHERE NOT (h)-[:HAS_HARDWARE]->()
RETURN *
----

image::/public/images/computer-as-a-graph/hardware-tree.svg[width=70%]

=== User & Group

==== Users

Users are stored in the file `/etc/users`, where each line represents a user.
For example : `bsimard:x:1000:1000:Benoit Simard,,,:/home/bsimard:/bin/bash`

. **Username:** The login of the user, `bsimard`
. **Password:**  Generally password is set to `x`. It indicates that password are stored in the file `/etc/shadow`.
. **User ID (UID):**  The ID of the user.
. **Group ID (GID):**  The ID of the main group of the user
. **User ID Info:** Some information about the user seperated by a `,`, like the fullname, phone, email
. **Home directory:** The home directory of the user `/home/bsimard`
. **Command/shell:** The command for the shell, in my case `/bin/bash`

This is the Cypher script to import this file in Neo4j :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/02_USERS.cyp[lines=3..-1]
----

==== Groups

Groups are stored in the file `/etc/groups`, where each line represents a group.
For example : `adm:x:4:syslog,bsimard`

. **Group name:** Name of the group, in our example it's `adm`
. **Password:**  Generally password is not used, hence it is empty/blan, ie. `x`
. **Group ID (GID):** Each group must be assigned a group ID, , in our example it's `4`
. **Group List:** It is a list of user names of users who are members of the group, separated by a `,`. In our example `syslog` and `bsimard`

This is the Cypher script to import this file in Neo4j :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/03_GROUPS.cyp[lines=3..-1]
----

==== The result

image::/public/images/computer-as-a-graph/user-all.svg[width=70%]

=== Process list

To retrieve the list of all the running process, with their dependencies,
I will use the **ps** command with those arguments :

* **e:** Select all processes
* **o:** To specify the format with
** **pid:** The ID of the process
** **ppid:** The ID of the parent process
** **comm:** The command that has launched the process
** **ruser:** The username of the user that owns the process

[source,bash]
----
$> ps -eo pid,ppid,comm,ruser

PID,PPID,%CPU,SIZE,COMMAND,RUSER
1,0,0.0,18964,systemd,root
2,0,0.0,0,kthreadd,root
4,2,0.0,0,kworker/0:0H,root
6,2,0.0,0,mm_percpu_wq,root
----

With the help of **awk**, we can generate a CSV file :

[source,shell]
----
include::../public/blog/computer-as-a-graph/shell/04_PROCESSES.sh[lines=7;13]
----

And this is the cypher script to import it :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/04_PROCESSES.cyp[lines=3..-1]
----

When the import is finished, you should have something similar to this by excuting the following query :

[source,cypher]
----
MATCH path=(n:Server {fqdn:'pythagore.logisima'})-[:HAS_PROCESS]->(:Process)-[:HAS_PROCESS*]->(p:Process)
WHERE NOT (p)-[:HAS_PROCESS]->()
RETURN *
----

image::/public/images/computer-as-a-graph/process-tree.svg[width=70%]

We can also search all the processes of a user :

[source,cypher]
----
MATCH (n:Server {fqdn:'pythagore.logisima'})-[:HAS_GROUP|:HAS_USER*2..2]->(u:User {name:'bsimard'})
WITH u
MATCH (u)<-[:OWNED_BY]-(p)
RETURN *
----

image::/public/images/computer-as-a-graph/process-user.svg[width=40%]

=== List of installed packages

Because I have a debian system, I will use the **dpkg** command, and produce a CSV from its output :

[source,shell]
----
include::../public/blog/computer-as-a-graph/shell/05_PACKAGES.sh[lines=7;14]
----

I can import it with the following cypher script :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/05_PACKAGES.cyp[lines=3..-1]
----

If you want to see the result, you can run the following query :

[source,cypher]
----
MATCH (n:Server {fqdn:'pythagore.logisima'})-[:HAS_PACKAGE]->(:Package)-[:HAS_PACKAGE*]->(p:Package)
WHERE NOT (p)-[:HAS_PACKAGE]->()
RETURN *
----

image::/public/images/computer-as-a-graph/packages.svg[width=70%]

=== Network

==== Network interfaces

To get the list of the network interface, I will use the **ip** command with the following arguments :

* **r:** See the routing table
* **n:** Display the IP adresses
* **w:** Don't truncate IP addresses

[source,shell]
----
$>ip -o addr show

1: lo    inet 127.0.0.1/8 scope host lo\       valid_lft forever preferred_lft forever
1: lo    inet6 ::1/128 scope host \       valid_lft forever preferred_lft forever
2: wlp58s0    inet 10.0.1.11/24 brd 10.0.1.255 scope global dynamic wlp58s0\       valid_lft 2720sec preferred_lft 2720sec
2: wlp58s0    inet6 fe80::cc06:f22c:2e3b:6aaf/64 scope link \       valid_lft forever preferred_lft forever
3: br-8a43a73a9b0d    inet 172.24.0.1/16 brd 172.24.255.255 scope global br-8a43a73a9b0d\       valid_lft forever preferred_lft forever
4: br-f8fefbd33c18    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-f8fefbd33c18\       valid_lft forever preferred_lft forever
5: br-0ba6b709cb23    inet 172.21.0.1/16 brd 172.21.255.255 scope global br-0ba6b709cb23\       valid_lft forever preferred_lft forever
6: docker0    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\       valid_lft forever preferred_lft forever
7: br-667de2307c35    inet 172.22.0.1/16 brd 172.22.255.255 scope global br-667de2307c35\       valid_lft forever preferred_lft forever
8: br-72683ea3a3d0    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-72683ea3a3d0\       valid_lft forever preferred_lft forever

----

For my need, I need the IP addresses (v4 & v6) of the Interface and its name.
So by using awk, we can produce a CSV file :

[source,shell]
----
include::../public/blog/computer-as-a-graph/shell/06_NETWORK_INTERFACES.sh[lines=7;15]
----

Now I can load it in Neo4j :

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/06_NETWORK_INTERFACES.cyp[lines=3..-1]
----

It gives me the following graph  :

image::/public/images/computer-as-a-graph/interfaces.svg[width=30%]

==== Network connections

To see all the connections on our computer, I will use the **netstat** command,
with the following arguments :

* **a:** Display every socket
* **u:** Filter on UDP sockets
* **t:** Filter on TCP sockets
* **p:** Display the process ID that use the socket
* **n:** Display the IP adresses
* **w:** Don't truncate IP addresses

NOTE: you need to run this command as a root to see all the connections

[source,shell]
----
$> netstat -alpuetn

Connexions Internet actives (serveurs et établies)
Proto Recv-Q Send-Q Adresse locale          Adresse distante        Etat       User       Inode       PID/Program name
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      124        28742       1317/mysqld
tcp        0      0 127.0.1.1:53            0.0.0.0:*               LISTEN      0          35483       3192/dnsmasq
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      0          4024761     5070/cupsd
tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN      125        28000       1434/postgres
tcp        0      0 127.0.0.1:38630         127.0.0.1:7687          ESTABLISHED 1000       4856935     14182/firefox
tcp        0      0 10.0.1.11:39694         198.252.206.25:443      ESTABLISHED 1000       5159133     14182/firefox
tcp        0      0 127.0.0.1:39044         127.0.0.1:7687          ESTABLISHED 1000       4908177     14182/firefox
tcp        0      0 10.0.1.11:38388         52.222.163.46:443       ESTABLISHED 1000       5190592     14182/firefox
tcp        0      0 127.0.0.1:39034         127.0.0.1:7687          ESTABLISHED 1000       4903190     14182/firefox
tcp        0      0 10.0.1.11:49408         216.58.209.238:443      ESTABLISHED 1000       4994841     14182/firefox
tcp        0      0 10.0.1.11:42724         172.217.18.197:443      ESTABLISHED 1000       5163155     14182/firefox
tcp        0      0 10.0.1.11:38316         52.222.163.46:443       ESTABLISHED 1000       5157419     7587/libpepflashpla
tcp        0      0 127.0.0.1:38632         127.0.0.1:7687          ESTABLISHED 1000       4853218     14182/firefox
tcp        0      0 10.0.1.11:39698         198.252.206.25:443      ESTABLISHED 1000       5159174     14182/firefox
tcp        0      0 10.0.1.11:58296         10.0.0.1:445            ESTABLISHED 0          4628873     -
tcp        0      0 127.0.0.1:39046         127.0.0.1:7687          ESTABLISHED 1000       4914563     14182/firefox
----

Like above, I will create a CSV :

[source,shell]
----
include::../public/blog/computer-as-a-graph/shell/07_NETWORK_CONNECTIONS.sh[lines=7;13]
----

I will split in two parts (with sub-parts), the import of this file :

* processes that listen on a port
** On IPv4
** On IPv6
** On all interfaces
* processes that have an established connection
** With an IPv4
** With an IPv6

===== Processes that listen

====== On Ipv4

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/07_NETWORK_CONNECTIONS.cyp[lines=4..29]
----

====== On Ipv6

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/07_NETWORK_CONNECTIONS.cyp[lines=32..57]
----

====== On all interfaces

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/07_NETWORK_CONNECTIONS.cyp[lines=60..82]
----

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/07_NETWORK_CONNECTIONS.cyp[lines=85..107]
----

====== Graph example

This is so cool, at the end we obtain the graph below just by running the following query :

[source,cypher]
----
MATCH path=(n:Server {fqdn:'pythagore.logisima'})-[:HAS_INTERFACE]->(i:Interface)-[:USES_PORT]->(:Port)<-[:LISTEN_ON]-(p:Process)
RETURN path
----

image::/public/images/computer-as-a-graph/network-listen.svg[width=70%]

===== Processes with a connection

This time, I import all the connections (incoming/outgoing) that computers have.

====== On Ipv4

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/07_NETWORK_CONNECTIONS.cyp[lines=110..146]
----

====== On Ipv6

[source,cypher]
----
include::../public/blog/computer-as-a-graph/cypher/07_NETWORK_CONNECTIONS.cyp[lines=149..183]
----

====== Graph example

And the result is :

[source,cypher]
----
MATCH path=(n:Server {fqdn:'pythagore.logisima'})-[:HAS_INTERFACE]->(i:Interface)-[:USES_PORT]->(:Port)<-[:SOURCE]-(:Connection)-[:TARGET]->(p:Port)
OPTIONAL MATCH path2=(p)<-[:USES_PORT]-(:Interface)<-[:HAS_INTERFACE]-(:Server)
RETURN path, path2
----

image::/public/images/computer-as-a-graph/network-connections.svg[width=70%]

== Conclusion

It's really cool to see all the components of a computer as a graph,
and if we do that on every computer of a network (hey `nmap`), we can have a complete vision of it, just with a discovery process.

In a next article, I will show you what we can do with those data, stay tune !